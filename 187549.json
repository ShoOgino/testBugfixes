{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#initFirstTime().mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#initFirstTime().mjava","pathOld":"/dev/null","sourceNew":"  /** initialize with checking for repeats. Heavy work, but done only for the first candidate doc.<p>\n   * If there are repetitions, check if multi-term postings (MTP) are involved.<p>\n   * Without MTP, once PPs are placed in the first candidate doc, repeats (and groups) are visible.<br>\n   * With MTP, a more complex check is needed, up-front, as there may be \"hidden collisions\".<br>\n   * For example P1 has {A,B}, P1 has {B,C}, and the first doc is: \"A C B\". At start, P1 would point\n   * to \"A\", p2 to \"C\", and it will not be identified that P1 and P2 are repetitions of each other.<p>\n   * The more complex initialization has two parts:<br>\n   * (1) identification of repetition groups.<br>\n   * (2) advancing repeat groups at the start of the doc.<br>\n   * For (1), a possible solution is to just create a single repetition group, \n   * made of all repeating pps. But this would slow down the check for collisions, \n   * as all pps would need to be checked. Instead, we compute \"connected regions\" \n   * on the bipartite graph of postings and terms.  \n   */\n  private boolean initFirstTime() throws IOException {\n    //System.err.println(\"initFirstTime: doc: \"+min.doc);\n    checkedRpts = true;\n    placeFirstPositions();\n\n    LinkedHashMap<Term,Integer> rptTerms = repeatingTerms(); \n    hasRpts = !rptTerms.isEmpty();\n\n    if (hasRpts) {\n      rptStack = new PhrasePositions[numPostings]; // needed with repetitions\n      ArrayList<ArrayList<PhrasePositions>> rgs = gatherRptGroups(rptTerms);\n      sortRptGroups(rgs);\n      if (!advanceRepeatGroups()) {\n        return false; // PPs exhausted\n      }\n    }\n    \n    fillQueue();\n    return true; // PPs available\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#initFirstTime().mjava","pathOld":"/dev/null","sourceNew":"  /** initialize with checking for repeats. Heavy work, but done only for the first candidate doc.<p>\n   * If there are repetitions, check if multi-term postings (MTP) are involved.<p>\n   * Without MTP, once PPs are placed in the first candidate doc, repeats (and groups) are visible.<br>\n   * With MTP, a more complex check is needed, up-front, as there may be \"hidden collisions\".<br>\n   * For example P1 has {A,B}, P1 has {B,C}, and the first doc is: \"A C B\". At start, P1 would point\n   * to \"A\", p2 to \"C\", and it will not be identified that P1 and P2 are repetitions of each other.<p>\n   * The more complex initialization has two parts:<br>\n   * (1) identification of repetition groups.<br>\n   * (2) advancing repeat groups at the start of the doc.<br>\n   * For (1), a possible solution is to just create a single repetition group, \n   * made of all repeating pps. But this would slow down the check for collisions, \n   * as all pps would need to be checked. Instead, we compute \"connected regions\" \n   * on the bipartite graph of postings and terms.  \n   */\n  private boolean initFirstTime() throws IOException {\n    //System.err.println(\"initFirstTime: doc: \"+min.doc);\n    checkedRpts = true;\n    placeFirstPositions();\n\n    LinkedHashMap<Term,Integer> rptTerms = repeatingTerms(); \n    hasRpts = !rptTerms.isEmpty();\n\n    if (hasRpts) {\n      rptStack = new PhrasePositions[numPostings]; // needed with repetitions\n      ArrayList<ArrayList<PhrasePositions>> rgs = gatherRptGroups(rptTerms);\n      sortRptGroups(rgs);\n      if (!advanceRepeatGroups()) {\n        return false; // PPs exhausted\n      }\n    }\n    \n    fillQueue();\n    return true; // PPs available\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#initFirstTime().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#initFirstTime().mjava","sourceNew":"  /** initialize with checking for repeats. Heavy work, but done only for the first candidate doc.<p>\n   * If there are repetitions, check if multi-term postings (MTP) are involved.<p>\n   * Without MTP, once PPs are placed in the first candidate doc, repeats (and groups) are visible.<br>\n   * With MTP, a more complex check is needed, up-front, as there may be \"hidden collisions\".<br>\n   * For example P1 has {A,B}, P1 has {B,C}, and the first doc is: \"A C B\". At start, P1 would point\n   * to \"A\", p2 to \"C\", and it will not be identified that P1 and P2 are repetitions of each other.<p>\n   * The more complex initialization has two parts:<br>\n   * (1) identification of repetition groups.<br>\n   * (2) advancing repeat groups at the start of the doc.<br>\n   * For (1), a possible solution is to just create a single repetition group, \n   * made of all repeating pps. But this would slow down the check for collisions, \n   * as all pps would need to be checked. Instead, we compute \"connected regions\" \n   * on the bipartite graph of postings and terms.  \n   */\n  private boolean initFirstTime() throws IOException {\n    //System.err.println(\"initFirstTime: doc: \"+min.doc);\n    checkedRpts = true;\n    placeFirstPositions();\n\n    LinkedHashMap<Term,Integer> rptTerms = repeatingTerms(); \n    hasRpts = !rptTerms.isEmpty();\n\n    if (hasRpts) {\n      rptStack = new PhrasePositions[numPostings]; // needed with repetitions\n      ArrayList<ArrayList<PhrasePositions>> rgs = gatherRptGroups(rptTerms);\n      sortRptGroups(rgs);\n      if (!advanceRepeatGroups()) {\n        return false; // PPs exhausted\n      }\n    }\n    \n    fillQueue();\n    return true; // PPs available\n  }\n\n","sourceOld":"  /** initialize with checking for repeats. Heavy work, but done only for the first candidate doc.<p>\n   * If there are repetitions, check if multi-term postings (MTP) are involved.<p>\n   * Without MTP, once PPs are placed in the first candidate doc, repeats (and groups) are visible.<br>\n   * With MTP, a more complex check is needed, up-front, as there may be \"hidden collisions\".<br>\n   * For example P1 has {A,B}, P1 has {B,C}, and the first doc is: \"A C B\". At start, P1 would point\n   * to \"A\", p2 to \"C\", and it will not be identified that P1 and P2 are repetitions of each other.<p>\n   * The more complex initialization has two parts:<br>\n   * (1) identification of repetition groups.<br>\n   * (2) advancing repeat groups at the start of the doc.<br>\n   * For (1), a possible solution is to just create a single repetition group, \n   * made of all repeating pps. But this would slow down the check for collisions, \n   * as all pps would need to be checked. Instead, we compute \"connected regions\" \n   * on the bipartite graph of postings and terms.  \n   */\n  private boolean initFirstTime() throws IOException {\n    //System.err.println(\"initFirstTime: doc: \"+min.doc);\n    checkedRpts = true;\n    placeFirstPositions();\n\n    LinkedHashMap<Term,Integer> rptTerms = repeatingTerms(); \n    hasRpts = !rptTerms.isEmpty();\n\n    if (hasRpts) {\n      rptStack = new PhrasePositions[numPostings]; // needed with repetitions\n      ArrayList<ArrayList<PhrasePositions>> rgs = gatherRptGroups(rptTerms);\n      sortRptGroups(rgs);\n      if (!advanceRepeatGroups()) {\n        return false; // PPs exhausted\n      }\n    }\n    \n    fillQueue();\n    return true; // PPs available\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","3b11b9d5eaf9707760ca5151530830a825197023"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}