{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","commits":[{"id":"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","date":1364392557,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      //easy to observe is correct; not an optimal code path but this is a test\n      if (shape1.relate(other) == SpatialRelation.CONTAINS || shape2.relate(other) == SpatialRelation.CONTAINS)\n        return SpatialRelation.CONTAINS;\n      if (shape1.relate(other) == SpatialRelation.WITHIN && shape2.relate(other) == SpatialRelation.WITHIN)\n        return SpatialRelation.WITHIN;\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return SpatialRelation.INTERSECTS;\n      return SpatialRelation.DISJOINT;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b84d7eef0fc32233dd6251567fdbdb10c4cda7","date":1365707213,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r != INTERSECTS)\n        return r;\n      //See if the correct answer is actually Contains\n      Rectangle oRect = (Rectangle)other;\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      if (relate(ctx.makePoint(oRect.getMinX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMinX(), oRect.getMaxY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMaxY())) == CONTAINS)\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      //easy to observe is correct; not an optimal code path but this is a test\n      if (shape1.relate(other) == SpatialRelation.CONTAINS || shape2.relate(other) == SpatialRelation.CONTAINS)\n        return SpatialRelation.CONTAINS;\n      if (shape1.relate(other) == SpatialRelation.WITHIN && shape2.relate(other) == SpatialRelation.WITHIN)\n        return SpatialRelation.WITHIN;\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return SpatialRelation.INTERSECTS;\n      return SpatialRelation.DISJOINT;\n    }\n\n","bugFix":null,"bugIntro":["377464b9f674227f6d755dce0dd14a01ad955b5e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"377464b9f674227f6d755dce0dd14a01ad955b5e","date":1369772619,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r != INTERSECTS && !(r == WITHIN && biasContainsThenWithin))\n        return r;\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      Rectangle oRect = (Rectangle)other;\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      if (relate(ctx.makePoint(oRect.getMinX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMinX(), oRect.getMaxY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMaxY())) == CONTAINS)\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r != INTERSECTS)\n        return r;\n      //See if the correct answer is actually Contains\n      Rectangle oRect = (Rectangle)other;\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      if (relate(ctx.makePoint(oRect.getMinX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMinX(), oRect.getMaxY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMaxY())) == CONTAINS)\n        return CONTAINS;\n      return r;\n    }\n\n","bugFix":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c812573c5617c5a3eff581b09251df3030455fbb","date":1392316648,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == CONTAINS)\n        return r;\n      if (r == DISJOINT)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      Rectangle oRect = (Rectangle)other;\n      if (relate(ctx.makePoint(oRect.getMinX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMinX(), oRect.getMaxY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMaxY())) == CONTAINS)\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r != INTERSECTS && !(r == WITHIN && biasContainsThenWithin))\n        return r;\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      Rectangle oRect = (Rectangle)other;\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      if (relate(ctx.makePoint(oRect.getMinX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMinX(), oRect.getMaxY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMaxY())) == CONTAINS)\n        return CONTAINS;\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d2a1de5195b361aa0308c81d975ac74695d0ffe","date":1401207212,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all it's corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == CONTAINS)\n        return r;\n      if (r == DISJOINT)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      Rectangle oRect = (Rectangle)other;\n      if (relate(ctx.makePoint(oRect.getMinX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMinX(), oRect.getMaxY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMinY())) == CONTAINS\n          && relate(ctx.makePoint(oRect.getMaxX(), oRect.getMaxY())) == CONTAINS)\n        return CONTAINS;\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all it's corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all it's corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d2a1de5195b361aa0308c81d975ac74695d0ffe":["c812573c5617c5a3eff581b09251df3030455fbb"],"c812573c5617c5a3eff581b09251df3030455fbb":["377464b9f674227f6d755dce0dd14a01ad955b5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0521546db127e358ced1772a9d696dbdd255b203":["3d2a1de5195b361aa0308c81d975ac74695d0ffe"],"377464b9f674227f6d755dce0dd14a01ad955b5e":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3d2a1de5195b361aa0308c81d975ac74695d0ffe":["0521546db127e358ced1772a9d696dbdd255b203"],"c812573c5617c5a3eff581b09251df3030455fbb":["3d2a1de5195b361aa0308c81d975ac74695d0ffe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"377464b9f674227f6d755dce0dd14a01ad955b5e":["c812573c5617c5a3eff581b09251df3030455fbb"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["377464b9f674227f6d755dce0dd14a01ad955b5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}