{"path":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","commits":[{"id":"69cad0546debf9ce9d44e309ecfa26760fecd5d8","date":1425846082,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginRegistry.RuntimeLib#init(PluginInfo).mjava","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    }\n\n","sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(\"name\");\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n      sig = info.attributes.get(\"sig\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#init(PluginInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void init(PluginInfo info) {\n      name = info.attributes.get(NAME);\n      url = info.attributes.get(\"url\");\n      sig = info.attributes.get(\"sig\");\n      if(url == null) {\n        Object v = info.attributes.get(\"version\");\n        if (name == null || v == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n        }\n        version = String.valueOf(v);\n      } else {\n        sha512 = info.attributes.get(\"sha512\");\n        if(sha512 == null){\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n        }\n        ByteBuffer buf = null;\n        buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n        String digest = BlobRepository.sha512Digest(buf);\n        if(!sha512.equals(digest))  {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest)  );\n        }\n        log.info(\"dynamic library verified {}, sha512: {}\", url, sha512);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["c44cc06c26e456fe9c215072b79fce30babe3975"],"627e70d5711ab39d080a080f089685268525f54d":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["627e70d5711ab39d080a080f089685268525f54d"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"627e70d5711ab39d080a080f089685268525f54d":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"c44cc06c26e456fe9c215072b79fce30babe3975":["75237075d8425856bf4bbf52a6be4f9162b8187d","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["627e70d5711ab39d080a080f089685268525f54d","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}