{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getSolrConfigFromZk(ZkController,String,String,SolrResourceLoader).mjava","commits":[{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getSolrConfigFromZk(ZkController,String,String,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXmlBackCompat#getSolrConfigFromZk(ZkController,String,String,SolrResourceLoader).mjava","sourceNew":"  @Override\n  public SolrConfig getSolrConfigFromZk(ZkController zkController, String zkConfigName, String solrConfigFileName,\n                                        SolrResourceLoader resourceLoader) {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(\n          resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n          resourceLoader, solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \" + solrConfigFileName, e);\n    }\n    return cfg;\n  }\n\n","sourceOld":"  @Override\n  public SolrConfig getSolrConfigFromZk(ZkController zkController, String zkConfigName, String solrConfigFileName,\n                                        SolrResourceLoader resourceLoader) {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(\n          resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n          resourceLoader, solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \" + solrConfigFileName, e);\n    }\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getSolrConfigFromZk(ZkController,String,String,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrConfig getSolrConfigFromZk(ZkController zkController, String zkConfigName, String solrConfigFileName,\n                                        SolrResourceLoader resourceLoader) {\n    SolrConfig cfg = null;\n    try {\n      byte[] config = zkController.getConfigFileData(zkConfigName, solrConfigFileName);\n      InputSource is = new InputSource(new ByteArrayInputStream(config));\n      is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(solrConfigFileName));\n      cfg = solrConfigFileName == null ? new SolrConfig(\n          resourceLoader, SolrConfig.DEFAULT_CONF_FILE, is) : new SolrConfig(\n          resourceLoader, solrConfigFileName, is);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"getSolrConfigFromZK failed for \" + zkConfigName + \" \" + solrConfigFileName, e);\n    }\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}