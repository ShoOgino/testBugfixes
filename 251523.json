{"path":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          newLogMergePolicy()).setMaxBufferedDocs(2));\n\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(Runtime.getRuntime().availableProcessors());\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          newLogMergePolicy()).setMaxBufferedDocs(2));\n\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(Runtime.getRuntime().availableProcessors());\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(\n          newLogMergePolicy()).setMaxBufferedDocs(2));\n\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(Runtime.getRuntime().availableProcessors());\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(Runtime.getRuntime().availableProcessors());\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(\n          newLogMergePolicy()).setMaxBufferedDocs(2));\n\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(Runtime.getRuntime().availableProcessors());\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","962d04139994fce5193143ef35615499a9a96d78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54164db701db8615c66a2cf531dc0204d6584b40","date":1302853354,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(Runtime.getRuntime().availableProcessors());\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int SIZE = 200 * RANDOM_MULTIPLIER;\n      final int numUpdates = (int) (SIZE * (2 + random.nextDouble()));\n      int numThreads = 3 + random.nextInt(12);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      w.setInfoStream(VERBOSE ? System.out : null);\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testUpdateSameDoc().mjava","sourceNew":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSameDoc() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    for (int r = 0; r < 3; r++) {\n      final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n      final int numUpdates = atLeast(20);\n      int numThreads = _TestUtil.nextInt(random, 2, 6);\n      IndexingThread[] threads = new IndexingThread[numThreads];\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new IndexingThread(docs, w, numUpdates);\n        threads[i].start();\n      }\n\n      for (int i = 0; i < numThreads; i++) {\n        threads[i].join();\n      }\n\n      w.close();\n    }\n\n    IndexReader open = IndexReader.open(dir);\n    assertEquals(1, open.numDocs());\n    open.close();\n    docs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54164db701db8615c66a2cf531dc0204d6584b40"],"962d04139994fce5193143ef35615499a9a96d78":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"54164db701db8615c66a2cf531dc0204d6584b40":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0061262413ecc163d6eebba1b5c43ab91a0c2dc5","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["962d04139994fce5193143ef35615499a9a96d78"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["54164db701db8615c66a2cf531dc0204d6584b40"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"54164db701db8615c66a2cf531dc0204d6584b40":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78","327863a2fd61e831028b6c56c8fef6b00a44eb0b","a3776dccca01c11e7046323cfad46a3b4a471233"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}