{"path":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),\n      new Long(0x8000000000002510L),new Long(0x800000000000251cL),\n      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),\n      new Long(0x800000000000250L), new Long(0x800000000000250L),\n      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),\n      new Long(0x80000000000020L),  new Long(0x80000000000024L),\n      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x800000000000040L), new Long(0x800000000000043L),\n      new Long(0x80000000000000L),  new Long(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      new Long(0x00L),new Long(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      new Long(0x800000000000251cL),new Long(0x800000000000251cL)\n    }).iterator());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),\n      new Long(0x8000000000002510L),new Long(0x800000000000251cL),\n      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),\n      new Long(0x800000000000250L), new Long(0x800000000000250L),\n      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),\n      new Long(0x80000000000020L),  new Long(0x80000000000024L),\n      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x800000000000040L), new Long(0x800000000000043L),\n      new Long(0x80000000000000L),  new Long(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      new Long(0x00L),new Long(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      new Long(0x800000000000251cL),new Long(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}