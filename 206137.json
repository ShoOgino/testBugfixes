{"path":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","commits":[{"id":"63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd","date":1082568388,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n    sortSubReaders();\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87b6140eb35784da365e76a7236e4cd52a1a396c","date":1233591709,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","sourceNew":"  /** Expert: Creates a searcher searching the provided\n   *  index, specifying whether searches must visit the\n   *  documents in order.  By default, segments are searched\n   *  in order of decreasing numDocs(); if you pass true for\n   *  docsInOrder, they will instead be searched in their\n   *  natural (unsorted) order.*/\n  public IndexSearcher(IndexReader r, boolean docsInOrder) {\n    this(r, false, docsInOrder);\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n    sortSubReaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n\n    List subReadersList = new ArrayList();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = (IndexReader[]) subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n  }\n\n","sourceOld":"  /** Expert: Creates a searcher searching the provided\n   *  index, specifying whether searches must visit the\n   *  documents in order.  By default, segments are searched\n   *  in order of decreasing numDocs(); if you pass true for\n   *  docsInOrder, they will instead be searched in their\n   *  natural (unsorted) order.*/\n  public IndexSearcher(IndexReader r, boolean docsInOrder) {\n    this(r, false, docsInOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n\n    List subReadersList = new ArrayList();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = (IndexReader[]) subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["87b6140eb35784da365e76a7236e4cd52a1a396c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87b6140eb35784da365e76a7236e4cd52a1a396c":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd"],"63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd":["63bc3238545c6012bd44f5d294077997f236bc4e"],"87b6140eb35784da365e76a7236e4cd52a1a396c":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["87b6140eb35784da365e76a7236e4cd52a1a396c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}