{"path":"sandbox/contributions/hilighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","commits":[{"id":"e3847974308b7ee4bf1bd64ab343a6758eb9ccb1","date":1081469776,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/hilighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e36e216d6ddce8d71e813a8b0d29d42d4c5025b9","date":1081470820,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/hilighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e36e216d6ddce8d71e813a8b0d29d42d4c5025b9":["e3847974308b7ee4bf1bd64ab343a6758eb9ccb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e36e216d6ddce8d71e813a8b0d29d42d4c5025b9"],"e3847974308b7ee4bf1bd64ab343a6758eb9ccb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3847974308b7ee4bf1bd64ab343a6758eb9ccb1"],"e36e216d6ddce8d71e813a8b0d29d42d4c5025b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3847974308b7ee4bf1bd64ab343a6758eb9ccb1":["e36e216d6ddce8d71e813a8b0d29d42d4c5025b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}