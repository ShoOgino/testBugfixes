{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(ZkController).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n  }\n\n","sourceOld":"  public ScheduledTriggers(ZkController zkController) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    coreContainer = zkController.getCoreContainer();\n    zkClient = zkController.getZkClient();\n    queueStats = new Overseer.Stats();\n    listeners = new TriggerListeners();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    // todo: make the cooldownPeriod configurable\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15ba547dfc0dd0b670e678cb3db8e5d27c694420","date":1511865512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS)));\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    // todo: make the cooldownPeriod configurable\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS)));\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    // todo: make the cooldownPeriod configurable\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS)));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS)));\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS), cloudManager.getTimeSource()));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS)));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(System.nanoTime() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0054ae381912e45884d3005a00486ed92a0f4925","date":1514900316,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS), cloudManager.getTimeSource()));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    actionThrottle = new AtomicReference<>(new ActionThrottle(\"action\", TimeUnit.SECONDS.toMillis(DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS), cloudManager.getTimeSource()));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTimeNs() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new SolrNamedThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new SolrNamedThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTimeNs() - cooldownPeriod.get());\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTimeNs() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,SolrCloudManager).mjava","sourceNew":null,"sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(DEFAULT_TRIGGER_CORE_POOL_SIZE,\n        new SolrNamedThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new SolrNamedThreadFactory(\"AutoscalingActionExecutor\"));\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    this.loader = loader;\n    queueStats = new Stats();\n    listeners = new TriggerListeners();\n    // initialize cooldown timer\n    cooldownStart.set(cloudManager.getTimeSource().getTimeNs() - cooldownPeriod.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","0054ae381912e45884d3005a00486ed92a0f4925"],"3f504512a03d978990cbff30db0522b354e846db":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["67e503ef0f418bc92404ff5d55694087c23d48eb","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0054ae381912e45884d3005a00486ed92a0f4925":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["1aad05eeff7818b0833c02ac6b743aa72054963b","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["3f504512a03d978990cbff30db0522b354e846db"],"0054ae381912e45884d3005a00486ed92a0f4925":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","0054ae381912e45884d3005a00486ed92a0f4925"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}