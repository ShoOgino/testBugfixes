{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount, type, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount, type, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesReaderBase#loadDocValues(int,Directory,String,DocValues.Type,IOContext).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount, type, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      DocValues.Type type, IOContext context) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount, type, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0f5e4b06eda9c2996435d90659faa1a8601d196"]},"commit2Childs":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}