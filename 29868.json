{"path":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>&lt;!prefix f=myfield&gt;foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>&lt;!prefix f=myfield&gt;foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>&lt;!prefix f=myfield&gt;foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"619b1425ab566e704b4c39fc7dc06cb04a7503a3","date":1204664204,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>&lt;!prefix f=myfield&gt;foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>&lt;!prefix f=myfield&gt;foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"593172866564e716c34f2b4746e28b0e3a048fb9","date":1210966113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>&lt;!prefix f=myfield&gt;foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      String localType = localParams.get(QueryParsing.TYPE);\n      type = localType == null ? defaultType : localType;\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    return qplug.createParser(qstr, localParams, req.getParams(), req);\n  }                            \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["593172866564e716c34f2b4746e28b0e3a048fb9"],"619b1425ab566e704b4c39fc7dc06cb04a7503a3":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"593172866564e716c34f2b4746e28b0e3a048fb9":["619b1425ab566e704b4c39fc7dc06cb04a7503a3"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"66ab3886c1d845c59c9e5b23b2fb247b927db498":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"619b1425ab566e704b4c39fc7dc06cb04a7503a3":["593172866564e716c34f2b4746e28b0e3a048fb9"],"593172866564e716c34f2b4746e28b0e3a048fb9":["ad94625fb8d088209f46650c8097196fec67f00c"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["619b1425ab566e704b4c39fc7dc06cb04a7503a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}