{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#[T]_create(String,boolean,DocValues.Type,Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","commits":[{"id":"6b588d7000deacb0a01f30746b91644112b94326","date":1331201456,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#[T]_create(String,boolean,DocValues.Type,Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#create(String,boolean,DocValues.Type,Collection[SearchGroup],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a {@link DVSecondPassGroupingCollector}.\n   * Selects and constructs the most optimal second pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param searchGroups    The groups from the first phase search\n   * @param groupSort       The sort used for the groups\n   * @param withinGroupSort The sort used for documents inside a group\n   * @param maxDocsPerGroup The maximum number of documents to collect per group\n   * @param getScores       Whether to include scores for the documents inside a group\n   * @param getMaxScores    Whether to keep track of the higest score per group\n   * @param fillSortFields  Whether to include the sort values\n   * @return the most optimal second pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVSecondPassGroupingCollector<T> create(String groupField,\n                                                     boolean diskResident,\n                                                     DocValues.Type type,\n                                                     Collection<SearchGroup<T>> searchGroups,\n                                                     Sort groupSort,\n                                                     Sort withinGroupSort,\n                                                     int maxDocsPerGroup,\n                                                     boolean getScores,\n                                                     boolean getMaxScores,\n                                                     boolean fillSortFields) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Lng(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Dbl(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new BR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new SortedBR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link DVSecondPassGroupingCollector}.\n   * Selects and constructs the most optimal second pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param searchGroups    The groups from the first phase search\n   * @param groupSort       The sort used for the groups\n   * @param withinGroupSort The sort used for documents inside a group\n   * @param maxDocsPerGroup The maximum number of documents to collect per group\n   * @param getScores       Whether to include scores for the documents inside a group\n   * @param getMaxScores    Whether to keep track of the higest score per group\n   * @param fillSortFields  Whether to include the sort values\n   * @return the most optimal second pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static DVSecondPassGroupingCollector create(String groupField,\n                                                     boolean diskResident,\n                                                     DocValues.Type type,\n                                                     Collection<SearchGroup> searchGroups,\n                                                     Sort groupSort,\n                                                     Sort withinGroupSort,\n                                                     int maxDocsPerGroup,\n                                                     boolean getScores,\n                                                     boolean getMaxScores,\n                                                     boolean fillSortFields) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new Lng(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new Dbl(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new BR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new SortedBR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#[T]_create(String,boolean,DocValues.Type,Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#create(String,boolean,DocValues.Type,Collection[SearchGroup],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a {@link DVSecondPassGroupingCollector}.\n   * Selects and constructs the most optimal second pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param searchGroups    The groups from the first phase search\n   * @param groupSort       The sort used for the groups\n   * @param withinGroupSort The sort used for documents inside a group\n   * @param maxDocsPerGroup The maximum number of documents to collect per group\n   * @param getScores       Whether to include scores for the documents inside a group\n   * @param getMaxScores    Whether to keep track of the higest score per group\n   * @param fillSortFields  Whether to include the sort values\n   * @return the most optimal second pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVSecondPassGroupingCollector<T> create(String groupField,\n                                                     boolean diskResident,\n                                                     DocValues.Type type,\n                                                     Collection<SearchGroup<T>> searchGroups,\n                                                     Sort groupSort,\n                                                     Sort withinGroupSort,\n                                                     int maxDocsPerGroup,\n                                                     boolean getScores,\n                                                     boolean getMaxScores,\n                                                     boolean fillSortFields) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Lng(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Dbl(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new BR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new SortedBR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link DVSecondPassGroupingCollector}.\n   * Selects and constructs the most optimal second pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param searchGroups    The groups from the first phase search\n   * @param groupSort       The sort used for the groups\n   * @param withinGroupSort The sort used for documents inside a group\n   * @param maxDocsPerGroup The maximum number of documents to collect per group\n   * @param getScores       Whether to include scores for the documents inside a group\n   * @param getMaxScores    Whether to keep track of the higest score per group\n   * @param fillSortFields  Whether to include the sort values\n   * @return the most optimal second pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static DVSecondPassGroupingCollector create(String groupField,\n                                                     boolean diskResident,\n                                                     DocValues.Type type,\n                                                     Collection<SearchGroup> searchGroups,\n                                                     Sort groupSort,\n                                                     Sort withinGroupSort,\n                                                     int maxDocsPerGroup,\n                                                     boolean getScores,\n                                                     boolean getMaxScores,\n                                                     boolean fillSortFields) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new Lng(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new Dbl(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new BR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return new SortedBR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#[T]_create(String,boolean,DocValues.Type,Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVSecondPassGroupingCollector#[T]_create(String,boolean,DocValues.Type,Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a {@link DVSecondPassGroupingCollector}.\n   * Selects and constructs the most optimal second pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param searchGroups    The groups from the first phase search\n   * @param groupSort       The sort used for the groups\n   * @param withinGroupSort The sort used for documents inside a group\n   * @param maxDocsPerGroup The maximum number of documents to collect per group\n   * @param getScores       Whether to include scores for the documents inside a group\n   * @param getMaxScores    Whether to keep track of the higest score per group\n   * @param fillSortFields  Whether to include the sort values\n   * @return the most optimal second pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVSecondPassGroupingCollector<T> create(String groupField,\n                                                     boolean diskResident,\n                                                     DocValues.Type type,\n                                                     Collection<SearchGroup<T>> searchGroups,\n                                                     Sort groupSort,\n                                                     Sort withinGroupSort,\n                                                     int maxDocsPerGroup,\n                                                     boolean getScores,\n                                                     boolean getMaxScores,\n                                                     boolean fillSortFields) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Lng(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Dbl(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new BR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new SortedBR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link DVSecondPassGroupingCollector}.\n   * Selects and constructs the most optimal second pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param searchGroups    The groups from the first phase search\n   * @param groupSort       The sort used for the groups\n   * @param withinGroupSort The sort used for documents inside a group\n   * @param maxDocsPerGroup The maximum number of documents to collect per group\n   * @param getScores       Whether to include scores for the documents inside a group\n   * @param getMaxScores    Whether to keep track of the higest score per group\n   * @param fillSortFields  Whether to include the sort values\n   * @return the most optimal second pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVSecondPassGroupingCollector<T> create(String groupField,\n                                                     boolean diskResident,\n                                                     DocValues.Type type,\n                                                     Collection<SearchGroup<T>> searchGroups,\n                                                     Sort groupSort,\n                                                     Sort withinGroupSort,\n                                                     int maxDocsPerGroup,\n                                                     boolean getScores,\n                                                     boolean getMaxScores,\n                                                     boolean fillSortFields) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Lng(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new Dbl(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new BR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVSecondPassGroupingCollector) new SortedBR(groupField, type, diskResident, (Collection) searchGroups, groupSort, withinGroupSort, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b588d7000deacb0a01f30746b91644112b94326"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6b588d7000deacb0a01f30746b91644112b94326"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b588d7000deacb0a01f30746b91644112b94326":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6b588d7000deacb0a01f30746b91644112b94326"],"6b588d7000deacb0a01f30746b91644112b94326":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}