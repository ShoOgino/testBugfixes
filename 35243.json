{"path":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        StoredDocument doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        StoredDocument doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        StoredDocument doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = Math.toIntExact(results.totalHits);\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = Math.toIntExact(results.totalHits);\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = Math.toIntExact(results.totalHits);\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = results.totalHits;\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean).mjava","sourceNew":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = Math.toIntExact(results.totalHits.value);\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This demonstrates a typical paging search scenario, where the search engine presents \n   * pages of size n to the user. The user can then go to the next page if interested in\n   * the next hits.\n   * \n   * When the query is executed for the first time, then only enough results are collected\n   * to fill 5 result pages. If the user wants to page beyond this limit, then the query\n   * is executed another time and all hits are collected.\n   * \n   */\n  public static void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n                                     int hitsPerPage, boolean raw, boolean interactive) throws IOException {\n \n    // Collect enough docs to show 5 pages\n    TopDocs results = searcher.search(query, 5 * hitsPerPage);\n    ScoreDoc[] hits = results.scoreDocs;\n    \n    int numTotalHits = Math.toIntExact(results.totalHits);\n    System.out.println(numTotalHits + \" total matching documents\");\n\n    int start = 0;\n    int end = Math.min(numTotalHits, hitsPerPage);\n        \n    while (true) {\n      if (end > hits.length) {\n        System.out.println(\"Only results 1 - \" + hits.length +\" of \" + numTotalHits + \" total matching documents collected.\");\n        System.out.println(\"Collect more (y/n) ?\");\n        String line = in.readLine();\n        if (line.length() == 0 || line.charAt(0) == 'n') {\n          break;\n        }\n\n        hits = searcher.search(query, numTotalHits).scoreDocs;\n      }\n      \n      end = Math.min(hits.length, start + hitsPerPage);\n      \n      for (int i = start; i < end; i++) {\n        if (raw) {                              // output raw format\n          System.out.println(\"doc=\"+hits[i].doc+\" score=\"+hits[i].score);\n          continue;\n        }\n\n        Document doc = searcher.doc(hits[i].doc);\n        String path = doc.get(\"path\");\n        if (path != null) {\n          System.out.println((i+1) + \". \" + path);\n          String title = doc.get(\"title\");\n          if (title != null) {\n            System.out.println(\"   Title: \" + doc.get(\"title\"));\n          }\n        } else {\n          System.out.println((i+1) + \". \" + \"No path for this document\");\n        }\n                  \n      }\n\n      if (!interactive || end == 0) {\n        break;\n      }\n\n      if (numTotalHits >= end) {\n        boolean quit = false;\n        while (true) {\n          System.out.print(\"Press \");\n          if (start - hitsPerPage >= 0) {\n            System.out.print(\"(p)revious page, \");  \n          }\n          if (start + hitsPerPage < numTotalHits) {\n            System.out.print(\"(n)ext page, \");\n          }\n          System.out.println(\"(q)uit or enter number to jump to a page.\");\n          \n          String line = in.readLine();\n          if (line.length() == 0 || line.charAt(0)=='q') {\n            quit = true;\n            break;\n          }\n          if (line.charAt(0) == 'p') {\n            start = Math.max(0, start - hitsPerPage);\n            break;\n          } else if (line.charAt(0) == 'n') {\n            if (start + hitsPerPage < numTotalHits) {\n              start+=hitsPerPage;\n            }\n            break;\n          } else {\n            int page = Integer.parseInt(line);\n            if ((page - 1) * hitsPerPage < numTotalHits) {\n              start = (page - 1) * hitsPerPage;\n              break;\n            } else {\n              System.out.println(\"No such page\");\n            }\n          }\n        }\n        if (quit) break;\n        end = Math.min(numTotalHits, start + hitsPerPage);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}