{"path":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testHyperbolicParameters().mjava","commits":[{"id":"81ac83661cf5972c111e31e4249749b6506d5f18","date":1361930287,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testHyperbolicParameters().mjava","pathOld":"/dev/null","sourceNew":"  /** hyperbolic with parameters */\n  public void testHyperbolicParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_hyperbolic\", \n                                            SweetSpotSimilarity.class);\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 3.3F <= sim.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 sim.tf(i) <= 7.7F);\n    }\n    assertEquals(\"MID tf\", 3.3F+(7.7F - 3.3F)/2.0F, sim.tf(5), 0.00001F);\n\n    // norms: plateau from 1-5, shallow slope\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 2\",  1.00F, sim.computeLengthNorm(2),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertTrue(\"norm 20 not high enough: \" + sim.computeLengthNorm(20),\n               0.25F < sim.computeLengthNorm(20));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testHyperbolicParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testHyperbolicParameters().mjava","sourceNew":"  /** hyperbolic with parameters */\n  public void testHyperbolicParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_hyperbolic\", \n                                            SweetSpotSimilarity.class);\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 3.3F <= sim.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 sim.tf(i) <= 7.7F);\n    }\n    assertEquals(\"MID tf\", 3.3F+(7.7F - 3.3F)/2.0F, sim.tf(5), 0.00001F);\n\n    // norms: plateau from 1-5, shallow slope\n    assertEquals(\"norm 1\",  1.00F, computeNorm(sim, 1),  0.0F);\n    assertEquals(\"norm 2\",  1.00F, computeNorm(sim, 2),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, computeNorm(sim, 3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, computeNorm(sim, 4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, computeNorm(sim, 5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + computeNorm(sim, 6),\n               computeNorm(sim, 6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               computeNorm(sim, 7) < computeNorm(sim, 6));\n    assertTrue(\"norm 20 not high enough: \" + computeNorm(sim, 20),\n               0.25F < computeNorm(sim, 20));\n  }\n\n","sourceOld":"  /** hyperbolic with parameters */\n  public void testHyperbolicParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_hyperbolic\", \n                                            SweetSpotSimilarity.class);\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 3.3F <= sim.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 sim.tf(i) <= 7.7F);\n    }\n    assertEquals(\"MID tf\", 3.3F+(7.7F - 3.3F)/2.0F, sim.tf(5), 0.00001F);\n\n    // norms: plateau from 1-5, shallow slope\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 2\",  1.00F, sim.computeLengthNorm(2),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertTrue(\"norm 20 not high enough: \" + sim.computeLengthNorm(20),\n               0.25F < sim.computeLengthNorm(20));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testHyperbolicParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testHyperbolicParameters().mjava","sourceNew":"  /** hyperbolic with parameters */\n  public void testHyperbolicParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_hyperbolic\", \n                                            SweetSpotSimilarity.class);\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 3.3F <= sim.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 sim.tf(i) <= 7.7F);\n    }\n    assertEquals(\"MID tf\", 3.3F+(7.7F - 3.3F)/2.0F, sim.tf(5), 0.00001F);\n\n    // norms: plateau from 1-5, shallow slope\n    assertEquals(\"norm 1\",  1.00F, computeNorm(sim, 1),  0.0F);\n    assertEquals(\"norm 2\",  1.00F, computeNorm(sim, 2),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, computeNorm(sim, 3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, computeNorm(sim, 4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, computeNorm(sim, 5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + computeNorm(sim, 6),\n               computeNorm(sim, 6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               computeNorm(sim, 7) < computeNorm(sim, 6));\n    assertTrue(\"norm 20 not high enough: \" + computeNorm(sim, 20),\n               0.25F < computeNorm(sim, 20));\n  }\n\n","sourceOld":"  /** hyperbolic with parameters */\n  public void testHyperbolicParameters() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text_hyperbolic\", \n                                            SweetSpotSimilarity.class);\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 3.3F <= sim.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+sim.tf(i),\n                 sim.tf(i) <= 7.7F);\n    }\n    assertEquals(\"MID tf\", 3.3F+(7.7F - 3.3F)/2.0F, sim.tf(5), 0.00001F);\n\n    // norms: plateau from 1-5, shallow slope\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 2\",  1.00F, sim.computeLengthNorm(2),  0.0F);\n    assertEquals(\"norm 3\",  1.00F, sim.computeLengthNorm(3),  0.0F);\n    assertEquals(\"norm 4\",  1.00F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 5\",  1.00F, sim.computeLengthNorm(5),  0.0F);\n    assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),\n               sim.computeLengthNorm(6) < 1.0F);\n    assertTrue(\"norm 7 higher then norm 6\", \n               sim.computeLengthNorm(7) < sim.computeLengthNorm(6));\n    assertTrue(\"norm 20 not high enough: \" + sim.computeLengthNorm(20),\n               0.25F < sim.computeLengthNorm(20));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["81ac83661cf5972c111e31e4249749b6506d5f18","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["81ac83661cf5972c111e31e4249749b6506d5f18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81ac83661cf5972c111e31e4249749b6506d5f18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81ac83661cf5972c111e31e4249749b6506d5f18"],"81ac83661cf5972c111e31e4249749b6506d5f18":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}