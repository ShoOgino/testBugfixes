{"path":"solr/core/src/java/org/apache/solr/handler/admin/EditFileRequestHandler#getOneInputStream(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/EditFileRequestHandler#getOneInputStream(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getOneInputStream(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Used when POSTing the configuration files to Solr (either ZooKeeper or locally).\n  //\n  // It takes some effort to insure that there is one (and only one) stream provided, there's no provision for\n  // more than one stream at present.\n  private ContentStream getOneInputStream(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String file = req.getParams().get(\"file\");\n    if (file == null) {\n      log.error(\"You must specify a file for the write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"You must specify a file for the write operation.\"));\n      return null;\n    }\n\n    // Now, this is truly clumsy\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      log.error(\"Input stream list was null for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"Input stream list was null for admin file write operation.\"));\n      return null;\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      log.error(\"No input streams were in the list for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No input streams were in the list for admin file write operation.\"));\n      return null;\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      log.error(\"More than one input stream was found for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"More than one input stream was found for admin file write operation.\"));\n      return null;\n    }\n    return stream;\n  }\n\n","sourceOld":"  // Used when POSTing the configuration files to Solr (either ZooKeeper or locally).\n  //\n  // It takes some effort to insure that there is one (and only one) stream provided, there's no provision for\n  // more than one stream at present.\n  private ContentStream getOneInputStream(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String file = req.getParams().get(\"file\");\n    if (file == null) {\n      log.error(\"You must specify a file for the write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"You must specify a file for the write operation.\"));\n      return null;\n    }\n\n    // Now, this is truly clumsy\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      log.error(\"Input stream list was null for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"Input stream list was null for admin file write operation.\"));\n      return null;\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      log.error(\"No input streams were in the list for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No input streams were in the list for admin file write operation.\"));\n      return null;\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      log.error(\"More than one input stream was found for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"More than one input stream was found for admin file write operation.\"));\n      return null;\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/EditFileRequestHandler#getOneInputStream(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  // Used when POSTing the configuration files to Solr (either ZooKeeper or locally).\n  //\n  // It takes some effort to insure that there is one (and only one) stream provided, there's no provision for\n  // more than one stream at present.\n  private ContentStream getOneInputStream(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String file = req.getParams().get(\"file\");\n    if (file == null) {\n      log.error(\"You must specify a file for the write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"You must specify a file for the write operation.\"));\n      return null;\n    }\n\n    // Now, this is truly clumsy\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      log.error(\"Input stream list was null for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"Input stream list was null for admin file write operation.\"));\n      return null;\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      log.error(\"No input streams were in the list for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No input streams were in the list for admin file write operation.\"));\n      return null;\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      log.error(\"More than one input stream was found for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"More than one input stream was found for admin file write operation.\"));\n      return null;\n    }\n    return stream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20fb0ec13a714c528bd1ff701c977114e476c58","date":1420694146,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/EditFileRequestHandler#getOneInputStream(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  // Used when POSTing the configuration files to Solr (either ZooKeeper or locally).\n  //\n  // It takes some effort to insure that there is one (and only one) stream provided, there's no provision for\n  // more than one stream at present.\n  private ContentStream getOneInputStream(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String file = req.getParams().get(\"file\");\n    if (file == null) {\n      log.error(\"You must specify a file for the write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"You must specify a file for the write operation.\"));\n      return null;\n    }\n\n    // Now, this is truly clumsy\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      log.error(\"Input stream list was null for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"Input stream list was null for admin file write operation.\"));\n      return null;\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      log.error(\"No input streams were in the list for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No input streams were in the list for admin file write operation.\"));\n      return null;\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      log.error(\"More than one input stream was found for admin file write operation.\");\n      rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"More than one input stream was found for admin file write operation.\"));\n      return null;\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b20fb0ec13a714c528bd1ff701c977114e476c58":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7455ee5c847b2ee7e44656e4218141f62dacb572":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7455ee5c847b2ee7e44656e4218141f62dacb572"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b20fb0ec13a714c528bd1ff701c977114e476c58"]},"commit2Childs":{"b20fb0ec13a714c528bd1ff701c977114e476c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7455ee5c847b2ee7e44656e4218141f62dacb572","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["b20fb0ec13a714c528bd1ff701c977114e476c58","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}