{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermVectorsEquals(String,IndexReader,IndexReader).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermVectorsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermVectors(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that term vectors across all fields are equivalent \n   */\n  public void assertTermVectorsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      Fields leftFields = leftReader.getTermVectors(i);\n      Fields rightFields = rightReader.getTermVectors(i);\n      assertFieldsEquals(info, leftReader, leftFields, rightFields, rarely());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that term vectors across all fields are equivalent \n   */\n  public void assertTermVectors(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      Fields leftFields = leftReader.getTermVectors(i);\n      Fields rightFields = rightReader.getTermVectors(i);\n      assertFields(leftFields, rightFields, rarely());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermVectorsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermVectorsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that term vectors across all fields are equivalent \n   */\n  public void assertTermVectorsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      Fields leftFields = leftReader.getTermVectors(i);\n      Fields rightFields = rightReader.getTermVectors(i);\n\n      // Fields could be null if there are no postings,\n      // but then it must be null for both\n      if (leftFields == null || rightFields == null) {\n        assertNull(info, leftFields);\n        assertNull(info, rightFields);\n        return;\n      }\n      if (leftFields.size() != -1 && rightFields.size() != -1) {\n        assertEquals(info, leftFields.size(), rightFields.size());\n      }\n\n      Iterator<String> leftEnum = leftFields.iterator();\n      Iterator<String> rightEnum = rightFields.iterator();\n      while (leftEnum.hasNext()) {\n        String field = leftEnum.next();\n        assertEquals(info, field, rightEnum.next());\n        assertTermsEquals(info, leftReader, leftFields.terms(field), rightFields.terms(field), rarely());\n      }\n      assertFalse(rightEnum.hasNext());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that term vectors across all fields are equivalent \n   */\n  public void assertTermVectorsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      Fields leftFields = leftReader.getTermVectors(i);\n      Fields rightFields = rightReader.getTermVectors(i);\n      assertFieldsEquals(info, leftReader, leftFields, rightFields, rarely());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}