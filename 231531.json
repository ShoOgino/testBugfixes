{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#isLeader(UpdateCommand).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#isLeader(UpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  // internal helper method to tell if we are the leader for an add or deleteById update\n  boolean isLeader(UpdateCommand cmd) {\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      if (cmd instanceof AddUpdateCommand) {\n        AddUpdateCommand acmd = (AddUpdateCommand)cmd;\n        nodes = setupRequest(acmd.getHashableId(), acmd.getSolrInputDocument());\n      } else if (cmd instanceof DeleteUpdateCommand) {\n        DeleteUpdateCommand dcmd = (DeleteUpdateCommand)cmd;\n        nodes = setupRequest(dcmd.getId(), null);\n      }\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    return isLeader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#isLeader(UpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#isLeader(UpdateCommand).mjava","sourceNew":"  // internal helper method to tell if we are the leader for an add or deleteById update\n  // NOTE: not called by this class!\n  boolean isLeader(UpdateCommand cmd) {\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      if (cmd instanceof AddUpdateCommand) {\n        AddUpdateCommand acmd = (AddUpdateCommand)cmd;\n        nodes = setupRequest(acmd.getHashableId(), acmd.getSolrInputDocument());\n      } else if (cmd instanceof DeleteUpdateCommand) {\n        DeleteUpdateCommand dcmd = (DeleteUpdateCommand)cmd;\n        nodes = setupRequest(dcmd.getId(), null);\n      }\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    return isLeader;\n  }\n\n","sourceOld":"  // internal helper method to tell if we are the leader for an add or deleteById update\n  boolean isLeader(UpdateCommand cmd) {\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      if (cmd instanceof AddUpdateCommand) {\n        AddUpdateCommand acmd = (AddUpdateCommand)cmd;\n        nodes = setupRequest(acmd.getHashableId(), acmd.getSolrInputDocument());\n      } else if (cmd instanceof DeleteUpdateCommand) {\n        DeleteUpdateCommand dcmd = (DeleteUpdateCommand)cmd;\n        nodes = setupRequest(dcmd.getId(), null);\n      }\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    return isLeader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":4,"author":"Bar Rotstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#isLeader(UpdateCommand).mjava","sourceNew":null,"sourceOld":"  // internal helper method to tell if we are the leader for an add or deleteById update\n  // NOTE: not called by this class!\n  boolean isLeader(UpdateCommand cmd) {\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      if (cmd instanceof AddUpdateCommand) {\n        AddUpdateCommand acmd = (AddUpdateCommand)cmd;\n        nodes = setupRequest(acmd.getHashableId(), acmd.getSolrInputDocument());\n      } else if (cmd instanceof DeleteUpdateCommand) {\n        DeleteUpdateCommand dcmd = (DeleteUpdateCommand)cmd;\n        nodes = setupRequest(dcmd.getId(), null);\n      }\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    return isLeader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}