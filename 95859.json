{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","sourceNew":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = BasicOperations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat1));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat2));\n  }\n\n","sourceOld":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = BasicOperations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat1));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","sourceNew":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    LightAutomaton singleton = BasicAutomata.makeStringLight(\"\");\n    LightAutomaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    LightAutomaton nfa = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"this\"),\n        BasicAutomata.makeStringLight(\"three\"));\n    LightAutomaton concat1 = BasicOperations.concatenateLight(expandedSingleton, nfa);\n    LightAutomaton concat2 = BasicOperations.concatenateLight(singleton, nfa);\n    assertFalse(BasicOperations.isDeterministic(concat2));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(concat1),\n                                            BasicOperations.determinize(concat2)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat1)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat2)));\n  }\n\n","sourceOld":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = BasicOperations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat1));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","sourceNew":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    LightAutomaton singleton = BasicAutomata.makeStringLight(\"\");\n    LightAutomaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    LightAutomaton nfa = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"this\"),\n        BasicAutomata.makeStringLight(\"three\"));\n    LightAutomaton concat1 = BasicOperations.concatenateLight(expandedSingleton, nfa);\n    LightAutomaton concat2 = BasicOperations.concatenateLight(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(concat1),\n                                            BasicOperations.determinize(concat2)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat1)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat2)));\n  }\n\n","sourceOld":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    LightAutomaton singleton = BasicAutomata.makeStringLight(\"\");\n    LightAutomaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    LightAutomaton nfa = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"this\"),\n        BasicAutomata.makeStringLight(\"three\"));\n    LightAutomaton concat1 = BasicOperations.concatenateLight(expandedSingleton, nfa);\n    LightAutomaton concat2 = BasicOperations.concatenateLight(singleton, nfa);\n    assertFalse(BasicOperations.isDeterministic(concat2));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(concat1),\n                                            BasicOperations.determinize(concat2)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat1)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat2)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","sourceNew":null,"sourceOld":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    LightAutomaton singleton = BasicAutomata.makeStringLight(\"\");\n    LightAutomaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    LightAutomaton nfa = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"this\"),\n        BasicAutomata.makeStringLight(\"three\"));\n    LightAutomaton concat1 = BasicOperations.concatenateLight(expandedSingleton, nfa);\n    LightAutomaton concat2 = BasicOperations.concatenateLight(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(concat1),\n                                            BasicOperations.determinize(concat2)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat1)));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(nfa),\n                                            BasicOperations.determinize(concat2)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptySingletonNFAConcatenate().mjava","sourceNew":null,"sourceOld":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = BasicAutomata.makeString(\"\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = BasicOperations.union(BasicAutomata.makeString(\"this\"),\n        BasicAutomata.makeString(\"three\"));\n    Automaton concat1 = BasicOperations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = BasicOperations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(BasicOperations.sameLanguage(concat1, concat2));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat1));\n    assertTrue(BasicOperations.sameLanguage(nfa, concat2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}