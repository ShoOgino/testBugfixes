{"path":"solr/core/src/test/org/apache/solr/search/join/CrossCollectionJoinQueryTest#testCcJoinRoutedCollection().mjava","commits":[{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":1,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/CrossCollectionJoinQueryTest#testCcJoinRoutedCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#testXcjfRoutedCollection().mjava","sourceNew":"  @Test\n  public void testCcJoinRoutedCollection() throws Exception {\n    setupIndexes(true);\n    testCcJoinQuery(\"{!join method=crossCollection fromIndex=products from=product_id_i to=product_id_i}size_s:M\", true);\n    int i = 0;\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      i++;\n      String url = runner.getBaseUrl().toString();\n      System.setProperty(\"test.ccjoin.solr.url.\" + i, url);\n    }\n    try {\n      // now we need to re-upload our config , now that we know a valid solr url for the cluster.\n      CloudSolrClient client = cluster.getSolrClient();\n      ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(configset(\"ccjoin\"), \"ccjoin\");\n      // reload the cores with the updated allowSolrUrls config.\n      CollectionAdminRequest.Reload.reloadCollection(\"products\").process(client);\n      CollectionAdminRequest.Reload.reloadCollection(\"parts\").process(client);\n      Thread.sleep(10000);\n\n      testCcJoinQuery(\"{!join method=crossCollection fromIndex=products from=product_id_i to=product_id_i}size_s:M\", true);\n\n      testCcJoinQuery(String.format(Locale.ROOT,\n          \"{!join method=crossCollection solrUrl=\\\"%s\\\" fromIndex=products from=product_id_i to=product_id_i}size_s:M\", getSolrUrl()),\n          true);\n\n      testCcJoinQuery(\"{!join method=crossCollection fromIndex=products from=product_id_l to=product_id_l}size_s:M\",\n          true);\n      testCcJoinQuery(String.format(Locale.ROOT,\n          \"{!join method=crossCollection solrUrl=\\\"%s\\\" fromIndex=products from=product_id_l to=product_id_l}size_s:M\",\n          getSolrUrl()),\n          true);\n\n      testCcJoinQuery(\"{!join method=crossCollection fromIndex=products from=product_id_s to=product_id_s}size_s:M\",\n          true);\n      testCcJoinQuery(String.format(Locale.ROOT,\n          \"{!join method=crossCollection solrUrl=\\\"%s\\\" fromIndex=products from=product_id_s to=product_id_s}size_s:M\",\n          getSolrUrl()),\n          true);\n      testCcJoinQuery(String.format(Locale.ROOT,\n          \"{!join method=crossCollection zkHost=\\\"%s\\\" fromIndex=products from=product_id_s to=product_id_s}size_s:M\",\n          cluster.getSolrClient().getZkHost()),\n          true);\n\n      // Test the ability to set other parameters on crossCollection join and have them passed through\n      assertResultCount(\"parts\",\n          \"{!join method=crossCollection fromIndex=products from=product_id_s to=product_id_s fq=product_id_s:1}size_s:M\",\n          2, true);\n      assertResultCount(\"parts\",\n          String.format(Locale.ROOT,\n              \"{!join method=crossCollection solrUrl=\\\"%s\\\" fromIndex=products from=product_id_s to=product_id_s fq=product_id_s:1}size_s:M\",\n              getSolrUrl()), 2, true);\n    } finally {\n      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n        i++;\n        System.getProperties().remove(\"test.ccjoin.solr.url.\" + i);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testXcjfRoutedCollection() throws Exception {\n    setupIndexes(true);\n    testXcjfQuery(\"{!xcjf collection=products from=product_id_i to=product_id_i}size_s:M\",true);\n    int i = 0;\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      i++;\n      String url = runner.getBaseUrl().toString();\n      System.setProperty(\"test.xcjf.solr.url.\" + i, url);\n    }\n    try {\n      // now we need to re-upload our config , now that we know a valid solr url for the cluster.\n      CloudSolrClient client = cluster.getSolrClient();\n      ((ZkClientClusterStateProvider) client.getClusterStateProvider()).uploadConfig(configset(\"xcjf\"), \"xcjf\");\n      // reload the cores with the updated whitelisted solr url config.\n      CollectionAdminRequest.Reload.reloadCollection(\"products\").process(client);\n      CollectionAdminRequest.Reload.reloadCollection(\"parts\").process(client);\n      Thread.sleep(10000);\n\n      testXcjfQuery(\"{!xcjf collection=products from=product_id_i to=product_id_i}size_s:M\",true);\n\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf solrUrl=\\\"%s\\\" collection=products from=product_id_i to=product_id_i}size_s:M\", getSolrUrl()),\n          true);\n\n      testXcjfQuery(\"{!xcjf collection=products from=product_id_l to=product_id_l}size_s:M\",\n          true);\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf solrUrl=\\\"%s\\\" collection=products from=product_id_l to=product_id_l}size_s:M\",\n          getSolrUrl()),\n          true);\n\n      testXcjfQuery(\"{!xcjf collection=products from=product_id_s to=product_id_s}size_s:M\",\n          true);\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf solrUrl=\\\"%s\\\" collection=products from=product_id_s to=product_id_s}size_s:M\",\n          getSolrUrl()),\n          true);\n      testXcjfQuery(String.format(Locale.ROOT,\n          \"{!xcjf zkHost=\\\"%s\\\" collection=products from=product_id_s to=product_id_s}size_s:M\",\n          cluster.getSolrClient().getZkHost()),\n          true);\n\n      // Test the ability to set other parameters on xcjf and have them passed through\n      assertResultCount(\"parts\",\n          \"{!xcjf collection=products from=product_id_s to=product_id_s fq=product_id_s:1}size_s:M\",\n          2, true);\n      assertResultCount(\"parts\",\n          String.format(Locale.ROOT,\n              \"{!xcjf solrUrl=\\\"%s\\\" collection=products from=product_id_s to=product_id_s fq=product_id_s:1}size_s:M\",\n              getSolrUrl()), 2, true);\n    } finally {\n      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n        i++;\n        System.getProperties().remove(\"test.xcjf.solr.url.\" + i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}