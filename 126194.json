{"path":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","commits":[{"id":"dbf74e192b8a096b0c484ce31b932a00d26ed27d","date":1333406232,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      BinaryUpdateRequestHandler h = new BinaryUpdateRequestHandler();\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      BinaryUpdateRequestHandler h = new BinaryUpdateRequestHandler();\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<Integer>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f9ab9cbda608d22a023db8b8ab48348e5f19bd7","date":1509526582,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    ArrayList<ContentStream> streams = new ArrayList<>(2);\n    streams.add(new BinaryRequestWriter().getContentStream(ureq));\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(streams);\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", val);\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", val);\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", val);\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", val);\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", val);\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", val);\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", new Integer(val));\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", new Integer(val));\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/SignatureUpdateProcessorFactoryTest#testNonStringFieldsValues().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", val);\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", val);\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testNonStringFieldsValues() throws Exception {\n    this.chain = \"dedupe-allfields\";\n    \n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n        .getUpdateProcessingChain(chain);\n    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));\n    factory.setEnabled(true);\n    \n    Map<String,String[]> params = new HashMap<>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);\n    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});\n    \n    UpdateRequest ureq = new UpdateRequest();\n    \n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 1.0f);\n      doc.addField(\"ints_is\", 34);\n      doc.addField(\"ints_is\", 42);\n      ureq.add(doc);\n    }\n    {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 2.0f);\n      doc.addField(\"ints_is\", 42);\n      doc.addField(\"ints_is\", 66);\n      ureq.add(doc);\n    }\n    {\n      // A and B should have same sig as eachother\n      // even though the particulars of how the the ints_is list are built\n\n      SolrInputDocument docA = new SolrInputDocument();\n      SolrInputDocument docB = new SolrInputDocument();\n\n      UnusualList<Integer> ints = new UnusualList<>(3);\n      for (int val : new int[] {42, 66, 34}) {\n        docA.addField(\"ints_is\", val);\n        ints.add(val);\n      }\n      docB.addField(\"ints_is\", ints);\n\n      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {\n        doc.addField(\"v_t\", \"same\");\n        doc.addField(\"weight\", 3.0f);\n        ureq.add(doc);\n      }\n    }\n    {\n      // now add another doc with the same values as A & B above, \n      // but diff ints_is collection (diff order)\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"v_t\", \"same\");\n      doc.addField(\"weight\", 3.0f);\n      for (int val : new int[] {66, 42, 34}) {\n        doc.addField(\"ints_is\", val);\n      }\n      ureq.add(doc);\n    }\n        \n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);\n    try {\n      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));\n      UpdateRequestHandler h = new UpdateRequestHandler();\n      h.init(new NamedList());\n      h.handleRequestBody(req, new SolrQueryResponse());\n    } finally {\n      req.close();\n    }\n    \n    addDoc(commit());\n    \n    checkNumDocs(4);\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["7f9ab9cbda608d22a023db8b8ab48348e5f19bd7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["042e4d934397657ba04c82b46cc5665076bc5c58","19275ba31e621f6da1b83bf13af75233876fd3d4"],"dbf74e192b8a096b0c484ce31b932a00d26ed27d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["042e4d934397657ba04c82b46cc5665076bc5c58"],"7f9ab9cbda608d22a023db8b8ab48348e5f19bd7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["7f9ab9cbda608d22a023db8b8ab48348e5f19bd7","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"e98520789adb1d5ad05afb4956eca0944a929688":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7f9ab9cbda608d22a023db8b8ab48348e5f19bd7","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"042e4d934397657ba04c82b46cc5665076bc5c58":["dbf74e192b8a096b0c484ce31b932a00d26ed27d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"dbf74e192b8a096b0c484ce31b932a00d26ed27d":["042e4d934397657ba04c82b46cc5665076bc5c58"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"7f9ab9cbda608d22a023db8b8ab48348e5f19bd7":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["e98520789adb1d5ad05afb4956eca0944a929688","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbf74e192b8a096b0c484ce31b932a00d26ed27d"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["7f9ab9cbda608d22a023db8b8ab48348e5f19bd7"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}