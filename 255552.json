{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","commits":[{"id":"37f0902b794e42ac312bfd9daa69e6a523cf4675","date":1447303057,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class);\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b671049b6133b72a11a8b48321607e9623b41923","date":1453313296,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class);\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  private void testSelectStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n      // Basic with replacements test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(6), \"join1\", \"d\");\n\n\n      // Basic with replacements and concat test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n      assertString(tuples.get(6), \"join1\", \"d\");\n      assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n\n      // Inner stream test\n      clause = \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n\n      // Wrapped select test\n      clause = \"select(\"\n          + \"id, left.ident, right.ident,\"\n          + \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n      assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n      // Basic with replacements test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(6), \"join1\", \"d\");\n\n\n      // Basic with replacements and concat test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n      assertString(tuples.get(6), \"join1\", \"d\");\n      assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n\n      // Inner stream test\n      clause = \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n\n      // Wrapped select test\n      clause = \"select(\"\n          + \"id, left.ident, right.ident,\"\n          + \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n      assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n    // Basic with replacements test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertLong(tuples.get(1), \"join1\", 12);\n    assertLong(tuples.get(2), \"join1\", 12);\n    assertLong(tuples.get(7), \"join1\", 12);\n    assertString(tuples.get(6), \"join1\", \"d\");\n    \n\n    // Basic with replacements and concat test\n    clause = \"select(\"\n            +   \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n            +   \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n            +   \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n            +   \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n    assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n    assertLong(tuples.get(0), \"join1\", 12);\n    assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(1), \"join1\", 12); \n    assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n    assertLong(tuples.get(2), \"join1\", 12); \n    assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n    assertLong(tuples.get(7), \"join1\", 12); \n    assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n    assertString(tuples.get(6), \"join1\", \"d\");\n    assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n    \n    // Inner stream test\n    clause = \"innerJoin(\"\n            +   \"select(\"\n            +     \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +     \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +   \"),\"\n            +   \"select(\"\n            +     \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +     \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +   \"),\"\n            +   \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n    \n    // Wrapped select test\n    clause = \"select(\"\n            +   \"id, left.ident, right.ident,\"\n            +   \"innerJoin(\"\n            +     \"select(\"\n            +       \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n            +       \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n            +     \"),\"\n            +     \"select(\"\n            +       \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n            +       \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n            +     \"),\"\n            +     \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n            +   \")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n    assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n      // Basic with replacements test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(6), \"join1\", \"d\");\n\n\n      // Basic with replacements and concat test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n      assertString(tuples.get(6), \"join1\", \"d\");\n      assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n\n      // Inner stream test\n      clause = \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n\n      // Wrapped select test\n      clause = \"select(\"\n          + \"id, left.ident, right.ident,\"\n          + \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n      assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n      // Basic with replacements test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(6), \"join1\", \"d\");\n\n\n      // Basic with replacements and concat test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n      assertString(tuples.get(6), \"join1\", \"d\");\n      assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n\n      // Inner stream test\n      clause = \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n\n      // Wrapped select test\n      clause = \"select(\"\n          + \"id, left.ident, right.ident,\"\n          + \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n      assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"73450c0955930295d34703e7ddbfc6973b7a121a":["b671049b6133b72a11a8b48321607e9623b41923","b940572a59da1b42b6c20ab5278155b12816807a"],"b671049b6133b72a11a8b48321607e9623b41923":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"b940572a59da1b42b6c20ab5278155b12816807a":["b671049b6133b72a11a8b48321607e9623b41923"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["b671049b6133b72a11a8b48321607e9623b41923","b940572a59da1b42b6c20ab5278155b12816807a"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["b671049b6133b72a11a8b48321607e9623b41923","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"37f0902b794e42ac312bfd9daa69e6a523cf4675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"b671049b6133b72a11a8b48321607e9623b41923":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"37f0902b794e42ac312bfd9daa69e6a523cf4675":["b671049b6133b72a11a8b48321607e9623b41923"],"8c969f15cd04d31e520319c619a445ae21f02d72":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}