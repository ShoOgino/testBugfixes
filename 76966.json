{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","sourceNew":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    if (clauses.size() >= maxClauseCount)\n      throw new TooManyClauses();\n\n    clauses.add(clause);\n  }\n\n","sourceOld":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    if (clauses.size() >= maxClauseCount)\n      throw new TooManyClauses();\n\n    clauses.add(clause);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","sourceNew":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    if (clauses.size() >= maxClauseCount) {\n      throw new TooManyClauses();\n    }\n\n    clauses.add(clause);\n  }\n\n","sourceOld":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    if (clauses.size() >= maxClauseCount)\n      throw new TooManyClauses();\n\n    clauses.add(clause);\n  }\n\n","bugFix":["e5d6060b779d74dbe5580c5bee8ed06ee001078c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","sourceNew":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    Objects.requireNonNull(clause, \"BooleanClause must not be null\");\n    if (clauses.size() >= maxClauseCount) {\n      throw new TooManyClauses();\n    }\n\n    clauses.add(clause);\n  }\n\n","sourceOld":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    if (clauses.size() >= maxClauseCount) {\n      throw new TooManyClauses();\n    }\n\n    clauses.add(clause);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#add(BooleanClause).mjava","sourceNew":null,"sourceOld":"  /** Adds a clause to a boolean query.\n   * @throws TooManyClauses if the new number of clauses exceeds the maximum clause number\n   * @see #getMaxClauseCount()\n   */\n  public void add(BooleanClause clause) {\n    Objects.requireNonNull(clause, \"BooleanClause must not be null\");\n    if (clauses.size() >= maxClauseCount) {\n      throw new TooManyClauses();\n    }\n\n    clauses.add(clause);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}