{"path":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba","date":1347404545,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initialize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":"  /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initialize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initialize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":"  /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initialize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getSolrProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initialize with the required property flag\n    required = (properties & REQUIRED) !=0;\n\n    type.checkSchemaField(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12f7f335611574989edc8f87d25d91e89aa385b6":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"a837c064b67fa63a9394136e31218b908cdcf783":["4caa441bee6bff2e56042e9ad2c8ffc6b2729cba"],"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12f7f335611574989edc8f87d25d91e89aa385b6"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["a837c064b67fa63a9394136e31218b908cdcf783"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4caa441bee6bff2e56042e9ad2c8ffc6b2729cba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"12f7f335611574989edc8f87d25d91e89aa385b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba":["a837c064b67fa63a9394136e31218b908cdcf783"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["7b4eb0a25318cc756077fbde9bd3052690aed03d","12f7f335611574989edc8f87d25d91e89aa385b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7b4eb0a25318cc756077fbde9bd3052690aed03d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}