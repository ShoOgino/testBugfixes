{"path":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","commits":[{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a byte value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated byte norm\n   */\n  public abstract byte computeNorm(FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f1bdbf92da222965b46c0a942c3857ba56e5c638","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f1bdbf92da222965b46c0a942c3857ba56e5c638","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}