{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsWriter#finishTerm(BlockTermState).mjava","commits":[{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    PulsingTermState state = (PulsingTermState) _state;\n\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      state.wrappedState.docFreq = state.docFreq;\n      state.wrappedState.totalTermFreq = state.totalTermFreq;\n      state.bytes = null;\n      wrappedPostingsWriter.finishTerm(state.wrappedState);\n    } else {\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      state.bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(state.bytes, 0);\n      buffer.reset();\n    }\n    pendingCount = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":null,"sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    PulsingTermState state = (PulsingTermState) _state;\n\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      state.wrappedState.docFreq = state.docFreq;\n      state.wrappedState.totalTermFreq = state.totalTermFreq;\n      state.bytes = null;\n      wrappedPostingsWriter.finishTerm(state.wrappedState);\n    } else {\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      state.bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(state.bytes, 0);\n      buffer.reset();\n    }\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f8633b56150a205774ee3e2adf1452a81b0d904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}