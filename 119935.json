{"path":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keyts in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig);\n        }\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keyts in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig);\n        }\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","sourceNew":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig);\n        }\n\n      }\n    }\n\n","sourceOld":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keyts in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig);\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","date":1573537504,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","sourceNew":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException, IOException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig +\" len: \"+buf.limit()+  \" content sha512: \"+\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf)));\n        }\n\n      }\n    }\n\n","sourceOld":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig);\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","sourceNew":"    private void validate(List<String> sigs,\n                          ByteBuffer buf) throws SolrException, IOException {\n      Map<String, byte[]> keys = packageStore.getKeys();\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"package store does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in Package store\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig +\" len: \"+buf.limit()+  \" content sha512: \"+\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf)));\n        }\n\n      }\n    }\n\n","sourceOld":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException, IOException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig +\" len: \"+buf.limit()+  \" content sha512: \"+\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf)));\n        }\n\n      }\n    }\n\n","bugFix":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","8476949555f799dff381770c01cfad051a264487","954ae83b7dfacaa33d48ea056448ae11f7745a93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI.FSWrite#validate(List[String],ByteBuffer).mjava","sourceNew":"    private void validate(List<String> sigs,\n                          ByteBuffer buf) throws SolrException, IOException {\n      Map<String, byte[]> keys = packageStore.getKeys();\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"package store does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in Package store\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig +\" len: \"+buf.limit()+  \" content sha512: \"+\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf)));\n        }\n\n      }\n    }\n\n","sourceOld":"    public void validate(List<String> sigs,\n                         ByteBuffer buf) throws SolrException, IOException {\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n          coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys == null || keys.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"ZK does not have any keys\");\n      }\n      CryptoKeys cryptoKeys = null;\n      try {\n        cryptoKeys = new CryptoKeys(keys);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error parsing public keys in ZooKeeper\");\n      }\n      for (String sig : sigs) {\n        if (cryptoKeys.verify(sig, buf) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Signature does not match any public key : \" + sig +\" len: \"+buf.limit()+  \" content sha512: \"+\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf)));\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","d218decf811b7a0a4d86218c54c79c74a962374b"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["8476949555f799dff381770c01cfad051a264487"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"d218decf811b7a0a4d86218c54c79c74a962374b":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d218decf811b7a0a4d86218c54c79c74a962374b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8476949555f799dff381770c01cfad051a264487":["954ae83b7dfacaa33d48ea056448ae11f7745a93","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}