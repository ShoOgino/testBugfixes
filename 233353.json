{"path":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(getSimilarity(searcher));\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","sourceNew":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(similarity);\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","sourceOld":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(getSimilarity(searcher));\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","sourceNew":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(similarity,\n                                                 minNrShouldMatch);\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","sourceOld":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(similarity);\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e","date":1166323237,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","sourceNew":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(similarity,\n                                                 minNrShouldMatch);\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.get(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","sourceOld":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(similarity,\n                                                 minNrShouldMatch);\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6212677fdd165340d4284ad2530970c664042d6e","date":1180380790,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight2#scorer(IndexReader).mjava","sourceNew":null,"sourceOld":"    /** @return An alternative Scorer that uses and provides skipTo(),\n     *          and scores documents in document number order.\n     */\n    public Scorer scorer(IndexReader reader) throws IOException {\n      BooleanScorer2 result = new BooleanScorer2(similarity,\n                                                 minNrShouldMatch);\n\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.get(i);\n        Weight w = (Weight)weights.elementAt(i);\n        Scorer subScorer = w.scorer(reader);\n        if (subScorer != null)\n          result.add(subScorer, c.isRequired(), c.isProhibited());\n        else if (c.isRequired())\n          return null;\n      }\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"6212677fdd165340d4284ad2530970c664042d6e":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6212677fdd165340d4284ad2530970c664042d6e"]},"commit2Childs":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"6212677fdd165340d4284ad2530970c664042d6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["6212677fdd165340d4284ad2530970c664042d6e"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}