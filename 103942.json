{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLive(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","sourceNew":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLive(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState() == Slice.State.ACTIVE) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLive(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","sourceNew":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLive(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState() == Slice.State.ACTIVE) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLive(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLiveReplica(ZkStateReader,String,String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitToSeeLive(ZkStateReader,String,String,String,int).mjava","sourceNew":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLiveReplica(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState() == Slice.State.ACTIVE) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Wait to see an entry in the ClusterState with a specific coreNodeName and\n   * baseUrl.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection\n   *          to look in\n   * @param coreNodeName\n   *          to wait for\n   * @param baseUrl\n   *          to wait for\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitToSeeLive(ZkStateReader zkStateReader,\n      String collection, String coreNodeName, String baseUrl,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    \n    while (System.nanoTime() < timeout) {\n      log.debug(\"waiting to see replica just created live collection={} replica={} baseUrl={}\",\n          collection, coreNodeName, baseUrl);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          // only look at active shards\n          if (slice.getState() == Slice.State.ACTIVE) {\n            Collection<Replica> replicas = slice.getReplicas();\n            for (Replica replica : replicas) {\n              // on a live node?\n              boolean live = clusterState.liveNodesContain(replica.getNodeName());\n              String rcoreNodeName = replica.getName();\n              String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              if (live && coreNodeName.equals(rcoreNodeName)\n                  && baseUrl.equals(rbaseUrl)) {\n                // found it\n                return true;\n              }\n            }\n          }\n        }\n        try {\n          Thread.sleep(TIMEOUT_POLL_MS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n        }\n      }\n    }\n    \n    log.error(\"Timed out waiting to see replica just created in cluster state. Continuing...\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"0c924d4069ef5a5bc479a493befe0121aada6896":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","0c924d4069ef5a5bc479a493befe0121aada6896"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}