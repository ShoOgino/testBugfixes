{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","commits":[{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"property.unset\", \"replicationFactor\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"property.unset\", \"non_existent_property\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"The value for property.unset must be one of\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c72a217478b8fa40b34697477ecd97e00789579f","date":1529924692,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","sourceNew":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"property.unset\", \"replicationFactor\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"property.unset\", \"non_existent_property\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"The value for property.unset must be one of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","sourceNew":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testModifyCollection().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testModifyCollection() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", 25);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n      NamedList<Object> rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      int replicationFactor = Integer.parseInt(collection.get(\"replicationFactor\").toString());\n      assertEquals(25, replicationFactor);\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"replicationFactor\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      rsp = CollectionAdminRequest.getClusterStatus().setCollectionName(COLLECTION_NAME)\n          .process(client).getResponse();\n      System.out.println(rsp);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNull(collection.get(\"replicationFactor\"));\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      params.set(\"non_existent_property\", \"\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail(\"Trying to unset an unknown property should have failed\");\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        // expected\n        assertTrue(e.getMessage().contains(\"no supported values provided\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72a217478b8fa40b34697477ecd97e00789579f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["c72a217478b8fa40b34697477ecd97e00789579f"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"c72a217478b8fa40b34697477ecd97e00789579f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72a217478b8fa40b34697477ecd97e00789579f"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","82b686ab2904b3e81184ecea0d238b4ab0885376","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["c72a217478b8fa40b34697477ecd97e00789579f"],"c72a217478b8fa40b34697477ecd97e00789579f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","db96734b79e26d948b59f68bd4564c4836a71acf","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}