{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","commits":[{"id":"9e7921c9a7729df15853641d07039fd6ca2c57fa","date":1323367101,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // used by DirectoryReader:\n  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone) throws CorruptIndexException, IOException {\n    return reopenSegment(si, doClone, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // used by DirectoryReader:\n  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone) throws CorruptIndexException, IOException {\n    return reopenSegment(si, doClone, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // used by DirectoryReader:\n  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone) throws CorruptIndexException, IOException {\n    return reopenSegment(si, doClone, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","sourceNew":"  // used by DirectoryReader:\n  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(true, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.combinedCoreAndDeletesKey = combinedCoreAndDeletesKey;\n\n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  // used by DirectoryReader:\n  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone) throws CorruptIndexException, IOException {\n    return reopenSegment(si, doClone, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean).mjava","sourceNew":null,"sourceOld":"  // used by DirectoryReader:\n  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(true, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.combinedCoreAndDeletesKey = combinedCoreAndDeletesKey;\n\n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e7921c9a7729df15853641d07039fd6ca2c57fa"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"9e7921c9a7729df15853641d07039fd6ca2c57fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","9e7921c9a7729df15853641d07039fd6ca2c57fa"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["781537683b56c6c5aad3b1046f00daf1c7ea93ae","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e7921c9a7729df15853641d07039fd6ca2c57fa":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}