{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#setUpDirs(Directory,Directory,boolean).mjava","commits":[{"id":"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e","date":1323363624,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#setUpDirs(Directory,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void setUpDirs(Directory dir, Directory aux, boolean withID) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    if (withID) {\n      addDocsWithID(writer, 1000, 0);\n    } else {\n      addDocs(writer, 1000);\n    }\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      if (withID) {\n        addDocsWithID(writer, 10, 10*i);\n      } else {\n        addDocs(writer, 10);\n      }\n      writer.close();\n      writer = newWriter(\n          aux,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(1000).\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#setUpDirs(Directory,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void setUpDirs(Directory dir, Directory aux, boolean withID) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    if (withID) {\n      addDocsWithID(writer, 1000, 0);\n    } else {\n      addDocs(writer, 1000);\n    }\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      if (withID) {\n        addDocsWithID(writer, 10, 10*i);\n      } else {\n        addDocs(writer, 10);\n      }\n      writer.close();\n      writer = newWriter(\n          aux,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(1000).\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#setUpDirs(Directory,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void setUpDirs(Directory dir, Directory aux, boolean withID) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    if (withID) {\n      addDocsWithID(writer, 1000, 0);\n    } else {\n      addDocs(writer, 1000);\n    }\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      if (withID) {\n        addDocsWithID(writer, 10, 10*i);\n      } else {\n        addDocs(writer, 10);\n      }\n      writer.close();\n      writer = newWriter(\n          aux,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(1000).\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#setUpDirs(Directory,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#setUpDirs(Directory,Directory,boolean).mjava","sourceNew":"  private void setUpDirs(Directory dir, Directory aux, boolean withID) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    if (withID) {\n      addDocsWithID(writer, 1000, 0);\n    } else {\n      addDocs(writer, 1000);\n    }\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      if (withID) {\n        addDocsWithID(writer, 10, 10*i);\n      } else {\n        addDocs(writer, 10);\n      }\n      writer.close();\n      writer = newWriter(\n          aux,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(1000).\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","sourceOld":"  private void setUpDirs(Directory dir, Directory aux, boolean withID) throws IOException {\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    // add 1000 documents in 1 segment\n    if (withID) {\n      addDocsWithID(writer, 1000, 0);\n    } else {\n      addDocs(writer, 1000);\n    }\n    assertEquals(1000, writer.maxDoc());\n    assertEquals(1, writer.getSegmentCount());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false, 10))\n    );\n    // add 30 documents in 3 segments\n    for (int i = 0; i < 3; i++) {\n      if (withID) {\n        addDocsWithID(writer, 10, 10*i);\n      } else {\n        addDocs(writer, 10);\n      }\n      writer.close();\n      writer = newWriter(\n          aux,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(1000).\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n    }\n    assertEquals(30, writer.maxDoc());\n    assertEquals(3, writer.getSegmentCount());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}