{"path":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    CharTermAttribute termAtt = stpf.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.toString());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}