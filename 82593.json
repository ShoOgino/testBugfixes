{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","commits":[{"id":"64396eddf11b3a487fb2668a9be8fa573dd73f89","date":1489809659,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#assertFieldSimilarity(String,Class[#-extends-Similarity]).mjava","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","sourceOld":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   */\n  private static void assertFieldSimilarity(String fieldname, Class<? extends Similarity> expected) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad771c8c8bc422816c3459d9d0776c2f54a4de80","date":1490280011,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#assertFieldSimilarity(String,Class[#-extends-Similarity]).mjava","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","sourceOld":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   */\n  private static void assertFieldSimilarity(String fieldname, Class<? extends Similarity> expected) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  @SuppressWarnings({\"unchecked\"})\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","sourceOld":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  @SuppressWarnings({\"unchecked\", \"varargs\"})\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","sourceOld":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  @SuppressWarnings({\"unchecked\"})\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64396eddf11b3a487fb2668a9be8fa573dd73f89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"e98520789adb1d5ad05afb4956eca0944a929688":["64396eddf11b3a487fb2668a9be8fa573dd73f89"]},"commit2Childs":{"64396eddf11b3a487fb2668a9be8fa573dd73f89":["e98520789adb1d5ad05afb4956eca0944a929688"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64396eddf11b3a487fb2668a9be8fa573dd73f89","ad771c8c8bc422816c3459d9d0776c2f54a4de80"],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":[],"e98520789adb1d5ad05afb4956eca0944a929688":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad771c8c8bc422816c3459d9d0776c2f54a4de80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}