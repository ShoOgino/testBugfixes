{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenFilter#testGraphPathCountLimits().mjava","commits":[{"id":"7836a9b132efc1162fb9d817b3e766f0a82212be","date":1543916862,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenFilter#testGraphPathCountLimits().mjava","pathOld":"/dev/null","sourceNew":"  public void testGraphPathCountLimits() {\n\n    Token[] tokens = new Token[50];\n    tokens[0] = new Token(\"term\", 1, 0, 1);\n    tokens[1] = new Token(\"term1\", 1, 2, 3);\n    for (int i = 2; i < 50; i++) {\n      tokens[i] = new Token(\"term\" + i, i % 2, 2, 3);\n    }\n\n    Exception e = expectThrows(IllegalStateException.class, () -> {\n      GraphTokenFilter graph = new TestFilter(new CannedTokenStream(tokens));\n      graph.reset();\n      graph.incrementBaseToken();\n      for (int i = 0; i < 10; i++) {\n        graph.incrementGraphToken();\n      }\n      while (graph.incrementGraph()) {\n        for (int i = 0; i < 10; i++) {\n          graph.incrementGraphToken();\n        }\n      }\n    });\n    assertEquals(\"Too many graph paths (> 1000)\", e.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7836a9b132efc1162fb9d817b3e766f0a82212be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7836a9b132efc1162fb9d817b3e766f0a82212be"]},"commit2Childs":{"7836a9b132efc1162fb9d817b3e766f0a82212be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7836a9b132efc1162fb9d817b3e766f0a82212be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}