{"path":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"060e45da99fb3be465a9435cc311c79058b46d67","date":1354125186,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","date":1423125371,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fields = splitList.split( required.get(MoreLikeThisParams.SIMILARITY_FIELDS) );\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a25544ded41f47c5481337e9acb26010c60c0fef","date":1497271446,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      \n      // There is no default for maxDocFreqPct. Also, it's a bit oddly expressed as an integer value \n      // (percentage of the collection's documents count). We keep Lucene's convention here. \n      if (params.getInt(MoreLikeThisParams.MAX_DOC_FREQ_PCT) != null) {\n        mlt.setMaxDocFreqPct(params.getInt(MoreLikeThisParams.MAX_DOC_FREQ_PCT));\n      }\n\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      \n      // There is no default for maxDocFreqPct. Also, it's a bit oddly expressed as an integer value \n      // (percentage of the collection's documents count). We keep Lucene's convention here. \n      if (params.getInt(MoreLikeThisParams.MAX_DOC_FREQ_PCT) != null) {\n        mlt.setMaxDocFreqPct(params.getInt(MoreLikeThisParams.MAX_DOC_FREQ_PCT));\n      }\n\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#MoreLikeThisHelper(SolrParams,SolrIndexSearcher).mjava","sourceNew":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      \n      // There is no default for maxDocFreqPct. Also, it's a bit oddly expressed as an integer value \n      // (percentage of the collection's documents count). We keep Lucene's convention here. \n      if (params.getInt(MoreLikeThisParams.MAX_DOC_FREQ_PCT) != null) {\n        mlt.setMaxDocFreqPct(params.getInt(MoreLikeThisParams.MAX_DOC_FREQ_PCT));\n      }\n\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","sourceOld":"    public MoreLikeThisHelper( SolrParams params, SolrIndexSearcher searcher )\n    {\n      this.searcher = searcher;\n      this.reader = searcher.getIndexReader();\n      this.uniqueKeyField = searcher.getSchema().getUniqueKeyField();\n      this.needDocSet = params.getBool(FacetParams.FACET,false);\n      \n      SolrParams required = params.required();\n      String[] fl = required.getParams(MoreLikeThisParams.SIMILARITY_FIELDS);\n      List<String> list = new ArrayList<>();\n      for (String f : fl) {\n        if (!StringUtils.isEmpty(f))  {\n          String[] strings = splitList.split(f);\n          for (String string : strings) {\n            if (!StringUtils.isEmpty(string)) {\n              list.add(string);\n            }\n          }\n        }\n      }\n      String[] fields = list.toArray(new String[list.size()]);\n      if( fields.length < 1 ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"MoreLikeThis requires at least one similarity field: \"+MoreLikeThisParams.SIMILARITY_FIELDS );\n      }\n      \n      this.mlt = new MoreLikeThis( reader ); // TODO -- after LUCENE-896, we can use , searcher.getSimilarity() );\n      mlt.setFieldNames(fields);\n      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n      \n      // configurable params\n      \n      mlt.setMinTermFreq(       params.getInt(MoreLikeThisParams.MIN_TERM_FREQ,         MoreLikeThis.DEFAULT_MIN_TERM_FREQ));\n      mlt.setMinDocFreq(        params.getInt(MoreLikeThisParams.MIN_DOC_FREQ,          MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n      mlt.setMaxDocFreq(        params.getInt(MoreLikeThisParams.MAX_DOC_FREQ,          MoreLikeThis.DEFAULT_MAX_DOC_FREQ));\n      mlt.setMinWordLen(        params.getInt(MoreLikeThisParams.MIN_WORD_LEN,          MoreLikeThis.DEFAULT_MIN_WORD_LENGTH));\n      mlt.setMaxWordLen(        params.getInt(MoreLikeThisParams.MAX_WORD_LEN,          MoreLikeThis.DEFAULT_MAX_WORD_LENGTH));\n      mlt.setMaxQueryTerms(     params.getInt(MoreLikeThisParams.MAX_QUERY_TERMS,       MoreLikeThis.DEFAULT_MAX_QUERY_TERMS));\n      mlt.setMaxNumTokensParsed(params.getInt(MoreLikeThisParams.MAX_NUM_TOKENS_PARSED, MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED));\n      mlt.setBoost(            params.getBool(MoreLikeThisParams.BOOST, false ) );\n      boostFields = SolrPluginUtils.parseFieldBoosts(params.getParams(MoreLikeThisParams.QF));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"060e45da99fb3be465a9435cc311c79058b46d67":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["060e45da99fb3be465a9435cc311c79058b46d67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","060e45da99fb3be465a9435cc311c79058b46d67"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","a25544ded41f47c5481337e9acb26010c60c0fef"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","a25544ded41f47c5481337e9acb26010c60c0fef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"a25544ded41f47c5481337e9acb26010c60c0fef":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"]},"commit2Childs":{"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","a25544ded41f47c5481337e9acb26010c60c0fef"],"060e45da99fb3be465a9435cc311c79058b46d67":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["060e45da99fb3be465a9435cc311c79058b46d67","407687e67faf6e1f02a211ca078d8e3eed631027"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"a25544ded41f47c5481337e9acb26010c60c0fef":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}