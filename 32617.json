{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase();\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase();\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","date":1341667852,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase();\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase();\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase();\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase();\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c49feedffe47df314319e4b6a415dde78a67827","date":1354787662,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null && !stopped) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/EnwikiContentSource.Parser#endElement(String,String,String).mjava","sourceNew":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null && !stopped) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void endElement(String namespace, String simple, String qualified)\n      throws SAXException {\n      int elemType = getElementType(qualified);\n      switch (elemType) {\n        case PAGE:\n          // the body must be null and we either are keeping image docs or the\n          // title does not start with Image:\n          if (body != null && (keepImages || !title.startsWith(\"Image:\"))) {\n            String[] tmpTuple = new String[LENGTH];\n            tmpTuple[TITLE] = title.replace('\\t', ' ');\n            tmpTuple[DATE] = time.replace('\\t', ' ');\n            tmpTuple[BODY] = body.replaceAll(\"[\\t\\n]\", \" \");\n            tmpTuple[ID] = id;\n            synchronized(this) {\n              while (tuple != null) {\n                try {\n                  wait();\n                } catch (InterruptedException ie) {\n                  throw new ThreadInterruptedException(ie);\n                }\n              }\n              tuple = tmpTuple;\n              notify();\n            }\n          }\n          break;\n        case BODY:\n          body = contents.toString();\n          //workaround that startswith doesn't have an ignore case option, get at least 20 chars.\n          String startsWith = body.substring(0, Math.min(10, contents.length())).toLowerCase(Locale.ROOT);\n          if (startsWith.startsWith(\"#redirect\")) {\n            body = null;\n          }\n          break;\n        case DATE:\n          time = time(contents.toString());\n          break;\n        case TITLE:\n          title = contents.toString();\n          break;\n        case ID:\n          //the doc id is the first one in the page.  All other ids after that one can be ignored according to the schema\n          if (id == null) {\n            id = contents.toString();\n          }\n          break;\n        default:\n          // this element should be discarded.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c49feedffe47df314319e4b6a415dde78a67827":["2acf500f78aa12b92e371fd89c719291986b6b90"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["2acf500f78aa12b92e371fd89c719291986b6b90","2c49feedffe47df314319e4b6a415dde78a67827"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1e2d1edb0d4b63db0ffa514a529fb559609dbcd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c49feedffe47df314319e4b6a415dde78a67827"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2c49feedffe47df314319e4b6a415dde78a67827":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["2c49feedffe47df314319e4b6a415dde78a67827","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}