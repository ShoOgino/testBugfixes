{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd8e0c368d07c2e65d2eee8d3ec7432b70866e1","date":1341758518,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da5794843e37145d9494f1740456b343eed98e5e","date":1341759059,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22659e4b60cbbd3c13216360578240ddeca2d8b4","date":1341827398,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07904fa7a96affc72ebc1658bdbbe4c227843a11","date":1345657879,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = readChar();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = readChar();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","bugFix":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = readChar();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = readChar();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = input.read();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = input.read();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = readChar();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = readChar();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n        }\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = readChar();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = readChar();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n\t}\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529","date":1419024596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#readCodePoint().mjava","sourceNew":"  protected int readCodePoint() throws IOException {\n    int ch = readChar();\n    if (ch < 0) {\n      return ch;\n    } else {\n      if (Character.isLowSurrogate((char) ch)) {\n        failAlways(\"unpaired low surrogate: \" + Integer.toHexString(ch));\n      }\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = readChar();\n        if (ch2 >= 0) {\n          off++;\n          if (!Character.isLowSurrogate((char) ch2)) {\n            failAlways(\"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2));\n          }\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          failAlways(\"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch));\n        }\n      }\n      return ch;\n    }\n  }\n\n","sourceOld":"  protected int readCodePoint() throws IOException {\n    int ch = readChar();\n    if (ch < 0) {\n      return ch;\n    } else {\n      assert !Character.isLowSurrogate((char) ch) : \"unpaired low surrogate: \" + Integer.toHexString(ch);\n      off++;\n      if (Character.isHighSurrogate((char) ch)) {\n        int ch2 = readChar();\n        if (ch2 >= 0) {\n          off++;\n          assert Character.isLowSurrogate((char) ch2) : \"unpaired high surrogate: \" + Integer.toHexString(ch) + \", followed by: \" + Integer.toHexString(ch2);\n          return Character.toCodePoint((char) ch, (char) ch2);\n        } else {\n          assert false : \"stream ends with unpaired high surrogate: \" + Integer.toHexString(ch);\n        }\n      }\n      return ch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["04e7f30683f53928b2fce016e6430c9795caff22","07904fa7a96affc72ebc1658bdbbe4c227843a11"],"04e7f30683f53928b2fce016e6430c9795caff22":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","da5794843e37145d9494f1740456b343eed98e5e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","da5794843e37145d9494f1740456b343eed98e5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22659e4b60cbbd3c13216360578240ddeca2d8b4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","da5794843e37145d9494f1740456b343eed98e5e"],"9cd8e0c368d07c2e65d2eee8d3ec7432b70866e1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"07904fa7a96affc72ebc1658bdbbe4c227843a11":["da5794843e37145d9494f1740456b343eed98e5e"],"da5794843e37145d9494f1740456b343eed98e5e":["9cd8e0c368d07c2e65d2eee8d3ec7432b70866e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["07904fa7a96affc72ebc1658bdbbe4c227843a11"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"04e7f30683f53928b2fce016e6430c9795caff22":["001b25b42373b22a52f399dbf072f1224632e8e6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","9cd8e0c368d07c2e65d2eee8d3ec7432b70866e1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22659e4b60cbbd3c13216360578240ddeca2d8b4":[],"9cd8e0c368d07c2e65d2eee8d3ec7432b70866e1":["da5794843e37145d9494f1740456b343eed98e5e"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07904fa7a96affc72ebc1658bdbbe4c227843a11":["001b25b42373b22a52f399dbf072f1224632e8e6","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"da5794843e37145d9494f1740456b343eed98e5e":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","07904fa7a96affc72ebc1658bdbbe4c227843a11"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}