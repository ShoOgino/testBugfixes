{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setUseOldRangeQuery(false);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setUseOldRangeQuery(true);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setConstantScoreRewrite(true);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setConstantScoreRewrite(false);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setUseOldRangeQuery(false);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setUseOldRangeQuery(true);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setConstantScoreRewrite(true);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setConstantScoreRewrite(false);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setConstantScoreRewrite(true);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setConstantScoreRewrite(false);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setConstantScoreRewrite(true);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setConstantScoreRewrite(false);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(\"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"content\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"content\", new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"content\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                     IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["8b20609f6fb2cd074bd08115b0c3280b9646af7c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba1116b3450a9c1642c89445d131b37344055245":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["ba1116b3450a9c1642c89445d131b37344055245"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}