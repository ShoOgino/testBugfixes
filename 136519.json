{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","commits":[{"id":"4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac","date":1433258843,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValues#testFixedSorted().mjava","sourceNew":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = reader.getSortedDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.get(i);\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = reader.getSortedDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.get(i);\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","sourceNew":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = DocValues.getBinary(reader, \"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(i, dv.nextDoc());\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.binaryValue();\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = reader.getSortedDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.get(i);\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","sourceNew":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = DocValues.getBinary(reader, \"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(i, dv.nextDoc());\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.binaryValue();\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = reader.getSortedDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.get(i);\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BSortedDocValuesFixedSorted#testFixedSorted().mjava","sourceNew":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = DocValues.getBinary(reader, \"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(i, dv.nextDoc());\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.binaryValue();\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // indexes Integer.MAX_VALUE docs with a fixed binary field\n  public void testFixedSorted() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BFixedSorted\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    Document doc = new Document();\n    byte bytes[] = new byte[2];\n    BytesRef data = new BytesRef(bytes);\n    SortedDocValuesField dvField = new SortedDocValuesField(\"dv\", data);\n    doc.add(dvField);\n    \n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      bytes[0] = (byte)(i >> 8);\n      bytes[1] = (byte) i;\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    int expectedValue = 0;\n    for (LeafReaderContext context : r.leaves()) {\n      LeafReader reader = context.reader();\n      BinaryDocValues dv = reader.getSortedDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        bytes[0] = (byte)(expectedValue >> 8);\n        bytes[1] = (byte) expectedValue;\n        final BytesRef term = dv.get(i);\n        assertEquals(data, term);\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b7cfe63c9be9c1b5a69e87693b33cc1311ebeac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}