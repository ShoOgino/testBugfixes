{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithUnloadedCore().mjava","commits":[{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithUnloadedCore().mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCollectionWithUnloadedCore() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"corealreadyunloaded\";\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      createCollection(null, collectionName,  2, 1, 2, client, null, \"conf1\");\n    }\n    waitForRecoveriesToFinish(collectionName, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> result = makeRequest(baseUrl, request);\n    System.out.println(\"result:\" + result);\n    Object failure = result.get(\"failure\");\n    assertNull(\"We expect no failures\", failure);\n\n    assertCollectionNotExists(collectionName, 45);\n    \n    // now creating that collection should work\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    makeRequest(baseUrl, request);\n    \n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithUnloadedCore().mjava","sourceNew":null,"sourceOld":"  private void deleteCollectionWithUnloadedCore() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"corealreadyunloaded\";\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      createCollection(null, collectionName,  2, 1, 2, client, null, \"conf1\");\n    }\n    waitForRecoveriesToFinish(collectionName, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> result = makeRequest(baseUrl, request);\n    System.out.println(\"result:\" + result);\n    Object failure = result.get(\"failure\");\n    assertNull(\"We expect no failures\", failure);\n\n    assertCollectionNotExists(collectionName, 45);\n    \n    // now creating that collection should work\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    makeRequest(baseUrl, request);\n    \n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithUnloadedCore().mjava","sourceNew":null,"sourceOld":"  private void deleteCollectionWithUnloadedCore() throws Exception {\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"corealreadyunloaded\";\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      createCollection(null, collectionName,  2, 1, 2, client, null, \"conf1\");\n    }\n    waitForRecoveriesToFinish(collectionName, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> result = makeRequest(baseUrl, request);\n    System.out.println(\"result:\" + result);\n    Object failure = result.get(\"failure\");\n    assertNull(\"We expect no failures\", failure);\n\n    assertCollectionNotExists(collectionName, 45);\n    \n    // now creating that collection should work\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (secondConfigSet) {\n      params.set(\"collection.configName\", \"conf1\");\n    }\n    makeRequest(baseUrl, request);\n    \n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    makeRequest(baseUrl, request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["f9362075f92dff89425ca488b480f70d565d66e7"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["f9362075f92dff89425ca488b480f70d565d66e7","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9362075f92dff89425ca488b480f70d565d66e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9362075f92dff89425ca488b480f70d565d66e7"],"f9362075f92dff89425ca488b480f70d565d66e7":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}