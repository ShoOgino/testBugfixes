{"path":"lucene/core/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a700d48dccd79b7c91daaf2bd8bf202fe62c8f93","date":1399318631,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    } else {\n      threadBindings.put(requestingThread, minThreadState);\n    }\n\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n\n    if (minThreadState.isInitialized() == false) {\n      // Another thread just flushed this thread state and cleared our binding; put it back:\n      threadBindings.put(requestingThread, minThreadState); // make sure we get the same state next time \n    }\n\n    return minThreadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    }\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":null,"sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread, DocumentsWriter documentsWriter) {\n    ThreadState threadState = threadBindings.get(requestingThread);\n    if (threadState != null && threadState.tryLock()) {\n      return threadState;\n    }\n    ThreadState minThreadState = null;\n    \n    /* TODO -- another thread could lock the minThreadState we just got while \n     we should somehow prevent this. */\n    // Find the state that has minimum number of threads waiting\n    minThreadState = minContendedThreadState();\n    if (minThreadState == null || minThreadState.hasQueuedThreads()) {\n      final ThreadState newState = newThreadState(); // state is already locked if non-null\n      if (newState != null) {\n        assert newState.isHeldByCurrentThread();\n        threadBindings.put(requestingThread, newState);\n        return newState;\n      } else if (minThreadState == null) {\n        /*\n         * no new threadState available we just take the minContented one\n         * This must return a valid thread state since we accessed the \n         * synced context in newThreadState() above.\n         */\n        minThreadState = minContendedThreadState();\n      }\n    } else {\n      threadBindings.put(requestingThread, minThreadState);\n    }\n\n    assert minThreadState != null: \"ThreadState is null\";\n    \n    minThreadState.lock();\n\n    if (minThreadState.isInitialized() == false) {\n      // Another thread just flushed this thread state and cleared our binding; put it back:\n      threadBindings.put(requestingThread, minThreadState); // make sure we get the same state next time \n    }\n\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["a700d48dccd79b7c91daaf2bd8bf202fe62c8f93"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a700d48dccd79b7c91daaf2bd8bf202fe62c8f93":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"]},"commit2Childs":{"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a700d48dccd79b7c91daaf2bd8bf202fe62c8f93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a700d48dccd79b7c91daaf2bd8bf202fe62c8f93":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}