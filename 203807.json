{"path":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}