{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.name);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.name);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getLiveBits(be.missingOffset, maxDoc), getLegacyBinary(field));\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.name);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getLiveBits(be.missingOffset, maxDoc), getLegacyBinary(field));\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.name);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getLiveBits(be.missingOffset, maxDoc), getLegacyBinary(field));\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getLiveBits(be.missingOffset, maxDoc), getLegacyBinary(field));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.name);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a870f9917149dc600c4ad4417d615c1795de5864","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a870f9917149dc600c4ad4417d615c1795de5864":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}