{"path":"lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper#obtainLock(String).mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper#obtainLock(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lock obtainLock(String lockName) throws IOException {\n    LockObtainFailedException failureReason = null;\n    long maxSleepCount = lockWaitTimeout / pollInterval;\n    long sleepCount = 0;\n    \n    do {\n      try {\n        return in.obtainLock(lockName);\n      } catch (LockObtainFailedException failed) {\n        if (failureReason == null) {\n          failureReason = failed;\n        }\n      }\n      try {\n        Thread.sleep(pollInterval);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    } while (sleepCount++ < maxSleepCount || lockWaitTimeout == LOCK_OBTAIN_WAIT_FOREVER);\n    \n    // we failed to obtain the lock in the required time\n    String reason = \"Lock obtain timed out: \" + this.toString();\n    if (failureReason != null) {\n      reason += \": \" + failureReason;\n    }\n    throw new LockObtainFailedException(reason, failureReason);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f86ce8c7390eeb4b24bceee343195d17e92103a1","date":1434276789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SleepingLockWrapper#obtainLock(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper#obtainLock(String).mjava","sourceNew":"  @Override\n  public Lock obtainLock(String lockName) throws IOException {\n    LockObtainFailedException failureReason = null;\n    long maxSleepCount = lockWaitTimeout / pollInterval;\n    long sleepCount = 0;\n    \n    do {\n      try {\n        return in.obtainLock(lockName);\n      } catch (LockObtainFailedException failed) {\n        if (failureReason == null) {\n          failureReason = failed;\n        }\n      }\n      try {\n        Thread.sleep(pollInterval);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    } while (sleepCount++ < maxSleepCount || lockWaitTimeout == LOCK_OBTAIN_WAIT_FOREVER);\n    \n    // we failed to obtain the lock in the required time\n    String reason = \"Lock obtain timed out: \" + this.toString();\n    if (failureReason != null) {\n      reason += \": \" + failureReason;\n    }\n    throw new LockObtainFailedException(reason, failureReason);\n  }\n\n","sourceOld":"  @Override\n  public Lock obtainLock(String lockName) throws IOException {\n    LockObtainFailedException failureReason = null;\n    long maxSleepCount = lockWaitTimeout / pollInterval;\n    long sleepCount = 0;\n    \n    do {\n      try {\n        return in.obtainLock(lockName);\n      } catch (LockObtainFailedException failed) {\n        if (failureReason == null) {\n          failureReason = failed;\n        }\n      }\n      try {\n        Thread.sleep(pollInterval);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    } while (sleepCount++ < maxSleepCount || lockWaitTimeout == LOCK_OBTAIN_WAIT_FOREVER);\n    \n    // we failed to obtain the lock in the required time\n    String reason = \"Lock obtain timed out: \" + this.toString();\n    if (failureReason != null) {\n      reason += \": \" + failureReason;\n    }\n    throw new LockObtainFailedException(reason, failureReason);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f86ce8c7390eeb4b24bceee343195d17e92103a1":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f86ce8c7390eeb4b24bceee343195d17e92103a1"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["f86ce8c7390eeb4b24bceee343195d17e92103a1"],"f86ce8c7390eeb4b24bceee343195d17e92103a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}