{"path":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchAutoRelax().mjava","commits":[{"id":"3ca415055c1401a2359adfb8f5d3fbf3887f95d7","date":1438554679,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchAutoRelax().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMinShouldMatchAutoRelax() {\n    /* The basics should not be affected by autoRelax */\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\", true);\n    assertEquals(0, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"1\", true);\n    assertEquals(1, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\", true);\n    assertEquals(4, q.build().getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    /* Simulate stopwords through uneven disjuncts */\n    q = new BooleanQuery.Builder();\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(0.0f);\n    dmq.add(new TermQuery(new Term(\"a\",\"foo\")));\n    q.add(dmq, Occur.SHOULD);\n    dmq = new DisjunctionMaxQuery(0.0f);\n    dmq.add(new TermQuery(new Term(\"a\",\"foo\")));\n    dmq.add(new TermQuery(new Term(\"b\",\"foo\")));\n    q.add(dmq, Occur.SHOULD);\n    dmq = new DisjunctionMaxQuery(0.0f);\n    dmq.add(new TermQuery(new Term(\"a\",\"bar\")));\n    dmq.add(new TermQuery(new Term(\"b\",\"bar\")));\n    q.add(dmq, Occur.SHOULD);\n\n    // Without relax\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", false);\n    assertEquals(3, q.build().getMinimumNumberShouldMatch());\n\n    // With relax\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    // Still same result with a MUST clause extra\n    q.add(new TermQuery(new Term(\"a\",\"must\")), Occur.MUST);\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    // Combination of dismax and non-dismax SHOULD clauses\n    q.add(new TermQuery(new Term(\"b\",\"should\")), Occur.SHOULD);\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(3, q.build().getMinimumNumberShouldMatch());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchAutoRelax().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchAutoRelax().mjava","sourceNew":"  @Test\n  public void testMinShouldMatchAutoRelax() {\n    /* The basics should not be affected by autoRelax */\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\", true);\n    assertEquals(0, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"1\", true);\n    assertEquals(1, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\", true);\n    assertEquals(4, q.build().getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    /* Simulate stopwords through uneven disjuncts */\n    q = new BooleanQuery.Builder();\n    q.add(new DisjunctionMaxQuery(Collections.singleton(new TermQuery(new Term(\"a\",\"foo\"))), 0.0f), Occur.SHOULD);\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new TermQuery(new Term(\"a\",\"foo\")),\n            new TermQuery(new Term(\"b\",\"foo\"))),\n        0f);\n    q.add(dmq, Occur.SHOULD);\n    dmq = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new TermQuery(new Term(\"a\",\"bar\")),\n            new TermQuery(new Term(\"b\",\"bar\"))),\n        0f);\n    q.add(dmq, Occur.SHOULD);\n\n    // Without relax\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", false);\n    assertEquals(3, q.build().getMinimumNumberShouldMatch());\n\n    // With relax\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    // Still same result with a MUST clause extra\n    q.add(new TermQuery(new Term(\"a\",\"must\")), Occur.MUST);\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    // Combination of dismax and non-dismax SHOULD clauses\n    q.add(new TermQuery(new Term(\"b\",\"should\")), Occur.SHOULD);\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(3, q.build().getMinimumNumberShouldMatch());\n  }\n\n","sourceOld":"  @Test\n  public void testMinShouldMatchAutoRelax() {\n    /* The basics should not be affected by autoRelax */\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\", true);\n    assertEquals(0, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"1\", true);\n    assertEquals(1, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\", true);\n    assertEquals(4, q.build().getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    /* Simulate stopwords through uneven disjuncts */\n    q = new BooleanQuery.Builder();\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(0.0f);\n    dmq.add(new TermQuery(new Term(\"a\",\"foo\")));\n    q.add(dmq, Occur.SHOULD);\n    dmq = new DisjunctionMaxQuery(0.0f);\n    dmq.add(new TermQuery(new Term(\"a\",\"foo\")));\n    dmq.add(new TermQuery(new Term(\"b\",\"foo\")));\n    q.add(dmq, Occur.SHOULD);\n    dmq = new DisjunctionMaxQuery(0.0f);\n    dmq.add(new TermQuery(new Term(\"a\",\"bar\")));\n    dmq.add(new TermQuery(new Term(\"b\",\"bar\")));\n    q.add(dmq, Occur.SHOULD);\n\n    // Without relax\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", false);\n    assertEquals(3, q.build().getMinimumNumberShouldMatch());\n\n    // With relax\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    // Still same result with a MUST clause extra\n    q.add(new TermQuery(new Term(\"a\",\"must\")), Occur.MUST);\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(2, q.build().getMinimumNumberShouldMatch());\n\n    // Combination of dismax and non-dismax SHOULD clauses\n    q.add(new TermQuery(new Term(\"b\",\"should\")), Occur.SHOULD);\n    SolrPluginUtils.setMinShouldMatch(q, \"100%\", true);\n    assertEquals(3, q.build().getMinimumNumberShouldMatch());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}