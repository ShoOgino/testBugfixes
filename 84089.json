{"path":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","commits":[{"id":"185d73416ce4b3eaac6886de46a0a95eafbb01da","date":1272892809,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b441220ceb933f50f32318ab45acc05d5943f3aa":["185d73416ce4b3eaac6886de46a0a95eafbb01da"],"185d73416ce4b3eaac6886de46a0a95eafbb01da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b441220ceb933f50f32318ab45acc05d5943f3aa"]},"commit2Childs":{"b441220ceb933f50f32318ab45acc05d5943f3aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"185d73416ce4b3eaac6886de46a0a95eafbb01da":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["185d73416ce4b3eaac6886de46a0a95eafbb01da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}