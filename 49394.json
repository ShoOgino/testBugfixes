{"path":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   * @see <a href=\"doc-files/ss.computeLengthNorm.svg\">An SVG visualization of this function</a> \n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   * @see <a href=\"doc-files/ss.computeLengthNorm.svg\">An SVG visualization of this function</a> \n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   * @see <a href=\"doc-files/ss.computeLengthNorm.svg\">An SVG visualization of this function</a> \n   */\n  @Override\n  public float lengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   * @see <a href=\"doc-files/ss.computeLengthNorm.svg\">An SVG visualization of this function</a> \n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   * @see <a href=\"doc-files/ss.computeLengthNorm.svg\">An SVG visualization of this function</a> \n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b89678825b68eccaf09e6ab71675fc0b0af1e099","615370d2b876c3435773b5174df2e2242ad7981a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615370d2b876c3435773b5174df2e2242ad7981a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}