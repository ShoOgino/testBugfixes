{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p/>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p/>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addSplit(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","sourceNew":"  /**\n   * a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   * It is possible to have multiple levels of split one for parent and one for child\n   * each child record (or a list of records) will be emitted as a part of the parent record with\n   * null as the key\n   *\n   * @param splitPath The PATH for which a record is emitted.  A record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n\n  void addSplit(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addSplit(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","sourceNew":"  /**\n   * a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   * It is possible to have multiple levels of split one for parent and one for child\n   * each child record (or a list of records) will be emitted as a part of the parent record with\n   * null as the key\n   *\n   * @param splitPath The PATH for which a record is emitted.  A record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n\n  void addSplit(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addSplit(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","sourceNew":"  /**\n   * a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   * It is possible to have multiple levels of split one for parent and one for child\n   * each child record (or a list of records) will be emitted as a part of the parent record with\n   * null as the key\n   *\n   * @param splitPath The PATH for which a record is emitted.  A record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n\n  void addSplit(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#addSplit(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","sourceNew":"  /**\n   * a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   * It is possible to have multiple levels of split one for parent and one for child\n   * each child record (or a list of records) will be emitted as a part of the parent record with\n   * null as the key\n   *\n   * @param splitPath The PATH for which a record is emitted.  A record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n\n  void addSplit(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader#JsonRecordReader(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * A constructor called with a '|' separated list of path expressions\n   * which define sub sections of the JSON stream that are to be emitted as\n   * separate records.\n   *\n   * @param splitPath The PATH for which a record is emitted. Once the\n   *                  path tag is encountered, the Node.getInst method starts collecting wanted\n   *                  fields and at the close of the tag, a record is emitted containing all\n   *                  fields collected since the tag start. Once\n   *                  emitted the collected fields are cleared. Any fields collected in the\n   *                  parent tag or above will also be included in the record, but these are\n   *                  not cleared after emitting the record.\n   *                  <p>\n   *                  It uses the ' | ' syntax of PATH to pass in multiple paths.\n   */\n  private JsonRecordReader(String splitPath) {\n    String[] splits = splitPath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n        throw new RuntimeException(\"split cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full split attribute path\n      addField(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["2330174b38007b9942205a2679db9ddffe35af89","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["2330174b38007b9942205a2679db9ddffe35af89","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2330174b38007b9942205a2679db9ddffe35af89","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["2330174b38007b9942205a2679db9ddffe35af89","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"]},"commit2Childs":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["611f7ea4eee5babadf4129bfa5fbae964738cd7c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["2330174b38007b9942205a2679db9ddffe35af89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}