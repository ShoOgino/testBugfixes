{"path":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"<!literal>\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_f>1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"<!field f=v_t>HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"<!field f=v_f>1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"<!field f=v_t>Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"<!prefix f=v_t v=hel>\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"<!prefix f='v_t' v=\\\"hel\\\">\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"<!prefix   f=v_t   v=hel   >\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with <! in it\",\n            req(\"q\",\"<!prefix f=v_s><!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_s\", \"my.v\", \"<!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"<!lucene>v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"<!df=v_t>hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=OR df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=AND df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"<!boost b=sum(v_f,1)>id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"<!boost v=$q1 b=$q2>\"\n                ,\"q1\", \"<!func>v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"<!dismax>hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"<!prefix f=v_t>he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"<!dismax qf=v_t>hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2355e74f213ed1cd99b63fe6b06a53eb7b58b719","date":1202183193,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"<!literal>\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_f>1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"<!foo f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"<!field f=v_t>HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"<!field f=v_f>1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"<!field f=v_t>Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"<!prefix f=v_t v=hel>\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"<!prefix f='v_t' v=\\\"hel\\\">\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"<!prefix   f=v_t   v=hel   >\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with <! in it\",\n            req(\"q\",\"<!prefix f=v_s><!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_s\", \"my.v\", \"<!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"<!lucene>v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"<!df=v_t>hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=OR df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=AND df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"<!boost b=sum(v_f,1)>id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"<!boost v=$q1 b=$q2>\"\n                ,\"q1\", \"<!func>v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"<!dismax>hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"<!prefix f=v_t>he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"<!dismax qf=v_t>hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"<!literal>\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_f>1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"<!field f=v_t>HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"<!field f=v_f>1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"<!field f=v_t>Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"<!prefix f=v_t v=hel>\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"<!prefix f='v_t' v=\\\"hel\\\">\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"<!prefix   f=v_t   v=hel   >\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with <! in it\",\n            req(\"q\",\"<!prefix f=v_s><!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_s\", \"my.v\", \"<!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"<!lucene>v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"<!df=v_t>hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=OR df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=AND df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"<!boost b=sum(v_f,1)>id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"<!boost v=$q1 b=$q2>\"\n                ,\"q1\", \"<!func>v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"<!dismax>hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"<!prefix f=v_t>he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"<!dismax qf=v_t>hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8af100240eebb59eca62e40730c5b433b83dd5e","date":1204667990,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"<!literal>\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_f>1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"<!foo f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"<!field f=v_t>HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"<!field f=v_f>1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"<!field f=v_t>Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"<!prefix f=v_t v=hel>\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"<!prefix f='v_t' v=\\\"hel\\\">\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"<!prefix   f=v_t   v=hel   >\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with <! in it\",\n            req(\"q\",\"<!prefix f=v_s><!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_s\", \"my.v\", \"<!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"<!lucene>v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"<!df=v_t>hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=OR df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=AND df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"<!boost b=sum(v_f,1)>id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"<!boost v=$q1 b=$q2>\"\n                ,\"q1\", \"<!func>v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"<!dismax>hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"<!prefix f=v_t>he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"<!dismax qf=v_t>hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"<!query v=$q1>\\\"\", \"q1\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"<!query defType=query v=$q1>\\\"\", \"q1\",\"<!v=$q2>\",\"q2\",\"<!prefix f=v_t v=$qqq>\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"<!literal>\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_f>1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"<!foo f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"<!field f=v_t>HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"<!field f=v_f>1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"<!field f=v_t>Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"<!prefix f=v_t v=hel>\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"<!prefix f='v_t' v=\\\"hel\\\">\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"<!prefix   f=v_t   v=hel   >\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with <! in it\",\n            req(\"q\",\"<!prefix f=v_s><!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_s\", \"my.v\", \"<!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"<!lucene>v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"<!df=v_t>hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=OR df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=AND df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"<!boost b=sum(v_f,1)>id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"<!boost v=$q1 b=$q2>\"\n                ,\"q1\", \"<!func>v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"<!dismax>hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"<!prefix f=v_t>he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"<!dismax qf=v_t>hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed9977f1cdec244969bc4f5054a6041028238bf","date":1209503245,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"<!literal>\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_t>Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"<!raw f=v_f>1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"<!foo f=v_t>hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"<!field f=v_t>HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"<!field f=v_f>1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"<!field f=v_t>Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"<!prefix f=v_t v=hel>\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"<!prefix f='v_t' v=\\\"hel\\\">\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"<!prefix   f=v_t   v=hel   >\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with <! in it\",\n            req(\"q\",\"<!prefix f=v_s><!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"<!prefix f=$myf v=$my.v>\"\n                ,\"myf\",\"v_s\", \"my.v\", \"<!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"<!lucene>v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"<!df=v_t>hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=OR df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"<!q.op=AND df=v_t>Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"<!boost b=sum(v_f,1)>id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"<!boost v=$q1 b=$q2>\"\n                ,\"q1\", \"<!func>v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"<!dismax>hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"<!prefix f=v_t>he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"<!dismax qf=v_t>hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"<!query v=$q1>\\\"\", \"q1\",\"<!prefix f=v_t>hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"<!query defType=query v=$q1>\\\"\", \"q1\",\"<!v=$q2>\",\"q2\",\"<!prefix f=v_t v=$qqq>\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae5ba445e353247a42fc0d858c850f65715b0250","date":1249066787,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93a349ff1ee15e2386510285a100921b41825da0","date":1249067049,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    /** future test\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n     **/\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n\n    Object[] arr = new Object[] {\n    \"id\",999.0\n    ,\"v_s\",\"wow dude\"\n    ,\"v_t\",\"wow\"\n    ,\"v_ti\",-1\n    ,\"v_tis\",-1\n    ,\"v_tl\",-1234567891234567890L\n    ,\"v_tls\",-1234567891234567890L\n    ,\"v_tf\",-2.0f\n    ,\"v_tfs\",-2.0f\n    ,\"v_td\",-2.0\n    ,\"v_tds\",-2.0\n    ,\"v_tdt\",\"2000-05-10T01:01:01Z\"\n    ,\"v_tdts\",\"2002-08-26T01:01:01Z\"\n    };\n    String[] sarr = new String[arr.length];\n    for (int i=0; i<arr.length; i++) {\n      sarr[i] = arr[i].toString();\n    }\n\n    assertU(adoc(sarr));\n    assertU(optimize());\n\n    // test field queries\n    for (int i=0; i<arr.length; i+=2) {\n      String f = arr[i].toString();\n      String v = arr[i+1].toString();\n\n      // normal lucene fielded query\n      assertQ(req( \"q\",f+\":\\\"\"+v+'\"')\n              ,\"//result[@numFound='1']\"\n              ,\"//*[@name='id'][.='999.0']\"\n              ,\"//*[@name='\" + f + \"'][.='\" + v + \"']\"\n              );\n      // System.out.println(\"#########################################\" + f + \"=\" + v);\n\n      // field qparser\n      assertQ(req( \"q\", \"{!field f=\"+f+\"}\"+v)\n              ,\"//result[@numFound='1']\"\n              );\n\n      // lucene range\n      assertQ(req( \"q\", f + \":[\\\"\" + v + \"\\\" TO \\\"\" + v + \"\\\"]\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // frange qparser\n      assertQ(req( \"q\", \"{!frange v=\"+f+\" l='\"+v+\"' u='\"+v+\"'}\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // function query... just make sure it doesn't throw an exception\n       assertQ(req( \"q\", \"+id:999 _val_:\\\"\" + f + \"\\\"\")\n            ,\"//result[@numFound='1']\"\n        );\n\n    }\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(optimize());\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    /** future test\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n     **/\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"749d75d8059027e0ea8aecc15b7016867347dacb","date":1259764118,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(adoc(\"id\",\"9\", \"v_s\",\"internal\\\"quote\"));\n\n    Object[] arr = new Object[] {\n    \"id\",999.0\n    ,\"v_s\",\"wow dude\"\n    ,\"v_t\",\"wow\"\n    ,\"v_ti\",-1\n    ,\"v_tis\",-1\n    ,\"v_tl\",-1234567891234567890L\n    ,\"v_tls\",-1234567891234567890L\n    ,\"v_tf\",-2.0f\n    ,\"v_tfs\",-2.0f\n    ,\"v_td\",-2.0\n    ,\"v_tds\",-2.0\n    ,\"v_tdt\",\"2000-05-10T01:01:01Z\"\n    ,\"v_tdts\",\"2002-08-26T01:01:01Z\"\n    };\n    String[] sarr = new String[arr.length];\n    for (int i=0; i<arr.length; i++) {\n      sarr[i] = arr[i].toString();\n    }\n\n    assertU(adoc(sarr));\n    assertU(optimize());\n\n    // test field queries\n    for (int i=0; i<arr.length; i+=2) {\n      String f = arr[i].toString();\n      String v = arr[i+1].toString();\n\n      // normal lucene fielded query\n      assertQ(req( \"q\",f+\":\\\"\"+v+'\"')\n              ,\"//result[@numFound='1']\"\n              ,\"//*[@name='id'][.='999.0']\"\n              ,\"//*[@name='\" + f + \"'][.='\" + v + \"']\"\n              );\n      // System.out.println(\"#########################################\" + f + \"=\" + v);\n\n      // field qparser\n      assertQ(req( \"q\", \"{!field f=\"+f+\"}\"+v)\n              ,\"//result[@numFound='1']\"\n              );\n\n      // lucene range\n      assertQ(req( \"q\", f + \":[\\\"\" + v + \"\\\" TO \\\"\" + v + \"\\\"]\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // frange qparser\n      assertQ(req( \"q\", \"{!frange v=\"+f+\" l='\"+v+\"' u='\"+v+\"'}\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // function query... just make sure it doesn't throw an exception\n       assertQ(req( \"q\", \"+id:999 _val_:\\\"\" + f + \"\\\"\")\n            ,\"//result[@numFound='1']\"\n        );\n\n    }\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    //\n    // test escapes in quoted strings\n    //\n\n    // the control... unescaped queries looking for internal\"quote\n    assertQ(req(\"q\",\"{!raw f=v_s}internal\\\"quote\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test that single quoted string needs no escape\n    assertQ(req(\"q\",\"{!raw f=v_s v='internal\\\"quote'}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // but it's OK if the escape is done\n    assertQ(req(\"q\",\"{!raw f=v_s v='internal\\\\\\\"quote'}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test unicode escape\n    assertQ(req(\"q\",\"{!raw f=v_s v=\\\"internal\\\\u0022quote\\\"}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // inside a quoted string, internal\"quote needs to be escaped\n    assertQ(req(\"q\",\"{!raw f=v_s v=\\\"internal\\\\\\\"quote\\\"}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n\n    Object[] arr = new Object[] {\n    \"id\",999.0\n    ,\"v_s\",\"wow dude\"\n    ,\"v_t\",\"wow\"\n    ,\"v_ti\",-1\n    ,\"v_tis\",-1\n    ,\"v_tl\",-1234567891234567890L\n    ,\"v_tls\",-1234567891234567890L\n    ,\"v_tf\",-2.0f\n    ,\"v_tfs\",-2.0f\n    ,\"v_td\",-2.0\n    ,\"v_tds\",-2.0\n    ,\"v_tdt\",\"2000-05-10T01:01:01Z\"\n    ,\"v_tdts\",\"2002-08-26T01:01:01Z\"\n    };\n    String[] sarr = new String[arr.length];\n    for (int i=0; i<arr.length; i++) {\n      sarr[i] = arr[i].toString();\n    }\n\n    assertU(adoc(sarr));\n    assertU(optimize());\n\n    // test field queries\n    for (int i=0; i<arr.length; i+=2) {\n      String f = arr[i].toString();\n      String v = arr[i+1].toString();\n\n      // normal lucene fielded query\n      assertQ(req( \"q\",f+\":\\\"\"+v+'\"')\n              ,\"//result[@numFound='1']\"\n              ,\"//*[@name='id'][.='999.0']\"\n              ,\"//*[@name='\" + f + \"'][.='\" + v + \"']\"\n              );\n      // System.out.println(\"#########################################\" + f + \"=\" + v);\n\n      // field qparser\n      assertQ(req( \"q\", \"{!field f=\"+f+\"}\"+v)\n              ,\"//result[@numFound='1']\"\n              );\n\n      // lucene range\n      assertQ(req( \"q\", f + \":[\\\"\" + v + \"\\\" TO \\\"\" + v + \"\\\"]\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // frange qparser\n      assertQ(req( \"q\", \"{!frange v=\"+f+\" l='\"+v+\"' u='\"+v+\"'}\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // function query... just make sure it doesn't throw an exception\n       assertQ(req( \"q\", \"+id:999 _val_:\\\"\" + f + \"\\\"\")\n            ,\"//result[@numFound='1']\"\n        );\n\n    }\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","pathOld":"src/test/org/apache/solr/search/TestQueryTypes#testQueryTypes().mjava","sourceNew":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(adoc(\"id\",\"9\", \"v_s\",\"internal\\\"quote\"));\n\n    Object[] arr = new Object[] {\n    \"id\",999.0\n    ,\"v_s\",\"wow dude\"\n    ,\"v_t\",\"wow\"\n    ,\"v_ti\",-1\n    ,\"v_tis\",-1\n    ,\"v_tl\",-1234567891234567890L\n    ,\"v_tls\",-1234567891234567890L\n    ,\"v_tf\",-2.0f\n    ,\"v_tfs\",-2.0f\n    ,\"v_td\",-2.0\n    ,\"v_tds\",-2.0\n    ,\"v_tdt\",\"2000-05-10T01:01:01Z\"\n    ,\"v_tdts\",\"2002-08-26T01:01:01Z\"\n    };\n    String[] sarr = new String[arr.length];\n    for (int i=0; i<arr.length; i++) {\n      sarr[i] = arr[i].toString();\n    }\n\n    assertU(adoc(sarr));\n    assertU(optimize());\n\n    // test field queries\n    for (int i=0; i<arr.length; i+=2) {\n      String f = arr[i].toString();\n      String v = arr[i+1].toString();\n\n      // normal lucene fielded query\n      assertQ(req( \"q\",f+\":\\\"\"+v+'\"')\n              ,\"//result[@numFound='1']\"\n              ,\"//*[@name='id'][.='999.0']\"\n              ,\"//*[@name='\" + f + \"'][.='\" + v + \"']\"\n              );\n      // System.out.println(\"#########################################\" + f + \"=\" + v);\n\n      // field qparser\n      assertQ(req( \"q\", \"{!field f=\"+f+\"}\"+v)\n              ,\"//result[@numFound='1']\"\n              );\n\n      // lucene range\n      assertQ(req( \"q\", f + \":[\\\"\" + v + \"\\\" TO \\\"\" + v + \"\\\"]\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // frange qparser\n      assertQ(req( \"q\", \"{!frange v=\"+f+\" l='\"+v+\"' u='\"+v+\"'}\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // function query... just make sure it doesn't throw an exception\n       assertQ(req( \"q\", \"+id:999 _val_:\\\"\" + f + \"\\\"\")\n            ,\"//result[@numFound='1']\"\n        );\n\n    }\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    //\n    // test escapes in quoted strings\n    //\n\n    // the control... unescaped queries looking for internal\"quote\n    assertQ(req(\"q\",\"{!raw f=v_s}internal\\\"quote\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test that single quoted string needs no escape\n    assertQ(req(\"q\",\"{!raw f=v_s v='internal\\\"quote'}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // but it's OK if the escape is done\n    assertQ(req(\"q\",\"{!raw f=v_s v='internal\\\\\\\"quote'}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test unicode escape\n    assertQ(req(\"q\",\"{!raw f=v_s v=\\\"internal\\\\u0022quote\\\"}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // inside a quoted string, internal\"quote needs to be escaped\n    assertQ(req(\"q\",\"{!raw f=v_s v=\\\"internal\\\\\\\"quote\\\"}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void testQueryTypes() {\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\"));\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\"));\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"1.5\"));\n    assertU(adoc(\"id\",\"8\", \"v_ti\",\"5\"));\n    assertU(adoc(\"id\",\"9\", \"v_s\",\"internal\\\"quote\"));\n\n    Object[] arr = new Object[] {\n    \"id\",999.0\n    ,\"v_s\",\"wow dude\"\n    ,\"v_t\",\"wow\"\n    ,\"v_ti\",-1\n    ,\"v_tis\",-1\n    ,\"v_tl\",-1234567891234567890L\n    ,\"v_tls\",-1234567891234567890L\n    ,\"v_tf\",-2.0f\n    ,\"v_tfs\",-2.0f\n    ,\"v_td\",-2.0\n    ,\"v_tds\",-2.0\n    ,\"v_tdt\",\"2000-05-10T01:01:01Z\"\n    ,\"v_tdts\",\"2002-08-26T01:01:01Z\"\n    };\n    String[] sarr = new String[arr.length];\n    for (int i=0; i<arr.length; i++) {\n      sarr[i] = arr[i].toString();\n    }\n\n    assertU(adoc(sarr));\n    assertU(optimize());\n\n    // test field queries\n    for (int i=0; i<arr.length; i+=2) {\n      String f = arr[i].toString();\n      String v = arr[i+1].toString();\n\n      // normal lucene fielded query\n      assertQ(req( \"q\",f+\":\\\"\"+v+'\"')\n              ,\"//result[@numFound='1']\"\n              ,\"//*[@name='id'][.='999.0']\"\n              ,\"//*[@name='\" + f + \"'][.='\" + v + \"']\"\n              );\n      // System.out.println(\"#########################################\" + f + \"=\" + v);\n\n      // field qparser\n      assertQ(req( \"q\", \"{!field f=\"+f+\"}\"+v)\n              ,\"//result[@numFound='1']\"\n              );\n\n      // lucene range\n      assertQ(req( \"q\", f + \":[\\\"\" + v + \"\\\" TO \\\"\" + v + \"\\\"]\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // frange qparser\n      assertQ(req( \"q\", \"{!frange v=\"+f+\" l='\"+v+\"' u='\"+v+\"'}\" )\n              ,\"//result[@numFound='1']\"\n              );\n\n      // function query... just make sure it doesn't throw an exception\n       assertQ(req( \"q\", \"+id:999 _val_:\\\"\" + f + \"\\\"\")\n            ,\"//result[@numFound='1']\"\n        );\n\n    }\n\n\n    // Some basic tests to ensure that parsing local params is working\n    assertQ(\"test prefix query\",\n            req(\"q\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_t}Hello\")\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test raw query\",\n            req(\"q\",\"{!raw f=v_f}1.5\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    //\n    // test escapes in quoted strings\n    //\n\n    // the control... unescaped queries looking for internal\"quote\n    assertQ(req(\"q\",\"{!raw f=v_s}internal\\\"quote\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test that single quoted string needs no escape\n    assertQ(req(\"q\",\"{!raw f=v_s v='internal\\\"quote'}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // but it's OK if the escape is done\n    assertQ(req(\"q\",\"{!raw f=v_s v='internal\\\\\\\"quote'}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test unicode escape\n    assertQ(req(\"q\",\"{!raw f=v_s v=\\\"internal\\\\u0022quote\\\"}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // inside a quoted string, internal\"quote needs to be escaped\n    assertQ(req(\"q\",\"{!raw f=v_s v=\\\"internal\\\\\\\"quote\\\"}\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test custom plugin query\",\n            req(\"q\",\"{!foo f=v_t}hello\")\n            ,\"//result[@numFound='2']\"\n            );\n\n\n    assertQ(\"test single term field query on text type\",\n            req(\"q\",\"{!field f=v_t}HELLO\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test single term field query on type with diff internal rep\",\n            req(\"q\",\"{!field f=v_f}1.5\")\n            ,\"//result[@numFound='1']\"\n            );    \n\n    assertQ(\n            req(\"q\",\"{!field f=v_ti}5\")\n            ,\"//result[@numFound='1']\"\n            );\n\n     assertQ(\"test multi term field query on text type\",\n            req(\"q\",\"{!field f=v_t}Hello  DUDE\")\n            ,\"//result[@numFound='1']\"\n            );\n\n\n    assertQ(\"test prefix query with value in local params\",\n            req(\"q\",\"{!prefix f=v_t v=hel}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test optional quotes\",\n            req(\"q\",\"{!prefix f='v_t' v=\\\"hel\\\"}\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test extra whitespace\",\n            req(\"q\",\"{!prefix   f=v_t   v=hel   }\")\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test literal with {! in it\",\n            req(\"q\",\"{!prefix f=v_s}{!lit\")\n            ,\"//result[@numFound='1']\"\n    );\n\n    assertQ(\"test param subst\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_t\", \"my.v\", \"hel\"\n            )\n            ,\"//result[@numFound='2']\"\n    );\n\n    assertQ(\"test param subst with literal\",\n            req(\"q\",\"{!prefix f=$myf v=$my.v}\"\n                ,\"myf\",\"v_s\", \"my.v\", \"{!lit\"\n            )\n            ,\"//result[@numFound='1']\"\n    );\n\n   // lucene queries\n   assertQ(\"test lucene query\",\n            req(\"q\",\"{!lucene}v_t:hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene queries\n   assertQ(\"test lucene default field\",\n            req(\"q\",\"{!df=v_t}hel*\")\n            ,\"//result[@numFound='2']\"\n            );\n\n   // lucene operator\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=OR df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='2']\"\n            );\n   assertQ(\"test lucene operator\",\n            req(\"q\",\"{!q.op=AND df=v_t}Hello Yonik\")\n            ,\"//result[@numFound='1']\"\n            );\n\n    // test boost queries\n    assertQ(\"test boost\",\n            req(\"q\",\"{!boost b=sum(v_f,1)}id:[5 TO 6]\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//result[@numFound='2']\"\n            ,\"//doc[./float[@name='v_f']='3.14159' and ./float[@name='score']='4.14159']\"\n    );\n\n    assertQ(\"test boost and default type of func\",\n            req(\"q\",\"{!boost v=$q1 b=$q2}\"\n                ,\"q1\", \"{!func}v_f\", \"q2\",\"v_f\"\n                ,\"fl\",\"*,score\"\n            )\n            ,\"//doc[./float[@name='v_f']='1.5' and ./float[@name='score']='2.25']\"\n    );\n\n\n    // dismax query from std request handler\n    assertQ(\"test dismax query\",\n             req(\"q\",\"{!dismax}hello\"\n                ,\"qf\",\"v_t\"\n                ,\"bf\",\"sqrt(v_f)^100 log(sum(v_f,1))^50\"\n                ,\"bq\",\"{!prefix f=v_t}he\"\n                ,\"debugQuery\",\"on\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    // dismax query from std request handler, using local params\n    assertQ(\"test dismax query w/ local params\",\n             req(\"q\",\"{!dismax qf=v_t}hello\"\n                ,\"qf\",\"v_f\"\n             )\n             ,\"//result[@numFound='2']\"\n             );\n\n    assertQ(\"test nested query\",\n            req(\"q\",\"_query_:\\\"{!query v=$q1}\\\"\", \"q1\",\"{!prefix f=v_t}hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n    assertQ(\"test nested nested query\",\n            req(\"q\",\"_query_:\\\"{!query defType=query v=$q1}\\\"\", \"q1\",\"{!v=$q2}\",\"q2\",\"{!prefix f=v_t v=$qqq}\",\"qqq\",\"hel\")\n            ,\"//result[@numFound='2']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f8af100240eebb59eca62e40730c5b433b83dd5e":["2355e74f213ed1cd99b63fe6b06a53eb7b58b719"],"749d75d8059027e0ea8aecc15b7016867347dacb":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"2355e74f213ed1cd99b63fe6b06a53eb7b58b719":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"ae5ba445e353247a42fc0d858c850f65715b0250":["0ed9977f1cdec244969bc4f5054a6041028238bf"],"0ed9977f1cdec244969bc4f5054a6041028238bf":["f8af100240eebb59eca62e40730c5b433b83dd5e"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["93a349ff1ee15e2386510285a100921b41825da0"],"ad94625fb8d088209f46650c8097196fec67f00c":["749d75d8059027e0ea8aecc15b7016867347dacb"],"93a349ff1ee15e2386510285a100921b41825da0":["ae5ba445e353247a42fc0d858c850f65715b0250"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f8af100240eebb59eca62e40730c5b433b83dd5e":["0ed9977f1cdec244969bc4f5054a6041028238bf"],"749d75d8059027e0ea8aecc15b7016867347dacb":["ad94625fb8d088209f46650c8097196fec67f00c"],"2355e74f213ed1cd99b63fe6b06a53eb7b58b719":["f8af100240eebb59eca62e40730c5b433b83dd5e"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["2355e74f213ed1cd99b63fe6b06a53eb7b58b719"],"ae5ba445e353247a42fc0d858c850f65715b0250":["93a349ff1ee15e2386510285a100921b41825da0"],"0ed9977f1cdec244969bc4f5054a6041028238bf":["ae5ba445e353247a42fc0d858c850f65715b0250"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["749d75d8059027e0ea8aecc15b7016867347dacb"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"93a349ff1ee15e2386510285a100921b41825da0":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}