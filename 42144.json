{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    // TODO: remove this workaround for SOLR-9440\n    zkStateReader.registerCore(collectionName);\n    try {\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n        if (docCollection == null) { // someone already deleted the collection\n          return true;\n        }\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          return true;\n        }\n      }\n      // replica still exists after the timeout\n      return false;\n    } finally {\n      zkStateReader.unregisterCore(collectionName);\n    }\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    // TODO: remove this workaround for SOLR-9440\n    zkStateReader.registerCore(collectionName);\n    try {\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n        if (docCollection == null) { // someone already deleted the collection\n          return true;\n        }\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          return true;\n        }\n      }\n      // replica still exists after the timeout\n      return false;\n    } finally {\n      zkStateReader.unregisterCore(collectionName);\n    }\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    // TODO: remove this workaround for SOLR-9440\n    zkStateReader.registerCore(collectionName);\n    try {\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n        if (docCollection == null) { // someone already deleted the collection\n          return true;\n        }\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          return true;\n        }\n      }\n      // replica still exists after the timeout\n      return false;\n    } finally {\n      zkStateReader.unregisterCore(collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","sourceOld":"  boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutms, TimeUnit.MILLISECONDS, timeSource);\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (docCollection == null) { // someone already deleted the collection\n        return true;\n      }\n      Slice slice = docCollection.getSlice(shard);\n      if(slice == null || slice.getReplica(replicaName) == null) {\n        return true;\n      }\n    }\n    // replica still exists after the timeout\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["bcf9886c8ff537aafde14de48ebf744f5673f08b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ecb39e783dd104116a9502e8b0ab3df89f35ac19","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}