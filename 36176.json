{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    double lower,upper;\n\n    if (lowerVal==null) {\n      lower = Double.NEGATIVE_INFINITY;\n    } else {\n      lower = Double.parseDouble(lowerVal);\n    }\n\n     if (upperVal==null) {\n      upper = Double.POSITIVE_INFINITY;\n    } else {\n      upper = Double.parseDouble(upperVal);\n    }\n\n    final double l = lower;\n    final double u = upper;\n\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    double lower,upper;\n\n    if (lowerVal==null) {\n      lower = Double.NEGATIVE_INFINITY;\n    } else {\n      lower = Double.parseDouble(lowerVal);\n    }\n\n     if (upperVal==null) {\n      upper = Double.POSITIVE_INFINITY;\n    } else {\n      upper = Double.parseDouble(upperVal);\n    }\n\n    final double l = lower;\n    final double u = upper;\n\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    double lower,upper;\n\n    if (lowerVal==null) {\n      lower = Double.NEGATIVE_INFINITY;\n    } else {\n      lower = Double.parseDouble(lowerVal);\n    }\n\n     if (upperVal==null) {\n      upper = Double.POSITIVE_INFINITY;\n    } else {\n      upper = Double.parseDouble(upperVal);\n    }\n\n    final double l = lower;\n    final double u = upper;\n\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues#getRangeScorer(LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DoubleDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    double lower,upper;\n\n    if (lowerVal==null) {\n      lower = Double.NEGATIVE_INFINITY;\n    } else {\n      lower = Double.parseDouble(lowerVal);\n    }\n\n     if (upperVal==null) {\n      upper = Double.POSITIVE_INFINITY;\n    } else {\n      upper = Double.parseDouble(upperVal);\n    }\n\n    final double l = lower;\n    final double u = upper;\n\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n      return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n      return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n      return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    double lower,upper;\n\n    if (lowerVal==null) {\n      lower = Double.NEGATIVE_INFINITY;\n    } else {\n      lower = Double.parseDouble(lowerVal);\n    }\n\n     if (upperVal==null) {\n      upper = Double.POSITIVE_INFINITY;\n    } else {\n      upper = Double.parseDouble(upperVal);\n    }\n\n    final double l = lower;\n    final double u = upper;\n\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          double docVal = doubleVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cfa96e1cacc0f1f98d8732aa54935875187781"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}