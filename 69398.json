{"path":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","commits":[{"id":"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a","date":1445465230,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n     boolean small = random().nextBoolean();\n    //boolean small = true;\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" bbox=\" + rect);\n      }\n\n      Query query = newBBoxQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6dcca930c65c294020791935635bcc0052b15397","b9e52892242a8c82e1b0c1bd4f1d404366b0501c","b9e52892242a8c82e1b0c1bd4f1d404366b0501c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dcca930c65c294020791935635bcc0052b15397","date":1446548883,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  @Nightly\n  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n    boolean small = random().nextBoolean();\n    //boolean small = true;\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" bbox=\" + rect);\n      }\n\n      Query query = newBBoxQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n     boolean small = random().nextBoolean();\n    //boolean small = true;\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" bbox=\" + rect);\n      }\n\n      Query query = newBBoxQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n    boolean small = random().nextBoolean();\n    //boolean small = true;\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" bbox=\" + rect);\n      }\n\n      Query query = newBBoxQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    noVirusChecker(dir);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    initIndexWriterConfig(FIELD_NAME, iwc);\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = randomLat(small);\n      lons[2*id] = randomLon(small);\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = randomLat(small);\n      lons[2*id+1] = randomLon(small);\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(75);\n    for (int iter=0;iter<iters;iter++) {\n      GeoRect rect = randomRect(small, small == false);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        Boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        if (result1 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        Boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n        if (result2 == null) {\n          // borderline case: cannot test\n          continue;\n        }\n\n        boolean expected = result1 == Boolean.TRUE || result2 == Boolean.TRUE;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dcca930c65c294020791935635bcc0052b15397":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["1904709ea0185dc04e3d77ea01c79e909caf2796","937923083e4d137932336fc80f3d78758ff698a6"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["6dcca930c65c294020791935635bcc0052b15397"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"937923083e4d137932336fc80f3d78758ff698a6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["6dcca930c65c294020791935635bcc0052b15397"],"6dcca930c65c294020791935635bcc0052b15397":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe","937923083e4d137932336fc80f3d78758ff698a6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}