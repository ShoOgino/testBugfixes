{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return new SolrClient() {\n      @Override\n      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n        SolrResponse rsp = SimCloudManager.this.request(request);\n        return rsp.getResponse();\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","sourceNew":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return new SolrClient() {\n      @Override\n      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n        if (collection != null) {\n          if (request instanceof AbstractUpdateRequest) {\n            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n          } else if (request instanceof QueryRequest) {\n            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n            params.set(\"collection\", collection);\n            request = new QueryRequest(params);\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n          }\n        }\n        SolrResponse rsp = SimCloudManager.this.request(request);\n        return rsp.getResponse();\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return new SolrClient() {\n      @Override\n      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n        SolrResponse rsp = SimCloudManager.this.request(request);\n        return rsp.getResponse();\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","sourceNew":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return new SolrClient() {\n      @Override\n      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n        if (collection != null) {\n          if (request instanceof AbstractUpdateRequest) {\n            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n          } else if (request instanceof QueryRequest) {\n            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n            params.set(\"collection\", collection);\n            request = new QueryRequest(params);\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n          }\n        }\n        SolrResponse rsp = SimCloudManager.this.request(request);\n        return rsp.getResponse();\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return new SolrClient() {\n      @Override\n      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n        SolrResponse rsp = SimCloudManager.this.request(request);\n        return rsp.getResponse();\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","sourceNew":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return solrClient;\n//    return new SolrClient() {\n//      @Override\n//      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n//        if (collection != null) {\n//          if (request instanceof AbstractUpdateRequest) {\n//            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n//          } else if (request instanceof QueryRequest) {\n//            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n//            params.set(\"collection\", collection);\n//            request = new QueryRequest(params);\n//          } else {\n//            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n//          }\n//        }\n//        SolrResponse rsp = SimCloudManager.this.request(request);\n//        return rsp.getResponse();\n//      }\n//\n//      @Override\n//      public void close() throws IOException {\n//\n//      }\n//    };\n  }\n\n","sourceOld":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return new SolrClient() {\n      @Override\n      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n        if (collection != null) {\n          if (request instanceof AbstractUpdateRequest) {\n            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n          } else if (request instanceof QueryRequest) {\n            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n            params.set(\"collection\", collection);\n            request = new QueryRequest(params);\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n          }\n        }\n        SolrResponse rsp = SimCloudManager.this.request(request);\n        return rsp.getResponse();\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simGetSolrClient().mjava","sourceNew":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return solrClient;\n//    return new SolrClient() {\n//      @Override\n//      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n//        if (collection != null) {\n//          if (request instanceof AbstractUpdateRequest) {\n//            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n//          } else if (request instanceof QueryRequest) {\n//            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n//            params.set(\"collection\", collection);\n//            request = new QueryRequest(params);\n//          } else {\n//            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n//          }\n//        }\n//        SolrResponse rsp = SimCloudManager.this.request(request);\n//        return rsp.getResponse();\n//      }\n//\n//      @Override\n//      public void close() throws IOException {\n//\n//      }\n//    };\n  }\n\n","sourceOld":"  /**\n   * Get a {@link SolrClient} implementation where calls are forwarded to this\n   * instance of the cluster.\n   * @return simulated SolrClient.\n   */\n  public SolrClient simGetSolrClient() {\n    return solrClient;\n//    return new SolrClient() {\n//      @Override\n//      public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n//        if (collection != null) {\n//          if (request instanceof AbstractUpdateRequest) {\n//            ((AbstractUpdateRequest)request).setParam(\"collection\", collection);\n//          } else if (request instanceof QueryRequest) {\n//            ModifiableSolrParams params = new ModifiableSolrParams(request.getParams());\n//            params.set(\"collection\", collection);\n//            request = new QueryRequest(params);\n//          } else {\n//            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"when collection != null only UpdateRequest and QueryRequest are supported: request=\" + request + \", collection=\" + collection);\n//          }\n//        }\n//        SolrResponse rsp = SimCloudManager.this.request(request);\n//        return rsp.getResponse();\n//      }\n//\n//      @Override\n//      public void close() throws IOException {\n//\n//      }\n//    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}