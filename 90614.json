{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReaderIndex#compareField(Term,int,PagedBytesDataInput).mjava","commits":[{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReaderIndex#compareField(Term,int,PagedBytesDataInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compares the fields before checking the text of the terms.\n   * \n   * @param term\n   *          the given term.\n   * @param termIndex\n   *          the term that exists in the data block.\n   * @param input\n   *          the data block.\n   * @return int.\n   * @throws IOException \n   */\n  private int compareField(Term term, int termIndex, PagedBytesDataInput input) throws IOException {\n    input.setPosition(indexToDataOffset.get(termIndex));\n    return term.field().compareTo(fields[input.readVInt()].field());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/TermInfosReaderIndex#compareField(Term,int,PagedBytesDataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReaderIndex#compareField(Term,int,PagedBytesDataInput).mjava","sourceNew":"  /**\n   * Compares the fields before checking the text of the terms.\n   * \n   * @param term\n   *          the given term.\n   * @param termIndex\n   *          the term that exists in the data block.\n   * @param input\n   *          the data block.\n   * @return int.\n   * @throws IOException \n   */\n  private int compareField(Term term, int termIndex, PagedBytesDataInput input) throws IOException {\n    input.setPosition(indexToDataOffset.get(termIndex));\n    return term.field().compareTo(fields[input.readVInt()].field());\n  }\n\n","sourceOld":"  /**\n   * Compares the fields before checking the text of the terms.\n   * \n   * @param term\n   *          the given term.\n   * @param termIndex\n   *          the term that exists in the data block.\n   * @param input\n   *          the data block.\n   * @return int.\n   * @throws IOException \n   */\n  private int compareField(Term term, int termIndex, PagedBytesDataInput input) throws IOException {\n    input.setPosition(indexToDataOffset.get(termIndex));\n    return term.field().compareTo(fields[input.readVInt()].field());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}