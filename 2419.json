{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(10000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(10000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","date":1341575807,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(10000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(10000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(10000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n        ts.reset();\n        while (ts.incrementToken()) {\n          assertTrue(UnicodeUtil.validUTF16String(termAtt));\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertTrue(UnicodeUtil.validUTF16String(termAtt));\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":["99c9d8533c954f661481ae44273622957dbf572f","c83d6c4335f31cae14f625a222bc842f20073dcd","6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 100);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n        ts.reset();\n        while (ts.incrementToken()) {\n          assertTrue(UnicodeUtil.validUTF16String(termAtt));\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 100);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n        ts.reset();\n        while (ts.incrementToken()) {\n          assertTrue(UnicodeUtil.validUTF16String(termAtt));\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestExtendedMode#testSurrogates2().mjava","sourceNew":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(500);\n    for (int i = 0; i < numIterations; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 100);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n        ts.reset();\n        while (ts.incrementToken()) {\n          assertTrue(UnicodeUtil.validUTF16String(termAtt));\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  /** random test ensuring we don't ever split supplementaries */\n  public void testSurrogates2() throws IOException {\n    int numIterations = atLeast(1000);\n    for (int i = 0; i < numIterations; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 100);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n        ts.reset();\n        while (ts.incrementToken()) {\n          assertTrue(UnicodeUtil.validUTF16String(termAtt));\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["6613659748fe4411a7dcf85266e55db1f95f7315"],"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["99c9d8533c954f661481ae44273622957dbf572f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["04e7f30683f53928b2fce016e6430c9795caff22","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["99c9d8533c954f661481ae44273622957dbf572f","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}