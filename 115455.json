{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#applyDeletes().mjava","sourceNew":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","sourceOld":"  // Apply buffered deletes to all segments.\n  private final synchronized boolean applyDeletes() throws CorruptIndexException, IOException {\n    assert testPoint(\"startApplyDeletes\");\n    SegmentInfos rollback = (SegmentInfos) segmentInfos.clone();\n    boolean success = false;\n    boolean changed;\n    try {\n      changed = docWriter.applyDeletes(segmentInfos);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception flushing deletes\");\n\n        // Carefully remove any partially written .del\n        // files\n        final int size = rollback.size();\n        for(int i=0;i<size;i++) {\n          final String newDelFileName = segmentInfos.info(i).getDelFileName();\n          final String delFileName = rollback.info(i).getDelFileName();\n          if (newDelFileName != null && !newDelFileName.equals(delFileName))\n            deleter.deleteFile(newDelFileName);\n        }\n\n        // Fully replace the segmentInfos since flushed\n        // deletes could have changed any of the\n        // SegmentInfo instances:\n        segmentInfos.clear();\n        segmentInfos.addAll(rollback);\n      }\n    }\n\n    if (changed)\n      checkpoint();\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}