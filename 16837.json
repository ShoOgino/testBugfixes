{"path":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#removeSolrServer(String).mjava","commits":[{"id":"d0e21d913dd196ddb03bd8eba703d966f9aead69","date":1237540237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#removeSolrServer(String).mjava","pathOld":"/dev/null","sourceNew":"  public String removeSolrServer(String server) {\n    try {\n      server = new URL(server).toExternalForm();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    if (server.endsWith(\"/\")) {\n      server = server.substring(0, server.length() - 1);\n    }\n    this.checkLock.lock();\n    try {\n      for (ServerWrapper serverWrapper : aliveServers) {\n        if (serverWrapper.solrServer.getBaseURL().equals(server)) {\n          aliveServers.remove(serverWrapper);\n          return serverWrapper.solrServer.getBaseURL();\n        }\n      }\n      if (zombieServers.isEmpty()) return null;\n\n      for (ServerWrapper serverWrapper : zombieServers) {\n        if (serverWrapper.solrServer.getBaseURL().equals(server)) {\n          zombieServers.remove(serverWrapper);\n          return serverWrapper.solrServer.getBaseURL();\n        }\n      }\n    } finally {\n      checkLock.unlock();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#removeSolrServer(String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#removeSolrServer(String).mjava","sourceNew":"  public String removeSolrServer(String server) {\n    try {\n      server = new URL(server).toExternalForm();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    if (server.endsWith(\"/\")) {\n      server = server.substring(0, server.length() - 1);\n    }\n    this.checkLock.lock();\n    try {\n      for (ServerWrapper serverWrapper : aliveServers) {\n        if (serverWrapper.solrServer.getBaseURL().equals(server)) {\n          aliveServers.remove(serverWrapper);\n          return serverWrapper.solrServer.getBaseURL();\n        }\n      }\n      if (zombieServers.isEmpty()) return null;\n\n      for (ServerWrapper serverWrapper : zombieServers) {\n        if (serverWrapper.solrServer.getBaseURL().equals(server)) {\n          zombieServers.remove(serverWrapper);\n          return serverWrapper.solrServer.getBaseURL();\n        }\n      }\n    } finally {\n      checkLock.unlock();\n    }\n    return null;\n  }\n\n","sourceOld":"  public String removeSolrServer(String server) {\n    try {\n      server = new URL(server).toExternalForm();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    if (server.endsWith(\"/\")) {\n      server = server.substring(0, server.length() - 1);\n    }\n    this.checkLock.lock();\n    try {\n      for (ServerWrapper serverWrapper : aliveServers) {\n        if (serverWrapper.solrServer.getBaseURL().equals(server)) {\n          aliveServers.remove(serverWrapper);\n          return serverWrapper.solrServer.getBaseURL();\n        }\n      }\n      if (zombieServers.isEmpty()) return null;\n\n      for (ServerWrapper serverWrapper : zombieServers) {\n        if (serverWrapper.solrServer.getBaseURL().equals(server)) {\n          zombieServers.remove(serverWrapper);\n          return serverWrapper.solrServer.getBaseURL();\n        }\n      }\n    } finally {\n      checkLock.unlock();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}