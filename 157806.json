{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"/dev/null","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}