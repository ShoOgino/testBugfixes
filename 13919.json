{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram, Field.Store.NO);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end, Field.Store.NO);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram, Field.Store.NO);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end, Field.Store.NO);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram, Field.Store.NO);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end, Field.Store.NO);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram, Field.Store.NO);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end, Field.Store.NO);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram, Field.Store.NO);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end, Field.Store.NO);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}