{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode#ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode#ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode#ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode).mjava","sourceNew":"  public ParametricRangeQueryNode(ParametricQueryNode lowerBound,\n      ParametricQueryNode upperBound) {\n\n    if (upperBound.getOperator() != CompareOperator.LE\n        && upperBound.getOperator() != CompareOperator.LT) {\n      throw new IllegalArgumentException(\"upper bound should have \"\n          + CompareOperator.LE + \" or \" + CompareOperator.LT);\n    }\n\n    if (lowerBound.getOperator() != CompareOperator.GE\n        && lowerBound.getOperator() != CompareOperator.GT) {\n      throw new IllegalArgumentException(\"lower bound should have \"\n          + CompareOperator.GE + \" or \" + CompareOperator.GT);\n    }\n\n    if (upperBound.getField() != lowerBound.getField()\n        || (upperBound.getField() != null && !upperBound.getField().equals(\n            lowerBound.getField()))) {\n\n      throw new IllegalArgumentException(\n          \"lower and upper bounds should have the same field name!\");\n\n    }\n\n    allocate();\n    setLeaf(false);\n\n    add(lowerBound);\n    add(upperBound);\n\n  }\n\n","sourceOld":"  public ParametricRangeQueryNode(ParametricQueryNode lowerBound,\n      ParametricQueryNode upperBound) {\n\n    if (upperBound.getOperator() != CompareOperator.LE\n        && upperBound.getOperator() != CompareOperator.LT) {\n      throw new IllegalArgumentException(\"upper bound should have \"\n          + CompareOperator.LE + \" or \" + CompareOperator.LT);\n    }\n\n    if (lowerBound.getOperator() != CompareOperator.GE\n        && lowerBound.getOperator() != CompareOperator.GT) {\n      throw new IllegalArgumentException(\"lower bound should have \"\n          + CompareOperator.GE + \" or \" + CompareOperator.GT);\n    }\n\n    if (upperBound.getField() != lowerBound.getField()\n        || (upperBound.getField() != null && !upperBound.getField().equals(\n            lowerBound.getField()))) {\n\n      throw new IllegalArgumentException(\n          \"lower and upper bounds should have the same field name!\");\n\n    }\n\n    allocate();\n    setLeaf(false);\n\n    add(lowerBound);\n    add(upperBound);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/ParametricRangeQueryNode#ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ParametricRangeQueryNode#ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode).mjava","sourceNew":"  public ParametricRangeQueryNode(ParametricQueryNode lowerBound,\n      ParametricQueryNode upperBound) {\n\n    if (upperBound.getOperator() != ParametricQueryNode.CompareOperator.LE\n        && upperBound.getOperator() != ParametricQueryNode.CompareOperator.LT) {\n      throw new IllegalArgumentException(\"upper bound should have \"\n          + ParametricQueryNode.CompareOperator.LE + \" or \" + ParametricQueryNode.CompareOperator.LT);\n    }\n\n    if (lowerBound.getOperator() != ParametricQueryNode.CompareOperator.GE\n        && lowerBound.getOperator() != ParametricQueryNode.CompareOperator.GT) {\n      throw new IllegalArgumentException(\"lower bound should have \"\n          + ParametricQueryNode.CompareOperator.GE + \" or \" + ParametricQueryNode.CompareOperator.GT);\n    }\n\n    if (upperBound.getField() != lowerBound.getField()\n        || (upperBound.getField() != null && !upperBound.getField().equals(\n            lowerBound.getField()))) {\n\n      throw new IllegalArgumentException(\n          \"lower and upper bounds should have the same field name!\");\n\n    }\n\n    allocate();\n    setLeaf(false);\n\n    add(lowerBound);\n    add(upperBound);\n\n  }\n\n","sourceOld":"  public ParametricRangeQueryNode(ParametricQueryNode lowerBound,\n      ParametricQueryNode upperBound) {\n\n    if (upperBound.getOperator() != CompareOperator.LE\n        && upperBound.getOperator() != CompareOperator.LT) {\n      throw new IllegalArgumentException(\"upper bound should have \"\n          + CompareOperator.LE + \" or \" + CompareOperator.LT);\n    }\n\n    if (lowerBound.getOperator() != CompareOperator.GE\n        && lowerBound.getOperator() != CompareOperator.GT) {\n      throw new IllegalArgumentException(\"lower bound should have \"\n          + CompareOperator.GE + \" or \" + CompareOperator.GT);\n    }\n\n    if (upperBound.getField() != lowerBound.getField()\n        || (upperBound.getField() != null && !upperBound.getField().equals(\n            lowerBound.getField()))) {\n\n      throw new IllegalArgumentException(\n          \"lower and upper bounds should have the same field name!\");\n\n    }\n\n    allocate();\n    setLeaf(false);\n\n    add(lowerBound);\n    add(upperBound);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}