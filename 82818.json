{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart);\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs) {\n        arc.nextArc = arc.posArcsStart - arc.bytesPerArc * (arc.numArcs - 1);\n        fst.readNextRealArc(arc, in);\n        assert arc.isLast();\n        assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      arc.nextArc = arc.posArcsStart - arc.bytesPerArc * targetOffset;\n      fst.readNextRealArc(arc, in);\n      if (arc.label == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output);\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label);\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart - targetOffset * arc.bytesPerArc; arcOffset <= arc.posArcsStart; arcOffset += arc.bytesPerArc) {\n        // TODO: we can do better here by skipping missing arcs\n        arc.nextArc = arcOffset;\n        //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n        fst.readNextRealArc(arc, in);\n        if (arc.label < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label() < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs()) {\n        arc.nextArc(arc.posArcsStart() - arc.bytesPerArc() * (arc.numArcs() - 1));\n        fst.readNextRealArc(arc, in);\n        assert arc.isLast();\n        assert arc.label() < targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      arc.nextArc(arc.posArcsStart() - arc.bytesPerArc() * targetOffset);\n      fst.readNextRealArc(arc, in);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart() - targetOffset * arc.bytesPerArc(); arcOffset <= arc.posArcsStart(); arcOffset += arc.bytesPerArc()) {\n        // TODO: we can do better here by skipping missing arcs\n        arc.nextArc(arcOffset);\n        fst.readNextRealArc(arc, in);\n        if (arc.label() < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart);\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs) {\n        arc.nextArc = arc.posArcsStart - arc.bytesPerArc * (arc.numArcs - 1);\n        fst.readNextRealArc(arc, in);\n        assert arc.isLast();\n        assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      arc.nextArc = arc.posArcsStart - arc.bytesPerArc * targetOffset;\n      fst.readNextRealArc(arc, in);\n      if (arc.label == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output);\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label);\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart - targetOffset * arc.bytesPerArc; arcOffset <= arc.posArcsStart; arcOffset += arc.bytesPerArc) {\n        // TODO: we can do better here by skipping missing arcs\n        arc.nextArc = arcOffset;\n        //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n        fst.readNextRealArc(arc, in);\n        if (arc.label < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label() < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs()) {\n        fst.readArcAtPosition(arc, in, arc.posArcsStart() - arc.bytesPerArc() * (arc.numArcs() - 1));\n        assert arc.isLast();\n        assert arc.label() < targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      fst.readArcAtPosition(arc, in, arc.posArcsStart() - arc.bytesPerArc() * targetOffset);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart() - targetOffset * arc.bytesPerArc(); arcOffset <= arc.posArcsStart(); arcOffset += arc.bytesPerArc()) {\n        // TODO: we can do better here by skipping missing arcs\n        fst.readArcAtPosition(arc, in, arcOffset);\n        if (arc.label() < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label() < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs()) {\n        arc.nextArc(arc.posArcsStart() - arc.bytesPerArc() * (arc.numArcs() - 1));\n        fst.readNextRealArc(arc, in);\n        assert arc.isLast();\n        assert arc.label() < targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      arc.nextArc(arc.posArcsStart() - arc.bytesPerArc() * targetOffset);\n      fst.readNextRealArc(arc, in);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart() - targetOffset * arc.bytesPerArc(); arcOffset <= arc.posArcsStart(); arcOffset += arc.bytesPerArc()) {\n        // TODO: we can do better here by skipping missing arcs\n        arc.nextArc(arcOffset);\n        fst.readNextRealArc(arc, in);\n        if (arc.label() < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label() < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs()) {\n        fst.readArcAtPosition(arc, in, arc.posArcsStart() - arc.bytesPerArc() * (arc.numArcs() - 1));\n        assert arc.isLast();\n        assert arc.label() < targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      fst.readArcAtPosition(arc, in, arc.posArcsStart() - arc.bytesPerArc() * targetOffset);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart() - targetOffset * arc.bytesPerArc(); arcOffset <= arc.posArcsStart(); arcOffset += arc.bytesPerArc()) {\n        // TODO: we can do better here by skipping missing arcs\n        fst.readArcAtPosition(arc, in, arcOffset);\n        if (arc.label() < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart);\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs) {\n        arc.nextArc = arc.posArcsStart - arc.bytesPerArc * (arc.numArcs - 1);\n        fst.readNextRealArc(arc, in);\n        assert arc.isLast();\n        assert arc.label < targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      arc.nextArc = arc.posArcsStart - arc.bytesPerArc * targetOffset;\n      fst.readNextRealArc(arc, in);\n      if (arc.label == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output);\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label);\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart - targetOffset * arc.bytesPerArc; arcOffset <= arc.posArcsStart; arcOffset += arc.bytesPerArc) {\n        // TODO: we can do better here by skipping missing arcs\n        arc.nextArc = arcOffset;\n        //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n        fst.readNextRealArc(arc, in);\n        if (arc.label < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloorArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":null,"sourceOld":"  private FST.Arc<T> doSeekFloorArrayWithGaps(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int targetOffset = targetLabel - firstLabel;\n    if (targetOffset < 0) {\n      //System.out.println(\" before first\"); Very first arc is after our target TODO: if each\n      // arc could somehow read the arc just before, we can save this re-scan.  The ceil case\n      // doesn't need this because it reads the next arc instead:\n      while(true) {\n        // First, walk backwards until we find a first arc\n        // that's before our target label:\n        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);\n        if (arc.label() < targetLabel) {\n          // Then, scan forwards to the arc just before\n          // the targetLabel:\n          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {\n            fst.readNextArc(arc, fstReader);\n          }\n          pushLast();\n          return null;\n        }\n        upto--;\n        if (upto == 0) {\n          return null;\n        }\n        targetLabel = getTargetLabel();\n        arc = getArc(upto);\n      }\n    } else {\n      if (targetOffset >= arc.numArcs()) {\n        fst.readArcAtPosition(arc, in, arc.posArcsStart() - arc.bytesPerArc() * (arc.numArcs() - 1));\n        assert arc.isLast();\n        assert arc.label() < targetLabel: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n        pushLast();\n        return null;\n      }\n      fst.readArcAtPosition(arc, in, arc.posArcsStart() - arc.bytesPerArc() * targetOffset);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Scan backwards to find a floor arc that is not missing\n      for (long arcOffset = arc.posArcsStart() - targetOffset * arc.bytesPerArc(); arcOffset <= arc.posArcsStart(); arcOffset += arc.bytesPerArc()) {\n        // TODO: we can do better here by skipping missing arcs\n        fst.readArcAtPosition(arc, in, arcOffset);\n        if (arc.label() < targetLabel) {\n          assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;\n          pushLast();\n          return null;\n        }\n      }\n      assert false: \"arc.label=\" + arc.label() + \" vs targetLabel=\" + targetLabel;\n      return arc;               // unreachable\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"71d31a7d5773508492505519bb5230b87c8937ad":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}