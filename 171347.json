{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.rumCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n        UpdateHandler updater = req.getCore().getUpdateHandler();\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(updater, loader, req\n                .getSchema());\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.rumCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (debugLogger != null)\n              rsp.add(\"verbose-output\", debugLogger.output);\n            debugLogger = null;\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253","5101aff20e65c9a285c274627ec956eb5409d253","564a248c486a685e967252bbbd8d62b705bc85ba","6b4144476bf37b7500e29f9586d2fc733029b077"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"564a248c486a685e967252bbbd8d62b705bc85ba","date":1218304384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.rumCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, req\n                .getSchema());\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.rumCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (debugLogger != null)\n              rsp.add(\"verbose-output\", debugLogger.output);\n            debugLogger = null;\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.rumCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n        UpdateHandler updater = req.getCore().getUpdateHandler();\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(updater, loader, req\n                .getSchema());\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.rumCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (debugLogger != null)\n              rsp.add(\"verbose-output\", debugLogger.output);\n            debugLogger = null;\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253","5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10d7742d5e77046179aac47b48b3e254d1621b44","date":1219897795,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, req\n                .getSchema());\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (debugLogger != null)\n              rsp.add(\"verbose-output\", debugLogger.output);\n            debugLogger = null;\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.rumCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, req\n                .getSchema());\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.rumCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (debugLogger != null)\n              rsp.add(\"verbose-output\", debugLogger.output);\n            debugLogger = null;\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"157728c1f42b384dfc049157cc95adc767da3415","date":1224572739,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, req\n                .getSchema());\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (debugLogger != null)\n              rsp.add(\"verbose-output\", debugLogger.output);\n            debugLogger = null;\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":["6b4144476bf37b7500e29f9586d2fc733029b077"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b1ee536d334cbe10d86672b8fc5e095cc6ec180","date":1224744896,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.getStatus() != DataImporter.Status.IDLE) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.getStatus() == DataImporter.Status.IDLE ? \"idle\"\n            : \"busy\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b4144476bf37b7500e29f9586d2fc733029b077","date":1225431123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":["157728c1f42b384dfc049157cc95adc767da3415","4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db6dfac30d1553e9356900c2b76b768139483a62","date":1230619368,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw, variables);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw, variables);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f8c38ac26359dc90605e71c2bfd327e6c18362c","date":1233040912,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d","date":1237276209,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          importer.runAsync(requestParams, sw);\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4141d5af420007faa5e1e1064727d36ccbbbe921","date":1241293825,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872f5f5903b61078e3b9da4be3e9f55872f7f4c8","date":1263549223,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams params = req.getParams();\n    DataImporter.RequestParams requestParams = new DataImporter.RequestParams(getParamsMap(params));\n    String command = requestParams.command;\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams != null){\n      for (ContentStream stream : streams) {\n          requestParams.contentStream = stream;\n          break;\n      }\n    }\n    if (DataImporter.SHOW_CONF_CMD.equals(command)) {\n      // Modify incoming request params to add wt=raw\n      ModifiableSolrParams rawParams = new ModifiableSolrParams(req.getParams());\n      rawParams.set(CommonParams.WT, \"raw\");\n      req.setParams(rawParams);\n      String dataConfigFile = defaults.get(\"config\");\n      ContentStreamBase content = new ContentStreamBase.StringStream(SolrWriter\n              .getResourceAsString(req.getCore().getResourceLoader().openResource(\n              dataConfigFile)));\n      rsp.add(RawResponseWriter.CONTENT, content);\n      return;\n    }\n\n    rsp.add(\"initArgs\", initArgs);\n    String message = \"\";\n\n    if (command != null)\n      rsp.add(\"command\", command);\n\n    if (requestParams.debug && (importer == null || !importer.isBusy())) {\n      // Reload the data-config.xml\n      importer = null;\n      if (requestParams.dataConfig != null) {\n        try {\n          processConfiguration((NamedList) initArgs.get(\"defaults\"));\n          importer = new DataImporter(requestParams.dataConfig, req.getCore()\n                  , dataSources, coreScopeSession);\n        } catch (RuntimeException e) {\n          rsp.add(\"exception\", DebugLogger.getStacktraceString(e));\n          importer = null;\n          return;\n        }\n      } else {\n        inform(req.getCore());\n      }\n      message = DataImporter.MSG.CONFIG_RELOADED;\n    }\n\n    // If importer is still null\n    if (importer == null) {\n      rsp.add(\"status\", DataImporter.MSG.NO_INIT);\n      return;\n    }\n\n    if (command != null && DataImporter.ABORT_CMD.equals(command)) {\n      importer.runCmd(requestParams, null);\n    } else if (importer.isBusy()) {\n      message = DataImporter.MSG.CMD_RUNNING;\n    } else if (command != null) {\n      if (DataImporter.FULL_IMPORT_CMD.equals(command)\n              || DataImporter.DELTA_IMPORT_CMD.equals(command) ||\n              IMPORT_CMD.equals(command)) {\n\n        UpdateRequestProcessorChain processorChain =\n                req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n        UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n        SolrResourceLoader loader = req.getCore().getResourceLoader();\n        SolrWriter sw = getSolrWriter(processor, loader, requestParams);\n\n        if (requestParams.debug) {\n          if (debugEnabled) {\n            // Synchronous request for the debug mode\n            importer.runCmd(requestParams, sw);\n            rsp.add(\"mode\", \"debug\");\n            rsp.add(\"documents\", debugDocuments);\n            if (sw.debugLogger != null)\n              rsp.add(\"verbose-output\", sw.debugLogger.output);\n            debugDocuments = null;\n          } else {\n            message = DataImporter.MSG.DEBUG_NOT_ENABLED;\n          }\n        } else {\n          // Asynchronous request for normal mode\n          if(requestParams.contentStream == null && !requestParams.syncMode){\n            importer.runAsync(requestParams, sw);\n          } else {\n              importer.runCmd(requestParams, sw);\n          }\n        }\n      } else if (DataImporter.RELOAD_CONF_CMD.equals(command)) {\n        importer = null;\n        inform(req.getCore());\n        message = DataImporter.MSG.CONFIG_RELOADED;\n      }\n    }\n    rsp.add(\"status\", importer.isBusy() ? \"busy\" : \"idle\");\n    rsp.add(\"importResponse\", message);\n    rsp.add(\"statusMessages\", importer.getStatusMessages());\n\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"872f5f5903b61078e3b9da4be3e9f55872f7f4c8":["4141d5af420007faa5e1e1064727d36ccbbbe921"],"b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d":["4f8c38ac26359dc90605e71c2bfd327e6c18362c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4141d5af420007faa5e1e1064727d36ccbbbe921":["b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d"],"564a248c486a685e967252bbbd8d62b705bc85ba":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"6b4144476bf37b7500e29f9586d2fc733029b077":["1b1ee536d334cbe10d86672b8fc5e095cc6ec180"],"10d7742d5e77046179aac47b48b3e254d1621b44":["564a248c486a685e967252bbbd8d62b705bc85ba"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1b1ee536d334cbe10d86672b8fc5e095cc6ec180":["157728c1f42b384dfc049157cc95adc767da3415"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f8c38ac26359dc90605e71c2bfd327e6c18362c":["db6dfac30d1553e9356900c2b76b768139483a62"],"ad94625fb8d088209f46650c8097196fec67f00c":["872f5f5903b61078e3b9da4be3e9f55872f7f4c8"],"157728c1f42b384dfc049157cc95adc767da3415":["10d7742d5e77046179aac47b48b3e254d1621b44"],"db6dfac30d1553e9356900c2b76b768139483a62":["6b4144476bf37b7500e29f9586d2fc733029b077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"872f5f5903b61078e3b9da4be3e9f55872f7f4c8":["ad94625fb8d088209f46650c8097196fec67f00c"],"b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d":["4141d5af420007faa5e1e1064727d36ccbbbe921"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4141d5af420007faa5e1e1064727d36ccbbbe921":["872f5f5903b61078e3b9da4be3e9f55872f7f4c8"],"564a248c486a685e967252bbbd8d62b705bc85ba":["10d7742d5e77046179aac47b48b3e254d1621b44"],"6b4144476bf37b7500e29f9586d2fc733029b077":["db6dfac30d1553e9356900c2b76b768139483a62"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["564a248c486a685e967252bbbd8d62b705bc85ba"],"10d7742d5e77046179aac47b48b3e254d1621b44":["157728c1f42b384dfc049157cc95adc767da3415"],"1b1ee536d334cbe10d86672b8fc5e095cc6ec180":["6b4144476bf37b7500e29f9586d2fc733029b077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4f8c38ac26359dc90605e71c2bfd327e6c18362c":["b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"157728c1f42b384dfc049157cc95adc767da3415":["1b1ee536d334cbe10d86672b8fc5e095cc6ec180"],"db6dfac30d1553e9356900c2b76b768139483a62":["4f8c38ac26359dc90605e71c2bfd327e6c18362c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}