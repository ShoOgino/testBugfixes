{"path":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readEntity().mjava","commits":[{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readEntity().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readEntity().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["bd69280df0902763e47cb14745388ee17a2fb602"],"bd69280df0902763e47cb14745388ee17a2fb602":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd69280df0902763e47cb14745388ee17a2fb602"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bd69280df0902763e47cb14745388ee17a2fb602":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}