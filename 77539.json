{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","commits":[{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"      // Let PBF decodes metadata from long[] and byte[]\n      private void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state);\n          decoded = true;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3357163a1f25cd432c44f7d5c0b48739a69f8","date":1374593446,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      // Let PBF decode metadata from long[] and byte[]\n      private void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state);\n          decoded = true;\n        }\n      }\n\n","sourceOld":"      // Let PBF decodes metadata from long[] and byte[]\n      private void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state);\n          decoded = true;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      // Let PBF decode metadata from long[] and byte[]\n      @Override\n      void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state);\n          decoded = true;\n        }\n      }\n\n","sourceOld":"      // Let PBF decode metadata from long[] and byte[]\n      private void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state);\n          decoded = true;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db8535b557900d292554ea8663e48d19733977e0","date":1376915424,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      // Let PBF decode metadata from long[] and byte[]\n      @Override\n      void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state, true);\n          decoded = true;\n        }\n      }\n\n","sourceOld":"      // Let PBF decode metadata from long[] and byte[]\n      @Override\n      void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state);\n          decoded = true;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#decodeMetaData().mjava","sourceNew":"      // Let PBF decode metadata from long[] and byte[]\n      @Override\n      void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state, true);\n          decoded = true;\n        }\n      }\n\n","sourceOld":"      // Let PBF decode metadata from long[] and byte[]\n      @Override\n      void decodeMetaData() throws IOException {\n        if (!decoded && !seekPending) {\n          if (meta.bytes != null) {\n            bytesReader.reset(meta.bytes, 0, meta.bytes.length);\n          }\n          postingsReader.decodeTerm(meta.longs, bytesReader, fieldInfo, state, true);\n          decoded = true;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db8535b557900d292554ea8663e48d19733977e0":["050ba1ba249733cac50c2612418b7179591d2df9"],"b8e3357163a1f25cd432c44f7d5c0b48739a69f8":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["db8535b557900d292554ea8663e48d19733977e0"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["b8e3357163a1f25cd432c44f7d5c0b48739a69f8"]},"commit2Childs":{"db8535b557900d292554ea8663e48d19733977e0":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"b8e3357163a1f25cd432c44f7d5c0b48739a69f8":["050ba1ba249733cac50c2612418b7179591d2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a509b6df968a74c38a0528f5bf6ea26f503b756","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["b8e3357163a1f25cd432c44f7d5c0b48739a69f8"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"050ba1ba249733cac50c2612418b7179591d2df9":["db8535b557900d292554ea8663e48d19733977e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}