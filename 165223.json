{"path":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#checkParams().mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#checkParams().mjava","pathOld":"/dev/null","sourceNew":"  // Insure that ll required parameters are there and the doc colection exists.\n  private DocCollection checkParams() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    return dc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#checkParams().mjava","pathOld":"/dev/null","sourceNew":"  // Insure that ll required parameters are there and the doc colection exists.\n  private DocCollection checkParams() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    return dc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}