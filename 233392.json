{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      PackageUtils.printGreen(plugin.verifyCommand);\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      PackageUtils.printGreen(plugin.verifyCommand);\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      PackageUtils.printGreen(plugin.verifyCommand);\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf95e850bc9618b5f30fa8cd94976c14733961d","date":1576732114,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        for (String collection: collections) {\n          Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n\n          Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        for (String collection: collections) {\n          Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n\n          Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      for (String collection: collections) {\n        Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n        Command cmd = plugin.verifyCommand;\n\n        Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n        String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n        PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n        if (\"GET\".equalsIgnoreCase(cmd.method)) {\n          String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n          PackageUtils.printGreen(response);\n          String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n              .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n          String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n          if (!expectedValue.equals(actualValue)) {\n            PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n            success = false;\n          }\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a688687cbff91a8f44c95d31697c3ba8a47c8c25","date":1593512440,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   * \n   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type)) {\n          if (!shouldDeployClusterPlugins) continue; // Plugins of type \"cluster\"\n          Map<String, String> overridesMap = getParameterOverrides(overrides);\n          Map<String, String> systemParams = Map.of(\"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for cluster level plugin\");\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);\n            PackageUtils.printGreen(\"Actual: \" + actualValue+\", expected: \" + expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }          \n        } else {\n          // Plugins of type \"collection\"\n          for (String collection: collections) {\n            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n  \n            Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n  \n            if (\"GET\".equalsIgnoreCase(cmd.method)) {\n              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n              PackageUtils.printGreen(response);\n              String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                  .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n              if (!expectedValue.equals(actualValue)) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n            }\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        for (String collection: collections) {\n          Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n\n          Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf95e850bc9618b5f30fa8cd94976c14733961d":["62d55718cd611235e975fa73a6bdf263fbd58859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","3cf95e850bc9618b5f30fa8cd94976c14733961d"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["3cf95e850bc9618b5f30fa8cd94976c14733961d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"]},"commit2Childs":{"3cf95e850bc9618b5f30fa8cd94976c14733961d":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"62d55718cd611235e975fa73a6bdf263fbd58859":["3cf95e850bc9618b5f30fa8cd94976c14733961d","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}