{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","commits":[{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"694538e5ec59774a19c025ae093580d6462c8b46","date":1362060117,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","sourceNew":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","sourceOld":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#copyFullPath(char[],int,char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","sourceNew":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","sourceOld":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"694538e5ec59774a19c025ae093580d6462c8b46":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["694538e5ec59774a19c025ae093580d6462c8b46","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["694538e5ec59774a19c025ae093580d6462c8b46"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","694538e5ec59774a19c025ae093580d6462c8b46"],"694538e5ec59774a19c025ae093580d6462c8b46":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}