{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#topoSortStates(Automaton).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#topoSortStates(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private static int[] topoSortStates(Automaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i = 0; i < count; i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#topoSortStates(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private static int[] topoSortStates(Automaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i = 0; i < count; i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#topoSortStates(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#topoSortStates(Automaton).mjava","sourceNew":"  private static int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","sourceOld":"  private static int[] topoSortStates(Automaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i = 0; i < count; i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"363efd5f833e8e194f8c9b8a3199eca1bc684c38","date":1435941197,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#topoSortStates(Automaton).mjava","sourceNew":null,"sourceOld":"  private static int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"363efd5f833e8e194f8c9b8a3199eca1bc684c38":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["363efd5f833e8e194f8c9b8a3199eca1bc684c38"]},"commit2Childs":{"363efd5f833e8e194f8c9b8a3199eca1bc684c38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["363efd5f833e8e194f8c9b8a3199eca1bc684c38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}