{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (int i = 0; i < texts.length; i++) {\n          String text = texts[i];\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (int i = 0; i < texts.length; i++) {\n          String text = texts[i];\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (int i = 0; i < texts.length; i++) {\n          String text = texts[i];\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (int i = 0; i < texts.length; i++) {\n          String text = texts[i];\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (int i = 0; i < texts.length; i++) {\n          String text = texts[i];\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"AnInvalidQueryWhichShouldYieldNoResults\");\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNoFragments().mjava","sourceNew":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testNoFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(new TermQuery(new Term(FIELD_NAME, \"aninvalidquerywhichshouldyieldnoresults\")));\n\n        for (String text : texts) {\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME,\n              HighlighterTest.this);\n          String result = highlighter.getBestFragment(tokenStream, text);\n          assertNull(\"The highlight result should be null for text with no query terms\", result);\n        }\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cf7efd82433f3f64684711c16edfd149db6af111":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["4e8cc373c801e54cec75daf9f52792cb4b17f536","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["cf7efd82433f3f64684711c16edfd149db6af111","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}