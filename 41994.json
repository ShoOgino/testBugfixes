{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircleTest#testCircleBounds().mjava","sourceNew":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    Bounds b;\n\n\n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    Bounds b;\n\n\n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","sourceNew":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // Twelfth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = new GeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    Bounds b;\n\n\n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = c.getBounds(null);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8f71af177fad4bbfdf462d318247e573faac27f","date":1441729530,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","sourceNew":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = new GeoCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = new GeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // Twelfth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = new GeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","sourceNew":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = new GeoStandardCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = new GeoStandardCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = new GeoCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = new GeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = new GeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = new GeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = new GeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","bugFix":["d8f71af177fad4bbfdf462d318247e573faac27f","f9f97ca977ad649f14b4f60a888adef2edd7a64e","f64b7098768253180859cd8faeae6b1a185b06ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae6b82f3eeb00bd6696223fc1aaf31128810162a","date":1441977719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","sourceNew":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = new GeoStandardCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = new GeoStandardCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = new GeoStandardCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleBounds().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleBounds().mjava","sourceNew":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCircleBounds() {\n    GeoCircle c;\n    LatLonBounds b;\n    XYZBounds xyzb;\n    GeoArea area;\n    GeoPoint p1;\n    GeoPoint p2;\n    int relationship;\n\n    // ...\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, -0.005931145568901605, -0.001942031539653079, 1.2991918568260272E-4);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, 1.001098377143621, 1.001100011578687, -0.00207467080358696, -0.0018136665346280983, -0.006067808248760161, -0.005807683665759485);\n    p1 = new GeoPoint(PlanetModel.WGS84, -0.00591253844632244, -0.0020069187259065093);\n    p2 = new GeoPoint(1.001099185736782, -0.0020091272069679327, -0.005919118245803968);\n    assertTrue(c.isWithin(p1));\n    assertTrue(area.isWithin(p1));\n    relationship = area.getRelationship(c);\n    assertTrue(relationship != GeoArea.DISJOINT);\n\n    // Twelfth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.00824379317765984,-0.0011677469001838581,0.0011530035396910402);\n    p1 = new GeoPoint(PlanetModel.WGS84,-0.006505092992723671,0.007654282718327381);\n    p2 = new GeoPoint(1.0010681673665647,0.007662608264336381,-0.006512324005914593);\n    assertTrue(!c.isWithin(p1));\n    assertTrue(!c.isWithin(p2));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.OVERLAPS || relationship == GeoArea.WITHIN);\n    // Point is actually outside the bounds, and outside the shape\n    assertTrue(!area.isWithin(p1));\n    // Approximate point the same\n    assertTrue(!area.isWithin(p2));\n    \n    // Eleventh BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-0.004431288600558495,-0.003687846671278374,1.704543429364245E-8);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Tenth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.0018829770647349636,-0.001969499061382591,1.3045439293158305E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Ninth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-4.211990380885122E-5,-0.0022958453508173044,1.4318475623498535E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n    \n    // Eighth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,0.005321278689117842,-0.00216937368755372,1.5306034422500785E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Seventh BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE,-0.0021627146783861745, -0.0017298167021592304,2.0818312293195752E-4);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, \n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    //System.err.println(area);\n    relationship = area.getRelationship(c);\n    assertTrue(GeoArea.WITHIN == relationship || GeoArea.OVERLAPS == relationship);\n\n    // Sixth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84,-0.006450320645814321,0.004660694205115142,0.00489710732634323);\n    //xyzb = new XYZBounds();\n    //c.getBounds(xyzb);\n    //System.err.println(\"xmin=\"+xyzb.getMinimumX()+\", xmax=\"+xyzb.getMaximumX()+\",ymin=\"+xyzb.getMinimumY()+\", ymax=\"+xyzb.getMaximumY()+\",zmin=\"+xyzb.getMinimumZ()+\", zmax=\"+xyzb.getMaximumZ());\n    //xmin=1.0010356621420726, xmax=1.0011141249179447,ymin=-2.5326643901354566E-4, ymax=0.009584741915757169,zmin=-0.011359874956269283, zmax=-0.0015549504447452225\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,1.0010822580620098,1.0010945779732867,0.007079167343247293,0.007541006774427837,-0.0021855011220022575,-0.001896122718181518);\n    assertTrue(GeoArea.CONTAINS != area.getRelationship(c));\n    /*\n    p1 = new GeoPoint(1.0010893045436076,0.007380935180644008,-0.002140671370616495);\n    // This has a different bounding box, so we can't use it.\n    //p2 = new GeoPoint(PlanetModel.WGS84,-0.002164069780096702, 0.007505617500830066);\n    p2 = new GeoPoint(PlanetModel.WGS84,p1.getLatitude(),p1.getLongitude());\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(!c.isWithin(p2));\n    assertTrue(!area.isWithin(p2));\n    assertTrue(!c.isWithin(p1));\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1)); // This fails\n    assertTrue(!area.isWithin(p1)); // This fails\n    */\n    \n    // Fifth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.004282454525970269, -1.6739831367422277E-4, 1.959639723134033E-6);\n    assertTrue(c.isWithin(c.getEdgePoints()[0]));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Fourth BKD discovered failure\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.0048795517261255, 0.004053904306995974, 5.93699764258874E-6);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    assertTrue(GeoArea.WITHIN == area.getRelationship(c) || GeoArea.OVERLAPS == area.getRelationship(c));\n    \n    // Yet another test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, 0.006229478708446979, 0.005570196723795424, 3.840276763694387E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    p1 = new GeoPoint(PlanetModel.WGS84, 0.006224927111830945, 0.005597367237251763);\n    p2 = new GeoPoint(1.0010836083810235, 0.005603490759433942, 0.006231850560862502);\n    assertTrue(PlanetModel.WGS84.pointOnSurface(p1));\n    //assertTrue(PlanetModel.WGS84.pointOnSurface(p2));\n    assertTrue(c.isWithin(p1));\n    assertTrue(c.isWithin(p2));\n    assertTrue(area.isWithin(p1));\n    assertTrue(area.isWithin(p2));\n    \n    // Another test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.005955031040627789, -0.0029274772647399153, 1.601488279374338E-5);\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    area = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE,\n      xyzb.getMinimumX(), xyzb.getMaximumX(), xyzb.getMinimumY(), xyzb.getMaximumY(), xyzb.getMinimumZ(), xyzb.getMaximumZ());\n    \n    relationship = area.getRelationship(c);\n    assertTrue(relationship == GeoArea.WITHIN || relationship == GeoArea.OVERLAPS);\n    \n    // Test case from BKD\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.765816119338, 0.991848766844, 0.8153163226330487);\n    p1 = new GeoPoint(0.7692262265236023, -0.055089298115534646, -0.6365973465711254);\n    assertTrue(c.isWithin(p1));\n    xyzb = new XYZBounds();\n    c.getBounds(xyzb);\n    assertTrue(p1.x >= xyzb.getMinimumX() && p1.x <= xyzb.getMaximumX());\n    assertTrue(p1.y >= xyzb.getMinimumY() && p1.y <= xyzb.getMaximumY());\n    assertTrue(p1.z >= xyzb.getMinimumZ() && p1.z <= xyzb.getMaximumZ());\n    \n    // Vertical circle cases\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.6, b.getLeftLongitude(), 0.000001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.4, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.6, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(-0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.000001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.000001);\n    assertEquals(-0.1, b.getMinLatitude(), 0.000001);\n    assertEquals(0.1, b.getMaxLatitude(), 0.000001);\n    // Horizontal circle cases\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertTrue(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.1, b.getMinLatitude(), 0.000001);\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertTrue(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertTrue(b.checkNoBottomLatitudeBound());\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getMaxLatitude(), 0.000001);\n\n    // Now do a somewhat tilted plane, facing different directions.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, 0.0, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.5 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.5 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Slightly tilted, PI/4 direction.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.01, Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, -0.01, -Math.PI * 0.25, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.09, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.11, b.getMinLatitude(), 0.000001);\n    assertEquals(-Math.PI * 0.25 - 0.1, b.getLeftLongitude(), 0.00001);\n    assertEquals(-Math.PI * 0.25 + 0.1, b.getRightLongitude(), 0.00001);\n\n    // Now do a somewhat tilted plane.\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.01, -0.5, 0.1);\n    b = new LatLonBounds();\n    c.getBounds(b);\n    assertFalse(b.checkNoLongitudeBound());\n    assertFalse(b.checkNoTopLatitudeBound());\n    assertFalse(b.checkNoBottomLatitudeBound());\n    assertEquals(0.11, b.getMaxLatitude(), 0.000001);\n    assertEquals(-0.09, b.getMinLatitude(), 0.000001);\n    assertEquals(-0.6, b.getLeftLongitude(), 0.00001);\n    assertEquals(-0.4, b.getRightLongitude(), 0.00001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8f71af177fad4bbfdf462d318247e573faac27f":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["d8f71af177fad4bbfdf462d318247e573faac27f"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["ae6b82f3eeb00bd6696223fc1aaf31128810162a"],"ae6b82f3eeb00bd6696223fc1aaf31128810162a":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"d8f71af177fad4bbfdf462d318247e573faac27f":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"f64b7098768253180859cd8faeae6b1a185b06ed":["d8f71af177fad4bbfdf462d318247e573faac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["f64b7098768253180859cd8faeae6b1a185b06ed"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["ae6b82f3eeb00bd6696223fc1aaf31128810162a"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae6b82f3eeb00bd6696223fc1aaf31128810162a":["b4e444678504caf66a8060b1d514383aa4feac0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}