{"path":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.BinaryField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new Field(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.BinaryField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BinaryField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object val) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    return new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object val, float boost) {\n    if (val == null) return null;\n    if (!field.stored()) {\n      log.trace(\"Ignoring unstored binary field: \" + field);\n      return null;\n    }\n    byte[] buf = null;\n    int offset = 0, len = 0;\n    if (val instanceof byte[]) {\n      buf = (byte[]) val;\n      len = buf.length;\n    } else if (val instanceof ByteBuffer && ((ByteBuffer)val).hasArray()) {\n      ByteBuffer byteBuf = (ByteBuffer) val;\n      buf = byteBuf.array();\n      offset = byteBuf.position();\n      len = byteBuf.limit() - byteBuf.position();\n    } else {\n      String strVal = val.toString();\n      //the string has to be a base64 encoded string\n      buf = Base64.base64ToByteArray(strVal);\n      offset = 0;\n      len = buf.length;\n    }\n\n    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["fa0f44f887719e97183771e977cfc4bfb485b766"],"1d028314cced5858683a1bb4741423d0f934257b":["fa0f44f887719e97183771e977cfc4bfb485b766","409324b31a1419d7c05a38211168cf317e39be77"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fa0f44f887719e97183771e977cfc4bfb485b766":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fa0f44f887719e97183771e977cfc4bfb485b766"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}