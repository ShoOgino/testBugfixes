{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","commits":[{"id":"1e658df03b60f618dc6303e3d124a212cd449e2a","date":1495820495,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5049dd51fddadd3fd00de298716d1cd0fdee5bf8","date":1496675957,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Histogram evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","sourceOld":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Histogram evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72dc84475e6ad3fd8951c733b6e17916c03cd574","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","sourceOld":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Histogram evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","sourceOld":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Histogram evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40f06aec8ac912d126c71c7e9d6065ed70aa9c65","date":1501530021,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Tuple> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Tuple> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(new Tuple(map));\n    }\n\n    return binList;\n  }\n\n","sourceOld":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Tuple> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Tuple> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(new Tuple(map));\n    }\n\n    return binList;\n  }\n\n","sourceOld":"  public List<Map> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Map> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(map);\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Tuple> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Tuple> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(new Tuple(map));\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Tuple> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Tuple> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(new Tuple(map));\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Tuple> evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    int bins = 10;\n    if(subEvaluators.size() == 2) {\n      StreamEvaluator binsEval = subEvaluators.get(1);\n      Number binsNum = (Number) binsEval.evaluate(tuple);\n      bins = binsNum.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    empiricalDistribution.load(column1);\n\n    List<Tuple> binList = new ArrayList();\n\n    List<SummaryStatistics> summaries = empiricalDistribution.getBinStats();\n    for(SummaryStatistics statisticalSummary : summaries) {\n      Map map = new HashMap();\n      map.put(\"max\", statisticalSummary.getMax());\n      map.put(\"mean\", statisticalSummary.getMean());\n      map.put(\"min\", statisticalSummary.getMin());\n      map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n      map.put(\"sum\", statisticalSummary.getSum());\n      map.put(\"N\", statisticalSummary.getN());\n      map.put(\"var\", statisticalSummary.getVariance());\n      binList.add(new Tuple(map));\n    }\n\n    return binList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e658df03b60f618dc6303e3d124a212cd449e2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5049dd51fddadd3fd00de298716d1cd0fdee5bf8"],"5049dd51fddadd3fd00de298716d1cd0fdee5bf8":["1e658df03b60f618dc6303e3d124a212cd449e2a"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["5049dd51fddadd3fd00de298716d1cd0fdee5bf8"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e658df03b60f618dc6303e3d124a212cd449e2a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"1e658df03b60f618dc6303e3d124a212cd449e2a":["5049dd51fddadd3fd00de298716d1cd0fdee5bf8","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"5049dd51fddadd3fd00de298716d1cd0fdee5bf8":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e658df03b60f618dc6303e3d124a212cd449e2a","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}