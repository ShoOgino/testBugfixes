{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","commits":[{"id":"afb7b7dcd19603efa75a58b319f50caaf25d78d0","date":1462545467,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    Map<String,String> params = new HashMap<>();\n    params.put(\"expr\",\"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    params.put(CommonParams.QT, \"/stream\");\n    params.put(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    params.put(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    Map<String,String> params = new HashMap<>();\n    params.put(\"expr\",\"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    params.put(CommonParams.QT, \"/stream\");\n    params.put(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    params.put(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    Map<String,String> params = new HashMap<>();\n    params.put(\"expr\",\"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    params.put(CommonParams.QT, \"/stream\");\n    params.put(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    params.put(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    Map<String,String> params = new HashMap<>();\n    params.put(\"expr\",\"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    params.put(CommonParams.QT, \"/stream\");\n    params.put(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    params.put(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    Map<String,String> params = new HashMap<>();\n    params.put(\"expr\",\"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    params.put(CommonParams.QT, \"/stream\");\n    params.put(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    params.put(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    params.put(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    params.put(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, params);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n  }\n\n","bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c9480bf8e52feb02af9b7fa13bf50929da7900b","date":1477527580,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4,3,1,0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTION;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTION + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParameterSubstitution().mjava","sourceNew":"  @Test\n  public void testParameterSubstitution() throws Exception {\n    String oldVal = System.getProperty(\"StreamingExpressionMacros\", \"false\");\n    System.setProperty(\"StreamingExpressionMacros\", \"true\");\n    try {\n      new UpdateRequest()\n          .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n          .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n          .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n          .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n      List<Tuple> tuples;\n      TupleStream stream;\n\n      // Basic test\n      ModifiableSolrParams sParams = new ModifiableSolrParams();\n      sParams.set(\"expr\", \"merge(\"\n          + \"${q1},\"\n          + \"${q2},\"\n          + \"on=${mySort})\");\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"q1\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n      sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n      sParams.set(\"mySort\", \"a_f asc\");\n      stream = new SolrStream(url, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals(4, tuples.size());\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      sParams.set(\"mySort\", \"a_f desc\");\n      stream = new SolrStream(url, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals(4, tuples.size());\n      assertOrder(tuples, 4, 3, 1, 0);\n\n      // Basic w/ multi comp\n      sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n      sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n      stream = new SolrStream(url, sParams);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      System.setProperty(\"StreamingExpressionMacros\", oldVal);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParameterSubstitution() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    List<Tuple> tuples;\n    TupleStream stream;\n\n    // Basic test\n    ModifiableSolrParams sParams = new ModifiableSolrParams();\n    sParams.set(\"expr\", \"merge(\"\n        + \"${q1},\"\n        + \"${q2},\"\n        + \"on=${mySort})\");\n    sParams.set(CommonParams.QT, \"/stream\");\n    sParams.set(\"q1\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"a_f asc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n    // Basic test desc\n    sParams.set(\"mySort\", \"a_f desc\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 4, 3, 1, 0);\n\n    // Basic w/ multi comp\n    sParams.set(\"q2\", \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=${mySort})\");\n    sParams.set(\"mySort\", \"\\\"a_f asc, a_s asc\\\"\");\n    stream = new SolrStream(url, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n  }\n\n","bugFix":["5c9480bf8e52feb02af9b7fa13bf50929da7900b","afb7b7dcd19603efa75a58b319f50caaf25d78d0","8c969f15cd04d31e520319c619a445ae21f02d72","915201312eef398482b3dffe8a297e1809f3b29a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"915201312eef398482b3dffe8a297e1809f3b29a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"afb7b7dcd19603efa75a58b319f50caaf25d78d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["915201312eef398482b3dffe8a297e1809f3b29a"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["afb7b7dcd19603efa75a58b319f50caaf25d78d0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","915201312eef398482b3dffe8a297e1809f3b29a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["afb7b7dcd19603efa75a58b319f50caaf25d78d0","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"a0370d6fb5289875090a50a9d0887ee584fed440":["8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","afb7b7dcd19603efa75a58b319f50caaf25d78d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0370d6fb5289875090a50a9d0887ee584fed440"]},"commit2Childs":{"915201312eef398482b3dffe8a297e1809f3b29a":["5c9480bf8e52feb02af9b7fa13bf50929da7900b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"afb7b7dcd19603efa75a58b319f50caaf25d78d0":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","8c969f15cd04d31e520319c619a445ae21f02d72"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["915201312eef398482b3dffe8a297e1809f3b29a"],"a0370d6fb5289875090a50a9d0887ee584fed440":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb7b7dcd19603efa75a58b319f50caaf25d78d0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["a0370d6fb5289875090a50a9d0887ee584fed440","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}