{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#createLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","commits":[{"id":"1e7090fb56105afb6515b6506724359c32ec7639","date":1521211434,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#createLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a linear crossing edge iterator with the appropriate cutoff planes given the geometry.\n   */\n  private CountingEdgeIterator createLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n    // If thePoint and testPoint are parallel, we won't be able to determine sidedness of the bounding planes.  So detect that case, and build the iterator differently if we find it.\n    // This didn't work; not sure why not:\n    //if (testPoint.isParallel(thePointX, thePointY, thePointZ)) {\n    //  return new FullLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    //}\n    //return new SectorLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    //\n    try {\n      return new SectorLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    } catch (IllegalArgumentException e) {\n      // Assume we failed because we could not construct bounding planes, so do it another way.\n      return new FullLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039615f2ceafe5881c61222281f45a0631b90174","date":1524725949,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#createLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#createLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"  /** Create a linear crossing edge iterator with the appropriate cutoff planes given the geometry.\n   */\n  private CountingEdgeIterator createLinearCrossingEdgeIterator(final GeoPoint testPoint,\n    final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n    // If thePoint and testPoint are parallel, we won't be able to determine sidedness of the bounding planes.  So detect that case, and build the iterator differently if we find it.\n    // This didn't work; not sure why not:\n    //if (testPoint.isParallel(thePointX, thePointY, thePointZ)) {\n    //  return new FullLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    //}\n    //return new SectorLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    //\n    try {\n      return new SectorLinearCrossingEdgeIterator(testPoint, plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    } catch (IllegalArgumentException e) {\n      // Assume we failed because we could not construct bounding planes, so do it another way.\n      return new FullLinearCrossingEdgeIterator(testPoint, plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    }\n  }\n\n","sourceOld":"  /** Create a linear crossing edge iterator with the appropriate cutoff planes given the geometry.\n   */\n  private CountingEdgeIterator createLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n    // If thePoint and testPoint are parallel, we won't be able to determine sidedness of the bounding planes.  So detect that case, and build the iterator differently if we find it.\n    // This didn't work; not sure why not:\n    //if (testPoint.isParallel(thePointX, thePointY, thePointZ)) {\n    //  return new FullLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    //}\n    //return new SectorLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    //\n    try {\n      return new SectorLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    } catch (IllegalArgumentException e) {\n      // Assume we failed because we could not construct bounding planes, so do it another way.\n      return new FullLinearCrossingEdgeIterator(plane, abovePlane, belowPlane, thePointX, thePointY, thePointZ);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e7090fb56105afb6515b6506724359c32ec7639":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039615f2ceafe5881c61222281f45a0631b90174":["1e7090fb56105afb6515b6506724359c32ec7639"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["039615f2ceafe5881c61222281f45a0631b90174"]},"commit2Childs":{"1e7090fb56105afb6515b6506724359c32ec7639":["039615f2ceafe5881c61222281f45a0631b90174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e7090fb56105afb6515b6506724359c32ec7639"],"039615f2ceafe5881c61222281f45a0631b90174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}