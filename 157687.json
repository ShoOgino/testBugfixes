{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533890d1266aa8169162ec556395d0c5d0377566","date":1337173867,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n      throws IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n      throws IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52ea8b7f80d4a0600efc9765dc896387008ebd4","date":1340109038,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n      throws IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n      throws IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath cp) throws IOException {\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (cp.length > 1) {\n      CategoryPath parentPath = cp.subpath(cp.length - 1);\n      parent = findCategory(parentPath);\n      if (parent < 0) {\n        parent = internalAddCategory(parentPath);\n      }\n    } else if (cp.length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(cp, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n      throws IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n      throws IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b52ea8b7f80d4a0600efc9765dc896387008ebd4","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["533890d1266aa8169162ec556395d0c5d0377566"],"533890d1266aa8169162ec556395d0c5d0377566":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","533890d1266aa8169162ec556395d0c5d0377566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["533890d1266aa8169162ec556395d0c5d0377566","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"533890d1266aa8169162ec556395d0c5d0377566":["b52ea8b7f80d4a0600efc9765dc896387008ebd4","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}