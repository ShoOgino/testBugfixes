{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","commits":[{"id":"2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b","date":1478629715,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"/dev/null","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"/dev/null","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ee9ee847c92f9e0395e1ff6655ec464e0a57a2","date":1485828282,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      if (asyncReqId.isPresent()) {\n        backup.setAsyncId(asyncReqId.get());\n      }\n      CollectionAdminResponse resp = backup.process(solrClient);\n      Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      CLIO.out(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      System.out.println(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#exportSnapshot(String,String,String,Optional[String],Optional[String]).mjava","sourceNew":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection {}\", collectionName, e);\n      CLIO.out(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","sourceOld":"  public void exportSnapshot(String collectionName, String snapshotName, String destPath, Optional<String> backupRepo,\n      Optional<String> asyncReqId) {\n    try {\n      CollectionAdminRequest.Backup backup = new CollectionAdminRequest.Backup(collectionName, snapshotName);\n      backup.setCommitName(snapshotName);\n      backup.setIndexBackupStrategy(CollectionAdminParams.COPY_FILES_STRATEGY);\n      backup.setLocation(destPath);\n      if (backupRepo.isPresent()) {\n        backup.setRepositoryName(backupRepo.get());\n      }\n      // if asyncId is null, processAsync will block and throw an Exception with any error\n      backup.processAsync(asyncReqId.orElse(null), solrClient);\n    } catch (Exception e) {\n      log.error(\"Failed to backup collection meta-data for collection \" + collectionName, e);\n      CLIO.out(\"Failed to backup collection meta-data for collection \" + collectionName\n          + \" due to following error : \" + e.getLocalizedMessage());\n      System.exit(1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["23ee9ee847c92f9e0395e1ff6655ec464e0a57a2","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["23ee9ee847c92f9e0395e1ff6655ec464e0a57a2"],"140be51d03394488536f4aacedace29f9b318347":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["199dfa410f1fdbfd3294106b04096cce5ed34b21","23ee9ee847c92f9e0395e1ff6655ec464e0a57a2"],"2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b"],"23ee9ee847c92f9e0395e1ff6655ec464e0a57a2":["2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b"],"3217321f3e1d7922898c6c633d17acfa840d6875":["23ee9ee847c92f9e0395e1ff6655ec464e0a57a2","ac97ea104d893f16aab430d9904473bc1f233f3c"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["3217321f3e1d7922898c6c633d17acfa840d6875"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["23ee9ee847c92f9e0395e1ff6655ec464e0a57a2","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21","23ee9ee847c92f9e0395e1ff6655ec464e0a57a2"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"23ee9ee847c92f9e0395e1ff6655ec464e0a57a2":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"3217321f3e1d7922898c6c633d17acfa840d6875":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["140be51d03394488536f4aacedace29f9b318347"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}