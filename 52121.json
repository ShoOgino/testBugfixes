{"path":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#write(Fields).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"  /** Write all fields, terms and postings.  This the \"pull\"\n   *  API, allowing you to iterate more than once over the\n   *  postings, somewhat analogous to using a DOM API to\n   *  traverse an XML tree.  Alternatively, if you subclass\n   *  {@link PushFieldsConsumer}, then all postings are\n   *  pushed in a single pass, somewhat analogous to using a\n   *  SAX API to traverse an XML tree.\n   *\n   *  <p>This API is has certain restrictions vs {@link\n   *  PushFieldsConsumer}:\n   *\n   *  <ul>\n   *    <li> You must compute index statistics yourself,\n   *         including each Term's docFreq and totalTermFreq,\n   *         as well as the summary sumTotalTermFreq,\n   *         sumTotalDocFreq and docCount.\n   *\n   *    <li> You must skip terms that have no docs and\n   *         fields that have no terms, even though the provided\n   *         Fields API will expose them; this typically\n   *         requires lazily writing the field or term until\n   *         you've actually seen the first term or\n   *         document.\n   *\n   *    <li> The provided Fields instance is limited: you\n   *         cannot call any methods that return\n   *         statistics/counts; you cannot pass a non-null\n   *         live docs when pulling docs/positions enums.\n   *  </ul>\n   */\n  public abstract void write(Fields fields) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#write(Fields).mjava","sourceNew":"  /** Write all fields, terms and postings.  This the \"pull\"\n   *  API, allowing you to iterate more than once over the\n   *  postings, somewhat analogous to using a DOM API to\n   *  traverse an XML tree.\n   *\n   *  <p><b>Notes</b>:\n   *\n   *  <ul>\n   *    <li> You must compute index statistics,\n   *         including each Term's docFreq and totalTermFreq,\n   *         as well as the summary sumTotalTermFreq,\n   *         sumTotalDocFreq and docCount.\n   *\n   *    <li> You must skip terms that have no docs and\n   *         fields that have no terms, even though the provided\n   *         Fields API will expose them; this typically\n   *         requires lazily writing the field or term until\n   *         you've actually seen the first term or\n   *         document.\n   *\n   *    <li> The provided Fields instance is limited: you\n   *         cannot call any methods that return\n   *         statistics/counts; you cannot pass a non-null\n   *         live docs when pulling docs/positions enums.\n   *  </ul>\n   */\n  public abstract void write(Fields fields) throws IOException;\n\n","sourceOld":"  /** Write all fields, terms and postings.  This the \"pull\"\n   *  API, allowing you to iterate more than once over the\n   *  postings, somewhat analogous to using a DOM API to\n   *  traverse an XML tree.  Alternatively, if you subclass\n   *  {@link PushFieldsConsumer}, then all postings are\n   *  pushed in a single pass, somewhat analogous to using a\n   *  SAX API to traverse an XML tree.\n   *\n   *  <p>This API is has certain restrictions vs {@link\n   *  PushFieldsConsumer}:\n   *\n   *  <ul>\n   *    <li> You must compute index statistics yourself,\n   *         including each Term's docFreq and totalTermFreq,\n   *         as well as the summary sumTotalTermFreq,\n   *         sumTotalDocFreq and docCount.\n   *\n   *    <li> You must skip terms that have no docs and\n   *         fields that have no terms, even though the provided\n   *         Fields API will expose them; this typically\n   *         requires lazily writing the field or term until\n   *         you've actually seen the first term or\n   *         document.\n   *\n   *    <li> The provided Fields instance is limited: you\n   *         cannot call any methods that return\n   *         statistics/counts; you cannot pass a non-null\n   *         live docs when pulling docs/positions enums.\n   *  </ul>\n   */\n  public abstract void write(Fields fields) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#write(Fields).mjava","sourceNew":"  /** Write all fields, terms and postings.  This the \"pull\"\n   *  API, allowing you to iterate more than once over the\n   *  postings, somewhat analogous to using a DOM API to\n   *  traverse an XML tree.\n   *\n   *  <p><b>Notes</b>:\n   *\n   *  <ul>\n   *    <li> You must compute index statistics,\n   *         including each Term's docFreq and totalTermFreq,\n   *         as well as the summary sumTotalTermFreq,\n   *         sumTotalDocFreq and docCount.\n   *\n   *    <li> You must skip terms that have no docs and\n   *         fields that have no terms, even though the provided\n   *         Fields API will expose them; this typically\n   *         requires lazily writing the field or term until\n   *         you've actually seen the first term or\n   *         document.\n   *\n   *    <li> The provided Fields instance is limited: you\n   *         cannot call any methods that return\n   *         statistics/counts; you cannot pass a non-null\n   *         live docs when pulling docs/positions enums.\n   *  </ul>\n   */\n  public abstract void write(Fields fields, NormsProducer norms) throws IOException;\n\n","sourceOld":"  /** Write all fields, terms and postings.  This the \"pull\"\n   *  API, allowing you to iterate more than once over the\n   *  postings, somewhat analogous to using a DOM API to\n   *  traverse an XML tree.\n   *\n   *  <p><b>Notes</b>:\n   *\n   *  <ul>\n   *    <li> You must compute index statistics,\n   *         including each Term's docFreq and totalTermFreq,\n   *         as well as the summary sumTotalTermFreq,\n   *         sumTotalDocFreq and docCount.\n   *\n   *    <li> You must skip terms that have no docs and\n   *         fields that have no terms, even though the provided\n   *         Fields API will expose them; this typically\n   *         requires lazily writing the field or term until\n   *         you've actually seen the first term or\n   *         document.\n   *\n   *    <li> The provided Fields instance is limited: you\n   *         cannot call any methods that return\n   *         statistics/counts; you cannot pass a non-null\n   *         live docs when pulling docs/positions enums.\n   *  </ul>\n   */\n  public abstract void write(Fields fields) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}