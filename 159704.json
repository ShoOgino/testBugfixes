{"path":"src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","commits":[{"id":"a747fac3a4ebe15c4ae0fdef34be3dea8971c42a","date":1230536366,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    NamedListCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    System.out.println(\"passes w FastInputStream\");\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","pathOld":"src/test/org/apache/solr/common/util/TestFastInputStream#testgzip().mjava","sourceNew":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    NamedListCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    System.out.println(\"passes w FastInputStream\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testgzip() throws Exception {\n    ByteArrayOutputStream b = new ByteArrayOutputStream();\n    FastOutputStream fos = new FastOutputStream(b);\n    GZIPOutputStream gzos = new GZIPOutputStream(fos);\n    String ss = \"Helloooooooooooooooooooo\";\n    writeChars(gzos, ss, 0, ss.length());\n    gzos.close();\n    NamedListCodec.writeVInt(10, fos);\n    fos.flushBuffer();\n    GZIPInputStream gzis = new GZIPInputStream(new ByteArrayInputStream(b.toByteArray(), 0, b.size()));\n    char[] cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    System.out.println(\"passes w/o FastInputStream\");\n\n    ByteArrayInputStream bis = new ByteArrayInputStream(b.toByteArray(), 0, b.size());\n    gzis = new GZIPInputStream(new FastInputStream(bis));\n    cbuf = new char[ss.length()];\n    readChars(gzis, cbuf, 0, ss.length());\n    assertEquals(new String(cbuf), ss);\n    System.out.println(\"passes w FastInputStream\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a747fac3a4ebe15c4ae0fdef34be3dea8971c42a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a747fac3a4ebe15c4ae0fdef34be3dea8971c42a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a747fac3a4ebe15c4ae0fdef34be3dea8971c42a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a747fac3a4ebe15c4ae0fdef34be3dea8971c42a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}