{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEqualsAndHash().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEqualsAndHash().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEqualsAndHash().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test1\", 4, 10L, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test2\", 4, 10L, 20L, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test3\", 4, 10L, 20L, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test4\", 4, 10L, 20L, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test5\", 4, 10L, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test6\", 4, null, 20L, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newLongRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test8\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test9\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test9\", 8, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test10a\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test10b\", 4, 10L, 20L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test11\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test11\", 4, 20L, 10L, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newLongRange(\"test12\", 4, 10L, 20L, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newLongRange(\"test13\", 4, 10L, 20L, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n     // difference to int range is tested in TestNumericRangeQuery32\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}