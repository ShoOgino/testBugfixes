{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","commits":[{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CloudDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor().getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getCoreNodeName(cd);\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CloudDescriptor cloudDesc)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDesc.getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getNodeName() + \"_\" + coreName;\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13b19643a759d1b0322f704e70c44ad27e68380","date":1363562219,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String zkNodeName = getCoreNodeName(cd);\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor().getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor().getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    final String zkNodeName = getCoreNodeName(cd);\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ElectionContext context = electionContexts.remove(coreNodeName);\n    \n    assert context != null : coreNodeName;\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String zkNodeName = getCoreNodeName(cd);\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor().getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ElectionContext context = electionContexts.remove(coreNodeName);\n    \n    assert context != null : coreNodeName;\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String zkNodeName = getCoreNodeName(cd);\n    ElectionContext context = electionContexts.remove(zkNodeName);\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"deletecore\", ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor().getCollectionName());\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b012dfd51a5cec1d2c107f29f562cb937de636","date":1379475473,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ElectionContext context = electionContexts.remove(coreNodeName);\n    \n    assert context != null : coreNodeName;\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cc.getCores()) {//if there is no SolrCoe which is a member of this collection, remove the watch\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        //means\n        removeWatch = false;\n        break;\n      }\n    }\n    if(removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cc.getCores()) {//if there is no SolrCoe which is a member of this collection, remove the watch\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        //means\n        removeWatch = false;\n        break;\n      }\n    }\n    if(removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cc.getCores()) {//if there is no SolrCoe which is a member of this collection, remove the watch\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        //means\n        removeWatch = false;\n        break;\n      }\n    }\n    if(removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cc.getCores()) {//if there is no SolrCoe which is a member of this collection, remove the watch\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        //means\n        removeWatch = false;\n        break;\n      }\n    }\n    if(removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.DELETECORE, ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader)solrCore.getResourceLoader()).getCollectionZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if(configLocation != null) {\n      synchronized (confDirectoryWatchers) {\n        log.info(\"This conf directory is no more watched {0}\",configLocation);\n        confDirectoryWatchers.remove(configLocation);\n      }\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n    \n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n    \n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n    \n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n              cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,String).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, String configLocation)\n      throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    assert collection != null;\n\n    if (collection == null || collection.trim().length() == 0) {\n      log.error(\"No collection was specified.\");\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    // if there is no SolrCore which is a member of this collection, remove the watch\n    for (SolrCore solrCore : cc.getCores()) {\n      if (((ZkSolrResourceLoader) solrCore.getResourceLoader()).getConfigSetZkPath().equals(configLocation))\n        configLocation = null; //if a core uses this config dir , then set it to null\n\n\n      CloudDescriptor cloudDesc = solrCore.getCoreDescriptor()\n          .getCloudDescriptor();\n      if (cloudDesc != null\n          && cloudDescriptor.getCollectionName().equals(\n          cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    if (removeWatch) zkStateReader.removeZKWatch(collection);\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n\n    if (configLocation != null) {\n      synchronized (confDirectoryListeners) {\n        log.info(\"This conf directory is no more watched {}\", configLocation);\n        confDirectoryListeners.remove(configLocation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n    \n    final Collection<SolrCore> cores = cc.getCores();\n    \n    // if there is no SolrCore which is a member of this collection, remove the watch\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    boolean removeWatch = true;\n    for (SolrCore solrCore : cores) {\n      final CloudDescriptor cloudDesc = solrCore.getCoreDescriptor().getCloudDescriptor();\n      if (cloudDesc != null && cloudDescriptor.getCollectionName().equals(cloudDesc.getCollectionName())) {\n        removeWatch = false;\n        break;\n      }\n    }\n    \n    if (removeWatch) {\n      zkStateReader.removeZKWatch(collection);\n    }\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de0133a64f3e28d38cdf3f25f099bb70d48168a","date":1493749917,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n\n    ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n    if (context != null) {\n      context.cancelElection();\n    }\n\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    Replica replica = zkStateReader.getClusterState().getReplica(collection, coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws InterruptedException, KeeperException {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46df9d682d3407bf67ce2946c9f9267376809bc2","date":1521244495,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    unregister(coreName, cd, true);\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    unregister(coreName, cd, true);\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n    \n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n        ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    overseerJobQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["c6b012dfd51a5cec1d2c107f29f562cb937de636","29f5eaf296600e1665151e7929d42a3cbe22e481"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a13b19643a759d1b0322f704e70c44ad27e68380","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"344b0840364d990b29b97467bfcc766ff8325d11":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"84f20f331d8001864545c7021812d8c6509c7593":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"0ad30c6a479e764150a3316e57263319775f1df2":["b693a83132c9e45afcd564fd65a25b60ed80388b","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["9279b175e5e66258442d2123a50f052219a9cc1b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b693a83132c9e45afcd564fd65a25b60ed80388b","0ad30c6a479e764150a3316e57263319775f1df2"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["c6b012dfd51a5cec1d2c107f29f562cb937de636"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d470c8182e92b264680e34081b75e70a9f2b3c89","61c45e99cf6676da48f19d7511c73712ad39402b"],"a13b19643a759d1b0322f704e70c44ad27e68380":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"c6b012dfd51a5cec1d2c107f29f562cb937de636":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["664ff2b928393480d9655010aa700656b0fcade0","61c45e99cf6676da48f19d7511c73712ad39402b"],"46df9d682d3407bf67ce2946c9f9267376809bc2":["84f20f331d8001864545c7021812d8c6509c7593"],"664ff2b928393480d9655010aa700656b0fcade0":["e9017cf144952056066919f1ebc7897ff9bd71b1","d470c8182e92b264680e34081b75e70a9f2b3c89"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"61c45e99cf6676da48f19d7511c73712ad39402b":["5de0133a64f3e28d38cdf3f25f099bb70d48168a"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["344b0840364d990b29b97467bfcc766ff8325d11"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["84f20f331d8001864545c7021812d8c6509c7593","46df9d682d3407bf67ce2946c9f9267376809bc2"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a13b19643a759d1b0322f704e70c44ad27e68380"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","344b0840364d990b29b97467bfcc766ff8325d11"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"5de0133a64f3e28d38cdf3f25f099bb70d48168a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["203e3fcf513c02ee2c07015f2ce277e26dc60907"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"344b0840364d990b29b97467bfcc766ff8325d11":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"84f20f331d8001864545c7021812d8c6509c7593":["46df9d682d3407bf67ce2946c9f9267376809bc2","203e3fcf513c02ee2c07015f2ce277e26dc60907"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e9017cf144952056066919f1ebc7897ff9bd71b1","664ff2b928393480d9655010aa700656b0fcade0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5de0133a64f3e28d38cdf3f25f099bb70d48168a"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["664ff2b928393480d9655010aa700656b0fcade0"],"a13b19643a759d1b0322f704e70c44ad27e68380":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"c6b012dfd51a5cec1d2c107f29f562cb937de636":["96ea64d994d340044e0d57aeb6a5871539d10ca5","29f5eaf296600e1665151e7929d42a3cbe22e481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"46df9d682d3407bf67ce2946c9f9267376809bc2":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"664ff2b928393480d9655010aa700656b0fcade0":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"61c45e99cf6676da48f19d7511c73712ad39402b":["344b0840364d990b29b97467bfcc766ff8325d11","e9017cf144952056066919f1ebc7897ff9bd71b1","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["84f20f331d8001864545c7021812d8c6509c7593"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c6b012dfd51a5cec1d2c107f29f562cb937de636"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a13b19643a759d1b0322f704e70c44ad27e68380"],"5de0133a64f3e28d38cdf3f25f099bb70d48168a":["61c45e99cf6676da48f19d7511c73712ad39402b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","b869898f50ca80263bac2e3ae0949f7700e5c977","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}