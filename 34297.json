{"path":"src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","commits":[{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(Version.LUCENE_31, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Version.LUCENE_31, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(Version.LUCENE_31, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Version.LUCENE_31, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}