{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQueryImplicitDefaultParams().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQueryImplicitDefaultParams().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#testQueryImplicitDefaultParams().mjava","sourceNew":"  public void testQueryImplicitDefaultParams() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Create the base query to start with\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    TopDocs docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  public void testQueryImplicitDefaultParams() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Create the base query to start with\n    SimpleDrillDownQuery q = new SimpleDrillDownQuery(config);\n    q.add(\"a\");\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    SimpleDrillDownQuery q2 = new SimpleDrillDownQuery(config, q);\n    q2.add(\"b\");\n    TopDocs docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    SimpleDrillDownQuery q4 = new SimpleDrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQueryImplicitDefaultParams().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryImplicitDefaultParams() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Create the base query to start with\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    TopDocs docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQueryImplicitDefaultParams().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQueryImplicitDefaultParams().mjava","sourceNew":"  public void testQueryImplicitDefaultParams() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Create the base query to start with\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    TopDocs docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits.value);\n\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits.value);\n  }\n\n","sourceOld":"  public void testQueryImplicitDefaultParams() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Create the base query to start with\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    TopDocs docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}