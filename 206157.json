{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","commits":[{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator, context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator, context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator, context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f149c99eae8edb6c2f44fda36f194e0e345565","date":1317419618,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator, context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["b6f9be74ca7baaef11857ad002cad40419979516","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1291e4568eb7d9463d751627596ef14baf4c1603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["37f149c99eae8edb6c2f44fda36f194e0e345565"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"b6f9be74ca7baaef11857ad002cad40419979516":["1291e4568eb7d9463d751627596ef14baf4c1603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","b6f9be74ca7baaef11857ad002cad40419979516","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["37f149c99eae8edb6c2f44fda36f194e0e345565","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}