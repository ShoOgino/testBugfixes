{"path":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}