{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldTypeResource#testAddFieldTypes().mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldTypeResource#testAddFieldTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddFieldTypes() throws Exception {\n    \n    // name mismatch\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'name':'badNameEh','class':'solr.TrieIntField','stored':false}\"),\n        \"/responseHeader/status==400\");    \n    \n    // no class\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'stored':false}\"),\n        \"/responseHeader/status==400\");\n    \n    // invalid attribute\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'foo':'bar'}\"),\n        \"/responseHeader/status==400\");\n    \n    // empty analyzer\n    String ftdef = \"\";\n    ftdef += \"{\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':''\";\n    ftdef += \"}\";    \n    assertJPut(\"/schema/fieldtypes/emptyAnalyzerFieldType\",\n        json(ftdef),\n        \"/responseHeader/status==400\");\n\n    // basic field types\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'name':'myIntFieldType','class':'solr.TrieIntField','stored':false}\"),\n        \"/responseHeader/status==0\");    \n    checkFieldTypeProps(getExpectedProps(\"myIntFieldType\", \"solr.TrieIntField\", true, false), 16);\n    \n    assertJPut(\"/schema/fieldtypes/myDoubleFieldType\",\n        json(\"{'class':'solr.TrieDoubleField','precisionStep':'0','positionIncrementGap':'0'}\"),\n        \"/responseHeader/status==0\");\n    Map<String,Object> expProps = \n        getExpectedProps(\"myDoubleFieldType\", \"solr.TrieDoubleField\", true, true);\n    // add some additional expected props for this type\n    expProps.put(\"precisionStep\", \"0\");\n    expProps.put(\"positionIncrementGap\", \"0\");\n    checkFieldTypeProps(expProps, 18);\n    \n    assertJPut(\"/schema/fieldtypes/myBoolFieldType\",\n        json(\"{'class':'solr.BoolField','sortMissingLast':true}\"),\n        \"/responseHeader/status==0\");\n    expProps = getExpectedProps(\"myBoolFieldType\", \"solr.BoolField\", true, true);\n    expProps.put(\"sortMissingLast\", true);\n    checkFieldTypeProps(expProps, 17);    \n    \n    // a text analyzing field type\n    ftdef = \"{\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'charFilters':[\";\n    ftdef += \"       {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\1+'}\";\n    ftdef += \"    ],\";\n    ftdef += \"    'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\";\n    ftdef += \"       {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\";\n    ftdef += \"       {'class':'solr.LowerCaseFilterFactory'},\";\n    ftdef += \"       {'class':'solr.ASCIIFoldingFilterFactory'},\";\n    ftdef += \"       {'class':'solr.KStemFilterFactory'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"}\";\n  \n    assertJPut(\"/schema/fieldtypes/myTextFieldType\", json(ftdef), \"/responseHeader/status==0\");\n    \n    expProps = getExpectedProps(\"myTextFieldType\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    List<String> analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='charFilters']/lst[1]/str[@name='class'] = 'solr.PatternReplaceCharFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.WhitespaceTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.WordDelimiterFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.StopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[3]/str[@name='class'] = 'solr.LowerCaseFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[4]/str[@name='class'] = 'solr.ASCIIFoldingFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[5]/str[@name='class'] = 'solr.KStemFilterFactory'\");\n    checkFieldTypeProps(expProps, 19, analyzerTests);    \n    \n    // now add a field type that uses managed resources and a field that uses that type\n    \n    String piglatinStopWordEndpoint = \"/schema/analysis/stopwords/piglatin\";            \n    String piglatinSynonymEndpoint = \"/schema/analysis/synonyms/piglatin\";    \n    \n    // now define a new FieldType that uses the managed piglatin endpoints\n    // the managed endpoints will be autovivified as needed \n    ftdef = \"{\";\n    ftdef += \"  'class':'solr.TextField',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'tokenizer':{'class':'solr.StandardTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.ManagedStopFilterFactory','managed':'piglatin'},\";\n    ftdef += \"       {'class':'solr.ManagedSynonymFilterFactory','managed':'piglatin'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"}\";\n    assertJPut(\"/schema/fieldtypes/piglatinFieldType\", json(ftdef), \"/responseHeader/status==0\");\n    \n    expProps = getExpectedProps(\"piglatinFieldType\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.StandardTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.ManagedStopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.ManagedSynonymFilterFactory'\");\n    checkFieldTypeProps(expProps, 18, analyzerTests);\n    \n    assertJQ(piglatinSynonymEndpoint, \n        \"/synonymMappings/initArgs/ignoreCase==false\",\n        \"/synonymMappings/managedMap=={}\");\n\n    // add some piglatin synonyms\n    Map<String,List<String>> syns = new HashMap<>();\n    syns.put(\"appyhay\", Arrays.asList(\"ladgay\",\"oyfuljay\"));    \n    assertJPut(piglatinSynonymEndpoint, \n              JSONUtil.toJSON(syns),\n              \"/responseHeader/status==0\");    \n    assertJQ(piglatinSynonymEndpoint, \n            \"/synonymMappings/managedMap/appyhay==['ladgay','oyfuljay']\");\n    \n    // add some piglatin stopwords\n    assertJPut(piglatinStopWordEndpoint, \n        JSONUtil.toJSON(Arrays.asList(\"hetay\")),\n        \"/responseHeader/status==0\");\n   \n    assertJQ(piglatinStopWordEndpoint + \"/hetay\", \"/hetay=='hetay'\");\n    \n    // add a field that uses our new type\n    assertJPut(\"/schema/fields/newManagedField\",\n        json(\"{'type':'piglatinFieldType','stored':false}\"),\n        \"/responseHeader/status==0\");   \n    \n    assertQ(\"/schema/fields/newManagedField?indent=on&wt=xml\",\n        \"count(/response/lst[@name='field']) = 1\",\n        \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    // try to delete the managed synonyms endpoint, which should fail because it is being used\n    assertJDelete(piglatinSynonymEndpoint, \"/responseHeader/status==403\");\n    \n    // test adding multiple field types at once\n    ftdef = \"[\";\n    ftdef += \"{\";\n    ftdef += \"  'name':'textFieldType1',\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\";\n    ftdef += \"       {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\";\n    ftdef += \"       {'class':'solr.LowerCaseFilterFactory'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"},{\";\n    ftdef += \"  'name':'textFieldType2',\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\";\n    ftdef += \"       {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\";\n    ftdef += \"       {'class':'solr.LowerCaseFilterFactory'},\";\n    ftdef += \"       {'class':'solr.ASCIIFoldingFilterFactory'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"}\";\n    ftdef += \"]\";\n  \n    assertJPost(\"/schema/fieldtypes\", json(ftdef), \"/responseHeader/status==0\");\n    \n    expProps = getExpectedProps(\"textFieldType1\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.WhitespaceTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.WordDelimiterFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.StopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[3]/str[@name='class'] = 'solr.LowerCaseFilterFactory'\");\n    checkFieldTypeProps(expProps, 19, analyzerTests);    \n\n    expProps = getExpectedProps(\"textFieldType2\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.WhitespaceTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.WordDelimiterFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.StopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[3]/str[@name='class'] = 'solr.LowerCaseFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[4]/str[@name='class'] = 'solr.ASCIIFoldingFilterFactory'\");\n    checkFieldTypeProps(expProps, 19, analyzerTests);        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldTypeResource#testAddFieldTypes().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAddFieldTypes() throws Exception {\n    \n    // name mismatch\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'name':'badNameEh','class':'solr.TrieIntField','stored':false}\"),\n        \"/responseHeader/status==400\");    \n    \n    // no class\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'stored':false}\"),\n        \"/responseHeader/status==400\");\n    \n    // invalid attribute\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'foo':'bar'}\"),\n        \"/responseHeader/status==400\");\n    \n    // empty analyzer\n    String ftdef = \"\";\n    ftdef += \"{\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':''\";\n    ftdef += \"}\";    \n    assertJPut(\"/schema/fieldtypes/emptyAnalyzerFieldType\",\n        json(ftdef),\n        \"/responseHeader/status==400\");\n\n    // basic field types\n    assertJPut(\"/schema/fieldtypes/myIntFieldType\",\n        json(\"{'name':'myIntFieldType','class':'solr.TrieIntField','stored':false}\"),\n        \"/responseHeader/status==0\");    \n    checkFieldTypeProps(getExpectedProps(\"myIntFieldType\", \"solr.TrieIntField\", true, false), 16);\n    \n    assertJPut(\"/schema/fieldtypes/myDoubleFieldType\",\n        json(\"{'class':'solr.TrieDoubleField','precisionStep':'0','positionIncrementGap':'0'}\"),\n        \"/responseHeader/status==0\");\n    Map<String,Object> expProps = \n        getExpectedProps(\"myDoubleFieldType\", \"solr.TrieDoubleField\", true, true);\n    // add some additional expected props for this type\n    expProps.put(\"precisionStep\", \"0\");\n    expProps.put(\"positionIncrementGap\", \"0\");\n    checkFieldTypeProps(expProps, 18);\n    \n    assertJPut(\"/schema/fieldtypes/myBoolFieldType\",\n        json(\"{'class':'solr.BoolField','sortMissingLast':true}\"),\n        \"/responseHeader/status==0\");\n    expProps = getExpectedProps(\"myBoolFieldType\", \"solr.BoolField\", true, true);\n    expProps.put(\"sortMissingLast\", true);\n    checkFieldTypeProps(expProps, 17);    \n    \n    // a text analyzing field type\n    ftdef = \"{\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'charFilters':[\";\n    ftdef += \"       {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\1+'}\";\n    ftdef += \"    ],\";\n    ftdef += \"    'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\";\n    ftdef += \"       {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\";\n    ftdef += \"       {'class':'solr.LowerCaseFilterFactory'},\";\n    ftdef += \"       {'class':'solr.ASCIIFoldingFilterFactory'},\";\n    ftdef += \"       {'class':'solr.KStemFilterFactory'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"}\";\n  \n    assertJPut(\"/schema/fieldtypes/myTextFieldType\", json(ftdef), \"/responseHeader/status==0\");\n    \n    expProps = getExpectedProps(\"myTextFieldType\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    List<String> analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='charFilters']/lst[1]/str[@name='class'] = 'solr.PatternReplaceCharFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.WhitespaceTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.WordDelimiterFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.StopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[3]/str[@name='class'] = 'solr.LowerCaseFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[4]/str[@name='class'] = 'solr.ASCIIFoldingFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[5]/str[@name='class'] = 'solr.KStemFilterFactory'\");\n    checkFieldTypeProps(expProps, 19, analyzerTests);    \n    \n    // now add a field type that uses managed resources and a field that uses that type\n    \n    String piglatinStopWordEndpoint = \"/schema/analysis/stopwords/piglatin\";            \n    String piglatinSynonymEndpoint = \"/schema/analysis/synonyms/piglatin\";    \n    \n    // now define a new FieldType that uses the managed piglatin endpoints\n    // the managed endpoints will be autovivified as needed \n    ftdef = \"{\";\n    ftdef += \"  'class':'solr.TextField',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'tokenizer':{'class':'solr.StandardTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.ManagedStopFilterFactory','managed':'piglatin'},\";\n    ftdef += \"       {'class':'solr.ManagedSynonymFilterFactory','managed':'piglatin'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"}\";\n    assertJPut(\"/schema/fieldtypes/piglatinFieldType\", json(ftdef), \"/responseHeader/status==0\");\n    \n    expProps = getExpectedProps(\"piglatinFieldType\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.StandardTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.ManagedStopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.ManagedSynonymFilterFactory'\");\n    checkFieldTypeProps(expProps, 18, analyzerTests);\n    \n    assertJQ(piglatinSynonymEndpoint, \n        \"/synonymMappings/initArgs/ignoreCase==false\",\n        \"/synonymMappings/managedMap=={}\");\n\n    // add some piglatin synonyms\n    Map<String,List<String>> syns = new HashMap<>();\n    syns.put(\"appyhay\", Arrays.asList(\"ladgay\",\"oyfuljay\"));    \n    assertJPut(piglatinSynonymEndpoint, \n              JSONUtil.toJSON(syns),\n              \"/responseHeader/status==0\");    \n    assertJQ(piglatinSynonymEndpoint, \n            \"/synonymMappings/managedMap/appyhay==['ladgay','oyfuljay']\");\n    \n    // add some piglatin stopwords\n    assertJPut(piglatinStopWordEndpoint, \n        JSONUtil.toJSON(Arrays.asList(\"hetay\")),\n        \"/responseHeader/status==0\");\n   \n    assertJQ(piglatinStopWordEndpoint + \"/hetay\", \"/hetay=='hetay'\");\n    \n    // add a field that uses our new type\n    assertJPut(\"/schema/fields/newManagedField\",\n        json(\"{'type':'piglatinFieldType','stored':false}\"),\n        \"/responseHeader/status==0\");   \n    \n    assertQ(\"/schema/fields/newManagedField?indent=on&wt=xml\",\n        \"count(/response/lst[@name='field']) = 1\",\n        \"/response/lst[@name='responseHeader']/int[@name='status'] = '0'\");\n\n    // try to delete the managed synonyms endpoint, which should fail because it is being used\n    assertJDelete(piglatinSynonymEndpoint, \"/responseHeader/status==403\");\n    \n    // test adding multiple field types at once\n    ftdef = \"[\";\n    ftdef += \"{\";\n    ftdef += \"  'name':'textFieldType1',\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\";\n    ftdef += \"       {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\";\n    ftdef += \"       {'class':'solr.LowerCaseFilterFactory'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"},{\";\n    ftdef += \"  'name':'textFieldType2',\";\n    ftdef += \"  'class':'solr.TextField','positionIncrementGap':'100',\";\n    ftdef += \"  'analyzer':{\";\n    ftdef += \"    'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\";\n    ftdef += \"    'filters':[\";\n    ftdef += \"       {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\";\n    ftdef += \"       {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\";\n    ftdef += \"       {'class':'solr.LowerCaseFilterFactory'},\";\n    ftdef += \"       {'class':'solr.ASCIIFoldingFilterFactory'}\";\n    ftdef += \"    ]\";\n    ftdef += \"  }\";\n    ftdef += \"}\";\n    ftdef += \"]\";\n  \n    assertJPost(\"/schema/fieldtypes\", json(ftdef), \"/responseHeader/status==0\");\n    \n    expProps = getExpectedProps(\"textFieldType1\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.WhitespaceTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.WordDelimiterFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.StopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[3]/str[@name='class'] = 'solr.LowerCaseFilterFactory'\");\n    checkFieldTypeProps(expProps, 19, analyzerTests);    \n\n    expProps = getExpectedProps(\"textFieldType2\", \"solr.TextField\", true, true);\n    expProps.put(\"autoGeneratePhraseQueries\", false);\n    expProps.put(\"omitNorms\", false);\n    expProps.put(\"omitTermFreqAndPositions\", false);\n    expProps.put(\"omitPositions\", false);\n    expProps.put(\"storeOffsetsWithPositions\", false);\n    expProps.put(\"tokenized\", true);\n            \n    analyzerTests = new ArrayList<>();\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/lst[@name='tokenizer']/str[@name='class'] = 'solr.WhitespaceTokenizerFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[1]/str[@name='class'] = 'solr.WordDelimiterFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[2]/str[@name='class'] = 'solr.StopFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[3]/str[@name='class'] = 'solr.LowerCaseFilterFactory'\");\n    analyzerTests.add(\"/response/lst[@name='fieldType']/lst[@name='analyzer']/arr[@name='filters']/lst[4]/str[@name='class'] = 'solr.ASCIIFoldingFilterFactory'\");\n    checkFieldTypeProps(expProps, 19, analyzerTests);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}