{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Postings).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    /**\n     * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n     * The payload is from the spans of <code>big</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, big) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return bigSpans.startPosition();\n          }\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              return bigSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n     * The payload is from the spans of <code>big</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, big) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return bigSpans.startPosition();\n          }\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              return bigSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    /**\n     * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n     * The payload is from the spans of <code>big</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(this, getSimScorer(context), big, little, big) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return bigSpans.startPosition();\n          }\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              return bigSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n     * The payload is from the spans of <code>big</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, big) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return bigSpans.startPosition();\n          }\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              return bigSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainingQuery.SpanContainingWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    /**\n     * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n     * The payload is from the spans of <code>big</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, big) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return bigSpans.startPosition();\n          }\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              return bigSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Return spans from <code>big</code> that contain at least one spans from <code>little</code>.\n     * The payload is from the spans of <code>big</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(this, getSimScorer(context), big, little, big) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return bigSpans.startPosition();\n          }\n          while (bigSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (littleSpans.startPosition() < bigSpans.startPosition()) {\n              if (littleSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.endPosition() >= littleSpans.endPosition()) {\n              return bigSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}