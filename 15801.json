{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldsEquals(String,IndexReader,Fields,Fields,boolean).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldsEquals(String,IndexReader,Fields,Fields,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFieldsEquals(String info, IndexReader leftReader, Fields leftFields, Fields rightFields, boolean deep) throws IOException {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatisticsEquals(info, leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTermsEquals(info, leftReader, leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldsEquals(String,IndexReader,Fields,Fields,boolean).mjava","sourceNew":null,"sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFieldsEquals(String info, IndexReader leftReader, Fields leftFields, Fields rightFields, boolean deep) throws IOException {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatisticsEquals(info, leftFields, rightFields);\n    \n    Iterator<String> leftEnum = leftFields.iterator();\n    Iterator<String> rightEnum = rightFields.iterator();\n    \n    while (leftEnum.hasNext()) {\n      String field = leftEnum.next();\n      assertEquals(info, field, rightEnum.next());\n      assertTermsEquals(info, leftReader, leftFields.terms(field), rightFields.terms(field), deep);\n    }\n    assertFalse(rightEnum.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}