{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(InputStream,InputStream).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(InputStream,InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    this(affix, Collections.singletonList(dictionary), false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, IGNORE_CASE_DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(InputStream,InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    this(affix, Collections.singletonList(dictionary), false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, IGNORE_CASE_DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(Directory,String,InputStream,InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(InputStream,InputStream).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param tempDir Directory to use for offline sorting\n   * @param tempFileNamePrefix prefix to use to generate temp file names\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(Directory tempDir, String tempFileNamePrefix, InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    this(tempDir, tempFileNamePrefix, affix, Collections.singletonList(dictionary), false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, InputStream dictionary) throws IOException, ParseException {\n    this(affix, Collections.singletonList(dictionary), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}