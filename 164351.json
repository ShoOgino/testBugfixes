{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.getIndexReader().close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.getIndexReader().close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["e230a61047bc041516c811baa08a7174d6f8322a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3a0403b45dfe384fae4a1b6e96c3265d000c498","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}