{"path":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDataDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDataDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDataDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDataDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDataDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDataDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDataDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDataDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"f6652c943595e92c187ee904c382863013eae28f":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["f6652c943595e92c187ee904c382863013eae28f"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["f6652c943595e92c187ee904c382863013eae28f"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}