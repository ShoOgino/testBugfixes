{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","commits":[{"id":"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","date":1377955248,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","date":1385076439,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","sourceNew":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","sourceOld":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","bugFix":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","sourceNew":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","sourceOld":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","sourceNew":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", StandardCharsets.UTF_8);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip, StandardCharsets.UTF_8);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, StandardCharsets.UTF_8);\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, StandardCharsets.UTF_8);\n  }\n\n","sourceOld":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#writeCustomConfig(String,String,String,String).mjava","sourceNew":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", StandardCharsets.UTF_8);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip, StandardCharsets.UTF_8);\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, StandardCharsets.UTF_8);\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, StandardCharsets.UTF_8);\n  }\n\n","sourceOld":"  // Just localizes writing a configuration rather than repeating it for good and bad files.\n  private void writeCustomConfig(String coreName, String config, String schema, String rand_snip) throws IOException {\n\n    File coreRoot = new File(solrHomeDirectory, coreName);\n    File subHome = new File(coreRoot, \"conf\");\n    if (!coreRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", coreRoot.mkdirs());\n    }\n    // Write the file for core discovery\n    FileUtils.writeStringToFile(new File(coreRoot, \"core.properties\"), \"name=\" + coreName +\n        System.getProperty(\"line.separator\") + \"transient=true\" +\n        System.getProperty(\"line.separator\") + \"loadOnStartup=true\", Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"), rand_snip, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"solrconfig.xml\"), config, Charsets.UTF_8.toString());\n\n    FileUtils.writeStringToFile(new File(subHome, \"schema.xml\"), schema, Charsets.UTF_8.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"320888923ec13b91f53082558f01f4c9960dd226":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"]},"commit2Childs":{"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","74f45af4339b0daf7a95c820ab88c1aea74fbce0","320888923ec13b91f53082558f01f4c9960dd226"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}