{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e72e661a57246fd5412d682d707d9dbdf81e555","date":1343303474,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"643cadd7b2e7141ffb5f3fe8078915e1cb01b3de","date":1343303939,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824d674c7c80eeddb2c2e429f92d3b15688d8393","date":1379775111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource), f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource).getAbsoluteFile();\n      }\n      boolean found = f.isFile() && f.canRead();\n      if (!found) { // no success with $CWD/$configDir/$resource\n        f = f0.getAbsoluteFile();\n        found = f.isFile() && f.canRead();\n      }\n      // check that we don't escape instance dir\n      if (found) {\n        if (!Boolean.parseBoolean(System.getProperty(\"solr.allow.unsafe.resourceloading\", \"false\"))) {\n          final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();\n          final URI fileURI = f.toURI().normalize();\n          if (instanceURI.relativize(fileURI) == fileURI) {\n            // no URI relativize possible, so they don't share same base folder\n            throw new IOException(\"For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: \" + f +\n                \"; if you want to override this safety feature and you are sure about the consequences, you can pass the system property \"+\n                \"-Dsolr.allow.unsafe.resourceloading=true to your JVM\");\n          }\n        }\n        // relativize() returned a relative, new URI, so we are fine!\n        return new FileInputStream(f);\n      }\n      // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n      // We need a ClassLoader-compatible (forward-slashes) path here!\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n      // This is a hack just for tests (it is not done in ZKResourceLoader)!\n      // -> the getConfigDir's path must not be absolute!\n      if (is == null && System.getProperty(\"jetty.testMode\") != null && !new File(getConfigDir()).isAbsolute()) {\n        is = classLoader.getResourceAsStream((getConfigDir() + resource).replace(File.separatorChar, '/'));\n      }\n    } catch (IOException ioe) {\n      throw ioe;\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + new File(getConfigDir()).getAbsolutePath() + \"'\");\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource);\n      File f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource);\n      }\n      if (f.isFile() && f.canRead()) {\n        return new FileInputStream(f);\n      } else if (f != f0) { // no success with $CWD/$configDir/$resource\n        if (f0.isFile() && f0.canRead())\n          return new FileInputStream(f0);\n      }\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n      if (is == null)\n        is = classLoader.getResourceAsStream(getConfigDir() + resource);\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + getConfigDir() + \"', cwd=\"+System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource), f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource).getAbsoluteFile();\n      }\n      boolean found = f.isFile() && f.canRead();\n      if (!found) { // no success with $CWD/$configDir/$resource\n        f = f0.getAbsoluteFile();\n        found = f.isFile() && f.canRead();\n      }\n      // check that we don't escape instance dir\n      if (found) {\n        if (!Boolean.parseBoolean(System.getProperty(\"solr.allow.unsafe.resourceloading\", \"false\"))) {\n          final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();\n          final URI fileURI = f.toURI().normalize();\n          if (instanceURI.relativize(fileURI) == fileURI) {\n            // no URI relativize possible, so they don't share same base folder\n            throw new IOException(\"For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: \" + f +\n                \"; if you want to override this safety feature and you are sure about the consequences, you can pass the system property \"+\n                \"-Dsolr.allow.unsafe.resourceloading=true to your JVM\");\n          }\n        }\n        // relativize() returned a relative, new URI, so we are fine!\n        return new FileInputStream(f);\n      }\n      // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n      // We need a ClassLoader-compatible (forward-slashes) path here!\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n      // This is a hack just for tests (it is not done in ZKResourceLoader)!\n      // -> the getConfigDir's path must not be absolute!\n      if (is == null && System.getProperty(\"jetty.testMode\") != null && !new File(getConfigDir()).isAbsolute()) {\n        is = classLoader.getResourceAsStream((getConfigDir() + resource).replace(File.separatorChar, '/'));\n      }\n    } catch (IOException ioe) {\n      throw ioe;\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource + \"' in classpath or '\" + new File(getConfigDir()).getAbsolutePath() + \"'\");\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource), f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource).getAbsoluteFile();\n      }\n      boolean found = f.isFile() && f.canRead();\n      if (!found) { // no success with $CWD/$configDir/$resource\n        f = f0.getAbsoluteFile();\n        found = f.isFile() && f.canRead();\n      }\n      // check that we don't escape instance dir\n      if (found) {\n        if (!Boolean.parseBoolean(System.getProperty(\"solr.allow.unsafe.resourceloading\", \"false\"))) {\n          final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();\n          final URI fileURI = f.toURI().normalize();\n          if (instanceURI.relativize(fileURI) == fileURI) {\n            // no URI relativize possible, so they don't share same base folder\n            throw new IOException(\"For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: \" + f +\n                \"; if you want to override this safety feature and you are sure about the consequences, you can pass the system property \"+\n                \"-Dsolr.allow.unsafe.resourceloading=true to your JVM\");\n          }\n        }\n        // relativize() returned a relative, new URI, so we are fine!\n        return new FileInputStream(f);\n      }\n      // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n      // We need a ClassLoader-compatible (forward-slashes) path here!\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n      // This is a hack just for tests (it is not done in ZKResourceLoader)!\n      // -> the getConfigDir's path must not be absolute!\n      if (is == null && System.getProperty(\"jetty.testMode\") != null && !new File(getConfigDir()).isAbsolute()) {\n        is = classLoader.getResourceAsStream((getConfigDir() + resource).replace(File.separatorChar, '/'));\n      }\n    } catch (IOException ioe) {\n      throw ioe;\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new IOException(\"Can't find resource '\" + resource + \"' in classpath or '\" + new File(getConfigDir()).getAbsolutePath() + \"'\");\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n\n    Path inConfigDir = getInstancePath().resolve(\"conf\").resolve(resource);\n    if (Files.exists(inConfigDir) && Files.isReadable(inConfigDir)) {\n      return Files.newInputStream(checkPathIsSafe(inConfigDir));\n    }\n\n    Path inInstanceDir = getInstancePath().resolve(resource);\n    if (Files.exists(inInstanceDir) && Files.isReadable(inInstanceDir)) {\n      return Files.newInputStream(checkPathIsSafe(inInstanceDir));\n    }\n\n    // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n    // We need a ClassLoader-compatible (forward-slashes) path here!\n    InputStream is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n\n    // This is a hack just for tests (it is not done in ZKResourceLoader)!\n    // TODO can we nuke this?\n    if (is == null && System.getProperty(\"jetty.testMode\") != null) {\n      is = classLoader.getResourceAsStream((\"conf/\" + resource).replace(File.separatorChar, '/'));\n    }\n\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource + \"' in classpath or '\" + instanceDir + \"'\");\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n    InputStream is=null;\n    try {\n      File f0 = new File(resource), f = f0;\n      if (!f.isAbsolute()) {\n        // try $CWD/$configDir/$resource\n        f = new File(getConfigDir() + resource).getAbsoluteFile();\n      }\n      boolean found = f.isFile() && f.canRead();\n      if (!found) { // no success with $CWD/$configDir/$resource\n        f = f0.getAbsoluteFile();\n        found = f.isFile() && f.canRead();\n      }\n      // check that we don't escape instance dir\n      if (found) {\n        if (!Boolean.parseBoolean(System.getProperty(\"solr.allow.unsafe.resourceloading\", \"false\"))) {\n          final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();\n          final URI fileURI = f.toURI().normalize();\n          if (instanceURI.relativize(fileURI) == fileURI) {\n            // no URI relativize possible, so they don't share same base folder\n            throw new IOException(\"For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: \" + f +\n                \"; if you want to override this safety feature and you are sure about the consequences, you can pass the system property \"+\n                \"-Dsolr.allow.unsafe.resourceloading=true to your JVM\");\n          }\n        }\n        // relativize() returned a relative, new URI, so we are fine!\n        return new FileInputStream(f);\n      }\n      // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n      // We need a ClassLoader-compatible (forward-slashes) path here!\n      is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n      // This is a hack just for tests (it is not done in ZKResourceLoader)!\n      // -> the getConfigDir's path must not be absolute!\n      if (is == null && System.getProperty(\"jetty.testMode\") != null && !new File(getConfigDir()).isAbsolute()) {\n        is = classLoader.getResourceAsStream((getConfigDir() + resource).replace(File.separatorChar, '/'));\n      }\n    } catch (IOException ioe) {\n      throw ioe;\n    } catch (Exception e) {\n      throw new IOException(\"Error opening \" + resource, e);\n    }\n    if (is==null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource + \"' in classpath or '\" + new File(getConfigDir()).getAbsolutePath() + \"'\");\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *\n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n\n    Path inConfigDir = getInstancePath().resolve(\"conf\").resolve(resource);\n    if (Files.exists(inConfigDir) && Files.isReadable(inConfigDir)) {\n      return Files.newInputStream(checkPathIsSafe(inConfigDir));\n    }\n\n    Path inInstanceDir = getInstancePath().resolve(resource);\n    if (Files.exists(inInstanceDir) && Files.isReadable(inInstanceDir)) {\n      return Files.newInputStream(checkPathIsSafe(inInstanceDir));\n    }\n\n    // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n    // We need a ClassLoader-compatible (forward-slashes) path here!\n    InputStream is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n\n    // This is a hack just for tests (it is not done in ZKResourceLoader)!\n    // TODO can we nuke this?\n    if (is == null && System.getProperty(\"jetty.testMode\") != null) {\n      is = classLoader.getResourceAsStream((\"conf/\" + resource).replace(File.separatorChar, '/'));\n    }\n\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource + \"' in classpath or '\" + instanceDir + \"'\");\n    }\n    return is;\n  }\n\n","sourceOld":"  /** Opens any resource by its name.\n   * By default, this will look in multiple locations to load the resource:\n   * $configDir/$resource (if resource is not absolute)\n   * $CWD/$resource\n   * otherwise, it will look for it in any jar accessible through the class loader.\n   * Override this method to customize loading resources.\n   *@return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) throws IOException {\n\n    Path inConfigDir = getInstancePath().resolve(\"conf\").resolve(resource);\n    if (Files.exists(inConfigDir) && Files.isReadable(inConfigDir)) {\n      return Files.newInputStream(checkPathIsSafe(inConfigDir));\n    }\n\n    Path inInstanceDir = getInstancePath().resolve(resource);\n    if (Files.exists(inInstanceDir) && Files.isReadable(inInstanceDir)) {\n      return Files.newInputStream(checkPathIsSafe(inInstanceDir));\n    }\n\n    // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).\n    // We need a ClassLoader-compatible (forward-slashes) path here!\n    InputStream is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));\n\n    // This is a hack just for tests (it is not done in ZKResourceLoader)!\n    // TODO can we nuke this?\n    if (is == null && System.getProperty(\"jetty.testMode\") != null) {\n      is = classLoader.getResourceAsStream((\"conf/\" + resource).replace(File.separatorChar, '/'));\n    }\n\n    if (is == null) {\n      throw new SolrResourceNotFoundException(\"Can't find resource '\" + resource + \"' in classpath or '\" + instanceDir + \"'\");\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["643cadd7b2e7141ffb5f3fe8078915e1cb01b3de","7530de27b87b961b51f01bd1299b7004d46e8823"],"643cadd7b2e7141ffb5f3fe8078915e1cb01b3de":["6e72e661a57246fd5412d682d707d9dbdf81e555"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["7530de27b87b961b51f01bd1299b7004d46e8823"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","643cadd7b2e7141ffb5f3fe8078915e1cb01b3de"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["6466e433d7f5218e77c8115ed28176855fc3c143"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c26f00b574427b55127e869b935845554afde1fa","643cadd7b2e7141ffb5f3fe8078915e1cb01b3de"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["643cadd7b2e7141ffb5f3fe8078915e1cb01b3de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["954ae83b7dfacaa33d48ea056448ae11f7745a93"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"643cadd7b2e7141ffb5f3fe8078915e1cb01b3de":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","6e72e661a57246fd5412d682d707d9dbdf81e555","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["6466e433d7f5218e77c8115ed28176855fc3c143"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["643cadd7b2e7141ffb5f3fe8078915e1cb01b3de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","824d674c7c80eeddb2c2e429f92d3b15688d8393"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}