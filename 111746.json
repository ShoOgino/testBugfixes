{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#createFields(Shape,boolean,boolean).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#createFields(Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#createFields(TwoDoublesFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n    if( shape instanceof Point ) {\n      Point point = (Point)shape;\n\n      IndexableField[] f = new IndexableField[(index ? 2 : 0) + (store ? 1 : 0)];\n      if (index) {\n        f[0] = createDouble(fieldNameX, point.getX(), index, store);\n        f[1] = createDouble(fieldNameY, point.getY(), index, store);\n      }\n      if(store) {\n        FieldType customType = new FieldType();\n        customType.setStored(true);\n        f[f.length-1] = new Field( getFieldName(), ctx.toString( shape ), customType );\n      }\n      return f;\n    }\n    if( !ignoreIncompatibleGeometry ) {\n      throw new IllegalArgumentException( \"TwoDoublesStrategy can not index: \"+shape );\n    }\n    return new IndexableField[0]; // nothing (solr does not support null)\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(TwoDoublesFieldInfo fieldInfo,\n      Shape shape, boolean index, boolean store) {\n    if( shape instanceof Point ) {\n      Point point = (Point)shape;\n\n      IndexableField[] f = new IndexableField[(index ? 2 : 0) + (store ? 1 : 0)];\n      if (index) {\n        f[0] = finfo.createDouble( fieldInfo.getFieldNameX(), point.getX() );\n        f[1] = finfo.createDouble( fieldInfo.getFieldNameY(), point.getY() );\n      }\n      if(store) {\n        FieldType customType = new FieldType();\n        customType.setStored(true);\n        f[f.length-1] = new Field( fieldInfo.getFieldName(), ctx.toString( shape ), customType );\n      }\n      return f;\n    }\n    if( !ignoreIncompatibleGeometry ) {\n      throw new IllegalArgumentException( \"TwoDoublesStrategy can not index: \"+shape );\n    }\n    return new IndexableField[0]; // nothing (solr does not support null)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d569d88e65d963440cdd3a3e2d5f7cdd1bd42","date":1341987627,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#createFields(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(Shape shape) {\n    if( shape instanceof Point ) {\n      Point point = (Point)shape;\n      FieldType doubleFieldType = new FieldType(DoubleField.TYPE_NOT_STORED);\n      doubleFieldType.setNumericPrecisionStep(precisionStep);\n      IndexableField[] f = new IndexableField[2];\n      f[0] = new DoubleField(fieldNameX, point.getX(), doubleFieldType);\n      f[1] = new DoubleField(fieldNameY, point.getY(), doubleFieldType);\n      return f;\n    }\n    if( !ignoreIncompatibleGeometry ) {\n      throw new IllegalArgumentException( \"TwoDoublesStrategy can not index: \"+shape );\n    }\n    return new IndexableField[0]; // nothing (solr does not support null)\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n    if( shape instanceof Point ) {\n      Point point = (Point)shape;\n\n      IndexableField[] f = new IndexableField[(index ? 2 : 0) + (store ? 1 : 0)];\n      if (index) {\n        f[0] = createDouble(fieldNameX, point.getX(), index, store);\n        f[1] = createDouble(fieldNameY, point.getY(), index, store);\n      }\n      if(store) {\n        FieldType customType = new FieldType();\n        customType.setStored(true);\n        f[f.length-1] = new Field( getFieldName(), ctx.toString( shape ), customType );\n      }\n      return f;\n    }\n    if( !ignoreIncompatibleGeometry ) {\n      throw new IllegalArgumentException( \"TwoDoublesStrategy can not index: \"+shape );\n    }\n    return new IndexableField[0]; // nothing (solr does not support null)\n  }\n\n","bugFix":null,"bugIntro":["d5e3943824e0add7b904817b2028f6f5d83179ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n    if( shape instanceof Point ) {\n      Point point = (Point)shape;\n\n      IndexableField[] f = new IndexableField[(index ? 2 : 0) + (store ? 1 : 0)];\n      if (index) {\n        f[0] = createDouble(fieldNameX, point.getX(), index, store);\n        f[1] = createDouble(fieldNameY, point.getY(), index, store);\n      }\n      if(store) {\n        FieldType customType = new FieldType();\n        customType.setStored(true);\n        f[f.length-1] = new Field( getFieldName(), ctx.toString( shape ), customType );\n      }\n      return f;\n    }\n    if( !ignoreIncompatibleGeometry ) {\n      throw new IllegalArgumentException( \"TwoDoublesStrategy can not index: \"+shape );\n    }\n    return new IndexableField[0]; // nothing (solr does not support null)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["0415a016b37e58a017fed0a91234f733ab359971","399d569d88e65d963440cdd3a3e2d5f7cdd1bd42"],"399d569d88e65d963440cdd3a3e2d5f7cdd1bd42":["0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["399d569d88e65d963440cdd3a3e2d5f7cdd1bd42"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["aba371508186796cc6151d8223a5b4e16d02e26e","399d569d88e65d963440cdd3a3e2d5f7cdd1bd42"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"399d569d88e65d963440cdd3a3e2d5f7cdd1bd42":["aba371508186796cc6151d8223a5b4e16d02e26e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}