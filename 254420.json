{"path":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}