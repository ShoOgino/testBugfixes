{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","commits":[{"id":"165a9b73fdc51a44eaa99472596b138ab3e83c08","date":1346151826,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 0\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","0870713be686b7dbb084bfcef739b585aa13e793"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49ece63dc7884194bc5475110683cefa848b24e6","date":1346235849,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 0\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 0\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd9c037fc18fae85030604215e37c9bf6bf456f","date":1346249251,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 0\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0870713be686b7dbb084bfcef739b585aa13e793","date":1347234628,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(0, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["165a9b73fdc51a44eaa99472596b138ab3e83c08"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46bf1a48fd33bf34430ade646b7dd67b984be2a8","date":1358725746,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    addField(doc, \"airport\", \"dus\", useDv);\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    addField(doc, \"airport\", \"ams\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    addField(doc, \"x\", \"x\", useDv);\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true, useDv);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["8fd9c037fc18fae85030604215e37c9bf6bf456f","165a9b73fdc51a44eaa99472596b138ab3e83c08"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = new IndexSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.COMPOUND_FILES));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505dfd7dfae7faacd62d5e532edbdc7bf856b56e","date":1399828832,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d34336c8863b33047124bd0bbe44ca6b3fd532","date":1400269546,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = false;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new StringField(\"airport\", \"dus\", Field.Store.NO));\n\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new StringField(\"airport\", \"ams\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField, \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.shutdown();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    GroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testMVGroupedFacetingWithDeletes().mjava","sourceNew":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    GroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMVGroupedFacetingWithDeletes() throws Exception {\n    final String groupField = \"hotel\";\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    boolean useDv = true;\n\n    // Cannot assert this since we use NoMergePolicy:\n    w.setDoRandomForceMergeAssert(false);\n\n    // 0\n    Document doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    w.commit();\n    w.deleteDocuments(new TermQuery(new Term(\"airport\", \"ams\")));\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"a\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"dus\")));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n\n    // 6\n    doc = new Document();\n    addField(doc, groupField, \"b\", useDv);\n    doc.add(new SortedSetDocValuesField(\"airport\", new BytesRef(\"ams\")));\n    w.addDocument(doc);\n    w.commit();\n\n    // 7\n    doc = new Document();\n    doc.add(new StringField(\"x\", \"x\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.close();\n    IndexSearcher indexSearcher = newSearcher(DirectoryReader.open(dir));\n    AbstractGroupFacetCollector groupedAirportFacetCollector = createRandomCollector(groupField + \"_dv\", \"airport\", null, true);\n    indexSearcher.search(new MatchAllDocsQuery(), groupedAirportFacetCollector);\n    TermGroupFacetCollector.GroupedFacetResult airportResult = groupedAirportFacetCollector.mergeSegmentResults(10, 0, false);\n    assertEquals(3, airportResult.getTotalCount());\n    assertEquals(1, airportResult.getTotalMissingCount());\n\n    List<TermGroupFacetCollector.FacetEntry> entries = airportResult.getFacetEntries(0, 10);\n    assertEquals(2, entries.size());\n    assertEquals(\"ams\", entries.get(0).getValue().utf8ToString());\n    assertEquals(2, entries.get(0).getCount());\n    assertEquals(\"dus\", entries.get(1).getValue().utf8ToString());\n    assertEquals(1, entries.get(1).getCount());\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["91d34336c8863b33047124bd0bbe44ca6b3fd532"],"165a9b73fdc51a44eaa99472596b138ab3e83c08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0870713be686b7dbb084bfcef739b585aa13e793":["8fd9c037fc18fae85030604215e37c9bf6bf456f"],"505dfd7dfae7faacd62d5e532edbdc7bf856b56e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"91d34336c8863b33047124bd0bbe44ca6b3fd532":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["d0ef034a4f10871667ae75181537775ddcf8ade4","20e94e61fe5291647346b70437617e6b6c370408"],"56572ec06f1407c066d6b7399413178b33176cd8":["7e2fb55c0777755badd3b46d8140f3d4301febed","91d34336c8863b33047124bd0bbe44ca6b3fd532"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8fd9c037fc18fae85030604215e37c9bf6bf456f"],"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["0870713be686b7dbb084bfcef739b585aa13e793"],"8fd9c037fc18fae85030604215e37c9bf6bf456f":["49ece63dc7884194bc5475110683cefa848b24e6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0870713be686b7dbb084bfcef739b585aa13e793","46bf1a48fd33bf34430ade646b7dd67b984be2a8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["7e2fb55c0777755badd3b46d8140f3d4301febed","505dfd7dfae7faacd62d5e532edbdc7bf856b56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"49ece63dc7884194bc5475110683cefa848b24e6":["165a9b73fdc51a44eaa99472596b138ab3e83c08"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["505dfd7dfae7faacd62d5e532edbdc7bf856b56e","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"165a9b73fdc51a44eaa99472596b138ab3e83c08":["49ece63dc7884194bc5475110683cefa848b24e6"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0870713be686b7dbb084bfcef739b585aa13e793":["46bf1a48fd33bf34430ade646b7dd67b984be2a8","d4d69c535930b5cce125cff868d40f6373dc27d4"],"505dfd7dfae7faacd62d5e532edbdc7bf856b56e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"91d34336c8863b33047124bd0bbe44ca6b3fd532":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8fd9c037fc18fae85030604215e37c9bf6bf456f":["0870713be686b7dbb084bfcef739b585aa13e793","05a14b2611ead08655a2b2bdc61632eb31316e57"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["91d34336c8863b33047124bd0bbe44ca6b3fd532"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["165a9b73fdc51a44eaa99472596b138ab3e83c08","05a14b2611ead08655a2b2bdc61632eb31316e57"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"49ece63dc7884194bc5475110683cefa848b24e6":["8fd9c037fc18fae85030604215e37c9bf6bf456f"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}