{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactoryTest[TestDoubleMetaphoneFilterFactory]#testSettingSizeAndInject().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactoryTest[TestDoubleMetaphoneFilterFactory]#testSettingSizeAndInject().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testSettingSizeAndInject().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactoryTest[TestDoubleMetaphoneFilterFactory]#testSettingSizeAndInject().mjava","sourceNew":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","sourceOld":"  public void testSettingSizeAndInject() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"inject\", \"false\");\n    parameters.put(\"maxCodeLength\", \"8\");\n    factory.init(parameters);\n\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    assertTokenStreamContents(filteredStream, new String[] { \"ANTRNXNL\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"280bf88d9ed3d9923e393961b594d9553970e4fd":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"280bf88d9ed3d9923e393961b594d9553970e4fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["280bf88d9ed3d9923e393961b594d9553970e4fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}