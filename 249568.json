{"path":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: more efficient implementations\n  public int intersectionSize(DocSet other) {\n    return intersection(other).size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ef12055c55f37398364a953fc0c32c2e890c6","date":1143831146,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","sourceNew":"  public int intersectionSize(DocSet other) {\n    // intersectionSize is overloaded in HashDocSet to be more\n    // efficient, so if \"other\" is a HashDocSet, dispatch off\n    // of it instead.\n    if (other instanceof HashDocSet) {\n      return other.intersectionSize(this);\n    }\n    // less efficient way: do the intersection then get it's size\n    return intersection(other).size();\n  }\n\n","sourceOld":"  // TODO: more efficient implementations\n  public int intersectionSize(DocSet other) {\n    return intersection(other).size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","sourceNew":"  public int intersectionSize(DocSet other) {\n    // intersection is overloaded in the smaller DocSets to be more\n    // efficient, so dispatch off of it instead.\n    if (!(other instanceof BitDocSet)) {\n      return other.intersectionSize(this);\n    }\n    // less efficient way: do the intersection then get it's size\n    return intersection(other).size();\n  }\n\n","sourceOld":"  public int intersectionSize(DocSet other) {\n    // intersectionSize is overloaded in HashDocSet to be more\n    // efficient, so if \"other\" is a HashDocSet, dispatch off\n    // of it instead.\n    if (other instanceof HashDocSet) {\n      return other.intersectionSize(this);\n    }\n    // less efficient way: do the intersection then get it's size\n    return intersection(other).size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#intersectionSize(DocSet).mjava","sourceNew":"  public int intersectionSize(DocSet other) {\n    // intersection is overloaded in the smaller DocSets to be more\n    // efficient, so dispatch off of it instead.\n    if (!(other instanceof BitDocSet)) {\n      return other.intersectionSize(this);\n    }\n    // less efficient way: do the intersection then get it's size\n    return intersection(other).size();\n  }\n\n","sourceOld":"  public int intersectionSize(DocSet other) {\n    // intersection is overloaded in the smaller DocSets to be more\n    // efficient, so dispatch off of it instead.\n    if (!(other instanceof BitDocSet)) {\n      return other.intersectionSize(this);\n    }\n    // less efficient way: do the intersection then get it's size\n    return intersection(other).size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["457ef12055c55f37398364a953fc0c32c2e890c6"],"457ef12055c55f37398364a953fc0c32c2e890c6":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"ad94625fb8d088209f46650c8097196fec67f00c":["30391436869a41b74d4ba7098c40d955b686a10c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["457ef12055c55f37398364a953fc0c32c2e890c6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30391436869a41b74d4ba7098c40d955b686a10c":["ad94625fb8d088209f46650c8097196fec67f00c"],"457ef12055c55f37398364a953fc0c32c2e890c6":["30391436869a41b74d4ba7098c40d955b686a10c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}