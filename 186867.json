{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(FacetLabel,int).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath,int).mjava","sourceNew":"  // Used by subpath\n  private FacetLabel(final FacetLabel copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private CategoryPath(final CategoryPath copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(FacetLabel,int).mjava","sourceNew":"  // Used by subpath\n  private FacetLabel(final FacetLabel copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen >= 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":"  // Used by subpath\n  private FacetLabel(final FacetLabel copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen > 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(FacetLabel,int).mjava","pathOld":"/dev/null","sourceNew":"  // Used by subpath\n  private FacetLabel(final FacetLabel copyFrom, final int prefixLen) {\n    // while the code which calls this method is safe, at some point a test\n    // tripped on AIOOBE in toString, but we failed to reproduce. adding the\n    // assert as a safety check.\n    assert prefixLen >= 0 && prefixLen <= copyFrom.components.length : \n      \"prefixLen cannot be negative nor larger than the given components' length: prefixLen=\" + prefixLen\n        + \" components.length=\" + copyFrom.components.length;\n    this.components = copyFrom.components;\n    length = prefixLen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}