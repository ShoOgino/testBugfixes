{"path":"src/test/org/apache/solr/spelling/SimpleQueryConverter#convert(String).mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/SimpleQueryConverter#convert(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Token> convert(String origQuery) {\n    Collection<Token> result = new HashSet<Token>();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(origQuery));\n    Token tok = null;\n    try {\n      while ((tok = ts.next()) != null){\n        result.add(tok);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/SimpleQueryConverter#convert(String).mjava","pathOld":"src/test/org/apache/solr/spelling/SimpleQueryConverter#convert(String).mjava","sourceNew":"  @Override\n  public Collection<Token> convert(String origQuery) {\n    Collection<Token> result = new HashSet<Token>();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(origQuery));\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = (FlagsAttribute) ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    \n    try {\n      ts.reset();\n      while (ts.incrementToken()){\n        Token tok = new Token();\n        tok.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());\n        tok.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        tok.setFlags(flagsAtt.getFlags());\n        tok.setPayload(payloadAtt.getPayload());\n        tok.setPositionIncrement(posIncAtt.getPositionIncrement());\n        tok.setType(typeAtt.type());\n        result.add(tok);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Token> convert(String origQuery) {\n    Collection<Token> result = new HashSet<Token>();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(origQuery));\n    Token tok = null;\n    try {\n      while ((tok = ts.next()) != null){\n        result.add(tok);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/SimpleQueryConverter#convert(String).mjava","pathOld":"src/test/org/apache/solr/spelling/SimpleQueryConverter#convert(String).mjava","sourceNew":"  @Override\n  public Collection<Token> convert(String origQuery) {\n    Collection<Token> result = new HashSet<Token>();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(origQuery));\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = (FlagsAttribute) ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    \n    try {\n      ts.reset();\n      while (ts.incrementToken()){\n        Token tok = new Token();\n        tok.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());\n        tok.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        tok.setFlags(flagsAtt.getFlags());\n        tok.setPayload(payloadAtt.getPayload());\n        tok.setPositionIncrement(posIncAtt.getPositionIncrement());\n        tok.setType(typeAtt.type());\n        result.add(tok);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Token> convert(String origQuery) {\n    Collection<Token> result = new HashSet<Token>();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(origQuery));\n    // TODO: support custom attributes\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = (FlagsAttribute) ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    \n    try {\n      ts.reset();\n      while (ts.incrementToken()){\n        Token tok = new Token();\n        tok.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());\n        tok.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        tok.setFlags(flagsAtt.getFlags());\n        tok.setPayload(payloadAtt.getPayload());\n        tok.setPositionIncrement(posIncAtt.getPositionIncrement());\n        tok.setType(typeAtt.type());\n        result.add(tok);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}