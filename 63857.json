{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext);\n      db = fb.getDocIdSet(readerContext);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    ReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    AtomicReaderContext[] leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : ReaderUtil.leaves(topLevelContext)) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelContext);\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    AtomicReaderContext[] leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getTopReaderContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    FixedBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    FixedBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<LeafReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (LeafReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      LeafReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    FixedBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<AtomicReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (AtomicReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      AtomicReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doFilterTest(IndexReader).mjava","sourceNew":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    FixedBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /* top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<LeafReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (LeafReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      LeafReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(IndexReader reader) throws IOException {\n    IndexReaderContext topLevelContext = reader.getContext();\n    FixedBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    /*** top level filters are no longer supported\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(topLevelContext);\n    DocIdSet db = fb.getDocIdSet(topLevelContext);\n    doTestIteratorEqual(da, db);\n    ***/\n\n    DocIdSet da;\n    DocIdSet db;\n    List<LeafReaderContext> leaves = topLevelContext.leaves();\n\n    // first test in-sequence sub readers\n    for (LeafReaderContext readerContext : leaves) {\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = leaves.size();\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      LeafReaderContext readerContext = leaves.get(rand.nextInt(nReaders));\n      da = fa.getDocIdSet(readerContext, null);\n      db = fb.getDocIdSet(readerContext, null);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":["34743077dbbe20cd7a27d5c6c2511e62b99a0e36"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["c26f00b574427b55127e869b935845554afde1fa"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","8493985e6883b3fa8231d172694d2aa3a85cb182"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6620df8541b174097b1133a4fc370adb2e570524":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c26f00b574427b55127e869b935845554afde1fa":["6620df8541b174097b1133a4fc370adb2e570524"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}