{"path":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testZombieThreadFailures().mjava","commits":[{"id":"18bf84f26e85b274460f472a6e42de37fda19f7c","date":1396602216,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testZombieThreadFailures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZombieThreadFailures() throws Exception {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(1));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n        System.out.println(failure.getMessage());\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested2.class);\n    if (Nested2.die != null) {\n      Nested2.die.countDown();\n      Nested2.zombie.join();\n    }\n    \n    super.prevSysOut.println(results.toString());\n    Assert.assertEquals(Nested2.TOTAL_ITERS, result.getRunCount());\n    Assert.assertEquals(results.toString(), \"SFAAAAAAAA\", results.toString());\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testZombieThreadFailures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZombieThreadFailures() throws Exception {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(1));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n        System.out.println(failure.getMessage());\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested2.class);\n    if (Nested2.die != null) {\n      Nested2.die.countDown();\n      Nested2.zombie.join();\n    }\n    \n    super.prevSysOut.println(results.toString());\n    Assert.assertEquals(Nested2.TOTAL_ITERS, result.getRunCount());\n    Assert.assertEquals(results.toString(), \"SFAAAAAAAA\", results.toString());\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestMaxFailuresRule#testZombieThreadFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testZombieThreadFailures().mjava","sourceNew":"  @Test\n  public void testZombieThreadFailures() throws Exception {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(1));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n        System.out.println(failure.getMessage());\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested2.class);\n    if (Nested2.die != null) {\n      Nested2.die.countDown();\n      Nested2.zombie.join();\n    }\n    \n    super.prevSysOut.println(results.toString());\n    Assert.assertEquals(Nested2.TOTAL_ITERS, result.getRunCount());\n    Assert.assertEquals(results.toString(), \"SFAAAAAAAA\", results.toString());\n  }  \n\n","sourceOld":"  @Test\n  public void testZombieThreadFailures() throws Exception {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(1));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n        System.out.println(failure.getMessage());\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested2.class);\n    if (Nested2.die != null) {\n      Nested2.die.countDown();\n      Nested2.zombie.join();\n    }\n    \n    super.prevSysOut.println(results.toString());\n    Assert.assertEquals(Nested2.TOTAL_ITERS, result.getRunCount());\n    Assert.assertEquals(results.toString(), \"SFAAAAAAAA\", results.toString());\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18bf84f26e85b274460f472a6e42de37fda19f7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","18bf84f26e85b274460f472a6e42de37fda19f7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"18bf84f26e85b274460f472a6e42de37fda19f7c":["5eb2511ababf862ea11e10761c70ee560cd84510","b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18bf84f26e85b274460f472a6e42de37fda19f7c","5eb2511ababf862ea11e10761c70ee560cd84510"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}