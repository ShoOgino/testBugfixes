{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setAutoGeneratePhraseQueries(boolean).mjava","commits":[{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setAutoGeneratePhraseQueries(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set to true if phrase queries will be automatically generated\n   * when the analyzer returns more than one term from whitespace\n   * delimited text.\n   * NOTE: this behavior may not be suitable for all languages.\n   * <p>\n   * Set to false if phrase queries should only be generated when\n   * surrounded by double quotes.\n   */\n  public final void setAutoGeneratePhraseQueries(boolean value) {\n    if (value == false && !hasNewAPI)\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\n       + \" to use setAutoGeneratePhraseQueries(false)\");\n    this.autoGeneratePhraseQueries = value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setAutoGeneratePhraseQueries(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set to true if phrase queries will be automatically generated\n   * when the analyzer returns more than one term from whitespace\n   * delimited text.\n   * NOTE: this behavior may not be suitable for all languages.\n   * <p>\n   * Set to false if phrase queries should only be generated when\n   * surrounded by double quotes.\n   */\n  public final void setAutoGeneratePhraseQueries(boolean value) {\n    if (value == false && !hasNewAPI)\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\n       + \" to use setAutoGeneratePhraseQueries(false)\");\n    this.autoGeneratePhraseQueries = value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#setAutoGeneratePhraseQueries(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setAutoGeneratePhraseQueries(boolean).mjava","sourceNew":"  /**\r\n   * Set to true if phrase queries will be automatically generated\r\n   * when the analyzer returns more than one term from whitespace\r\n   * delimited text.\r\n   * NOTE: this behavior may not be suitable for all languages.\r\n   * <p>\r\n   * Set to false if phrase queries should only be generated when\r\n   * surrounded by double quotes.\r\n   */\r\n  public final void setAutoGeneratePhraseQueries(boolean value) {\r\n    if (value == false && !hasNewAPI)\r\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\r\n       + \" to use setAutoGeneratePhraseQueries(false)\");\r\n    this.autoGeneratePhraseQueries = value;\r\n  }\r\n\n","sourceOld":"  /**\n   * Set to true if phrase queries will be automatically generated\n   * when the analyzer returns more than one term from whitespace\n   * delimited text.\n   * NOTE: this behavior may not be suitable for all languages.\n   * <p>\n   * Set to false if phrase queries should only be generated when\n   * surrounded by double quotes.\n   */\n  public final void setAutoGeneratePhraseQueries(boolean value) {\n    if (value == false && !hasNewAPI)\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\n       + \" to use setAutoGeneratePhraseQueries(false)\");\n    this.autoGeneratePhraseQueries = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#setAutoGeneratePhraseQueries(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setAutoGeneratePhraseQueries(boolean).mjava","sourceNew":"  /**\r\n   * Set to true if phrase queries will be automatically generated\r\n   * when the analyzer returns more than one term from whitespace\r\n   * delimited text.\r\n   * NOTE: this behavior may not be suitable for all languages.\r\n   * <p>\r\n   * Set to false if phrase queries should only be generated when\r\n   * surrounded by double quotes.\r\n   */\r\n  public final void setAutoGeneratePhraseQueries(boolean value) {\r\n    if (value == false && !hasNewAPI)\r\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\r\n       + \" to use setAutoGeneratePhraseQueries(false)\");\r\n    this.autoGeneratePhraseQueries = value;\r\n  }\r\n\n","sourceOld":"  /**\n   * Set to true if phrase queries will be automatically generated\n   * when the analyzer returns more than one term from whitespace\n   * delimited text.\n   * NOTE: this behavior may not be suitable for all languages.\n   * <p>\n   * Set to false if phrase queries should only be generated when\n   * surrounded by double quotes.\n   */\n  public final void setAutoGeneratePhraseQueries(boolean value) {\n    if (value == false && !hasNewAPI)\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\n       + \" to use setAutoGeneratePhraseQueries(false)\");\n    this.autoGeneratePhraseQueries = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setAutoGeneratePhraseQueries(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Set to true if phrase queries will be automatically generated\n   * when the analyzer returns more than one term from whitespace\n   * delimited text.\n   * NOTE: this behavior may not be suitable for all languages.\n   * <p>\n   * Set to false if phrase queries should only be generated when\n   * surrounded by double quotes.\n   */\n  public final void setAutoGeneratePhraseQueries(boolean value) {\n    if (value == false && !hasNewAPI)\n      throw new IllegalArgumentException(\"You must implement the new API: getFieldQuery(String,String,boolean)\"\n       + \" to use setAutoGeneratePhraseQueries(false)\");\n    this.autoGeneratePhraseQueries = value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","5f4e87790277826a2aea119328600dfb07761f32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}