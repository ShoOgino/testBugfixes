{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a8954ce7749d4df8d7288d333126e079af73f12","date":1340166187,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setRequestHandler(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setQueryType(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrClient().add(doc);\n    getSolrClient().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setRequestHandler(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrClient()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrServer().add(doc);\n    getSolrServer().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setRequestHandler(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrServer()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c033cd5a1320f54b12d30182a3c231d8d38da4e","date":1567086766,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TermsResponseTest#testTermsResponse().mjava","sourceNew":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrClient().add(doc);\n    getSolrClient().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setRequestHandler(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n\n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrClient()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","sourceOld":"  @Test\n  public void testTermsResponse() throws Exception {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"terms_s\", \"samsung\");\n    getSolrClient().add(doc);\n    getSolrClient().commit(true, true);\n\n    SolrQuery query = new SolrQuery();\n    query.setRequestHandler(\"/terms\");\n    query.setTerms(true);\n    query.setTermsLimit(5);\n    query.setTermsLower(\"s\");\n    query.setTermsPrefix(\"s\");\n    query.addTermsField(\"terms_s\");\n    query.setTermsMinCount(1);\n    \n    QueryRequest request = new QueryRequest(query);\n    List<Term> terms = request.process(getSolrClient()).getTermsResponse().getTerms(\"terms_s\");\n\n    Assert.assertNotNull(terms);\n    Assert.assertEquals(terms.size(), 1);\n\n    Term term = terms.get(0);\n    Assert.assertEquals(term.getTerm(), \"samsung\");\n    Assert.assertEquals(term.getFrequency(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a8954ce7749d4df8d7288d333126e079af73f12":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["7a8954ce7749d4df8d7288d333126e079af73f12"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c033cd5a1320f54b12d30182a3c231d8d38da4e"],"3c033cd5a1320f54b12d30182a3c231d8d38da4e":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"7a8954ce7749d4df8d7288d333126e079af73f12":["bafca15d8e408346a67f4282ad1143b88023893b"],"c26f00b574427b55127e869b935845554afde1fa":["7a8954ce7749d4df8d7288d333126e079af73f12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["3c033cd5a1320f54b12d30182a3c231d8d38da4e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c033cd5a1320f54b12d30182a3c231d8d38da4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}