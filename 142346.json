{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List,int,List,List).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List,int,List,List).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List,int,List,List).mjava","sourceNew":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #next(org.apache.lucene.analysis.Token)}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List shingle, int currentPermutationStartOffset, List currentPermutationRows, List currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(((Token) shingle.get(0)).startOffset());\n    token.setEndOffset(((Token) shingle.get(shingle.size() - 1)).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #next(org.apache.lucene.analysis.Token)}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List shingle, int currentPermutationStartOffset, List currentPermutationRows, List currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(((Token) shingle.get(0)).startOffset());\n    token.setEndOffset(((Token) shingle.get(shingle.size() - 1)).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List,int,List,List).mjava","sourceNew":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #next(org.apache.lucene.analysis.Token)}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #next(org.apache.lucene.analysis.Token)}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List shingle, int currentPermutationStartOffset, List currentPermutationRows, List currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(((Token) shingle.get(0)).startOffset());\n    token.setEndOffset(((Token) shingle.get(shingle.size() - 1)).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["60cdc0e643184821eb066795a8791cd82559f46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}