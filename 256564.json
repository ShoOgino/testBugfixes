{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.requiresPositions(flags)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & PostingsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.requiresPositions(flags)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & PostingsEnum.FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.requiresPositions(flags)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & PostingsEnum.FLAG_FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.requiresPositions(flags)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && (flags & PostingsEnum.FREQS) != 0;\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        if (inDocsAndPositions == null) {\n          return null;\n        }\n\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(newToOld(liveDocs), inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(newToOld(liveDocs), inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["a9023c2bf8056230665bace786651c0716d78d31"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["a9023c2bf8056230665bace786651c0716d78d31","cb5311f0bff57ce15a23909f4cfb953773630534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9023c2bf8056230665bace786651c0716d78d31":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a9023c2bf8056230665bace786651c0716d78d31"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a9023c2bf8056230665bace786651c0716d78d31":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}