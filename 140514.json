{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","commits":[{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongField(\"idx\", value, Store.NO));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(NumericRangeQuery.newLongRange(\"idx\", 0L, 10L, true, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = NumericRangeQuery.newLongRange(\"idx\", min, max, minInclusive, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongField(\"idx\", value, Store.NO));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(NumericRangeQuery.newLongRange(\"idx\", 0L, 10L, true, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = NumericRangeQuery.newLongRange(\"idx\", min, max, minInclusive, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongField(\"idx\", value, Store.NO));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(NumericRangeQuery.newLongRange(\"idx\", 0L, 10L, true, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = NumericRangeQuery.newLongRange(\"idx\", min, max, minInclusive, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}