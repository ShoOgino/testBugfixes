{"path":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","commits":[{"id":"65a70ca4e6df183f7a8f69687b55379fea0ddac2","date":1225224829,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    stats.size.incrementAndGet();\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n    if (stats.size.get() > upperWaterMark) {\n      if (newThreadForCleanup) {\n        if (!markAndSweepLock.isLocked()) {\n          new Thread() {\n            public void run() {\n              markAndSweep();\n            }\n          }.start();\n        }\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65c929c1b194a96c1990d03c2d8797f8ba426446","date":1225382798,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","sourceNew":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry != null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    stats.size.incrementAndGet();\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n    if (stats.size.get() > upperWaterMark) {\n      if (newThreadForCleanup) {\n        if (!markAndSweepLock.isLocked()) {\n          new Thread() {\n            public void run() {\n              markAndSweep();\n            }\n          }.start();\n        }\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":["46c2e69e24fdb80c38cccc44674ea27a8d993f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8fb7162ee942aa4eaab679a1663735647178e98","date":1225383080,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","sourceNew":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry == null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry != null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b","date":1225722778,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","sourceNew":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry == null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry == null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eaa3b356f379bef56d6457517e0158dac118e99e","date":1227476542,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(Object,Object).mjava","sourceNew":"  public Object put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry == null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public Object put(Object key, Object val) {\n    if (val == null) return null;\n    CacheEntry e = new CacheEntry(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry oldCacheEntry = map.put(key, e);\n    if (oldCacheEntry == null) {\n      stats.size.incrementAndGet();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (stats.size.get() > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"65c929c1b194a96c1990d03c2d8797f8ba426446":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"b8fb7162ee942aa4eaab679a1663735647178e98":["65c929c1b194a96c1990d03c2d8797f8ba426446"],"eaa3b356f379bef56d6457517e0158dac118e99e":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["b8fb7162ee942aa4eaab679a1663735647178e98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65c929c1b194a96c1990d03c2d8797f8ba426446":["b8fb7162ee942aa4eaab679a1663735647178e98"],"b8fb7162ee942aa4eaab679a1663735647178e98":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"eaa3b356f379bef56d6457517e0158dac118e99e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["65c929c1b194a96c1990d03c2d8797f8ba426446"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["eaa3b356f379bef56d6457517e0158dac118e99e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eaa3b356f379bef56d6457517e0158dac118e99e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}