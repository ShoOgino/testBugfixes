{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["22a2e66dfda83847e80095b8693c660742ab3e9c","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}