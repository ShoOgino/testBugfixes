{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","commits":[{"id":"bbe19aa0bae57e25d17544f8e883d688601a5d38","date":1454989105,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        HttpSolrClient one = new HttpSolrClient(rep.getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.setDistrib(false);\n        QueryResponse resp = one.query(query);\n        long hits = resp.getResults().getNumFound();\n        if (sliceDocCount == -1) {\n          sliceDocCount = hits;\n          docTotal += hits; \n        } else {\n          if (hits != sliceDocCount) {\n            return -1;\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","sourceNew":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        try (HttpSolrClient one = new HttpSolrClient(rep.getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.setDistrib(false);\n          QueryResponse resp = one.query(query);\n          long hits = resp.getResults().getNumFound();\n          if (sliceDocCount == -1) {\n            sliceDocCount = hits;\n            docTotal += hits;\n          } else {\n            if (hits != sliceDocCount) {\n              return -1;\n            }\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","sourceOld":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        HttpSolrClient one = new HttpSolrClient(rep.getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.setDistrib(false);\n        QueryResponse resp = one.query(query);\n        long hits = resp.getResults().getNumFound();\n        if (sliceDocCount == -1) {\n          sliceDocCount = hits;\n          docTotal += hits; \n        } else {\n          if (hits != sliceDocCount) {\n            return -1;\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","sourceNew":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        try (HttpSolrClient one = getHttpSolrClient(rep.getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.setDistrib(false);\n          QueryResponse resp = one.query(query);\n          long hits = resp.getResults().getNumFound();\n          if (sliceDocCount == -1) {\n            sliceDocCount = hits;\n            docTotal += hits;\n          } else {\n            if (hits != sliceDocCount) {\n              return -1;\n            }\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","sourceOld":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        try (HttpSolrClient one = new HttpSolrClient(rep.getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.setDistrib(false);\n          QueryResponse resp = one.query(query);\n          long hits = resp.getResults().getNumFound();\n          if (sliceDocCount == -1) {\n            sliceDocCount = hits;\n            docTotal += hits;\n          } else {\n            if (hits != sliceDocCount) {\n              return -1;\n            }\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkSlicesSameCounts(DocCollection).mjava","sourceNew":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        try (HttpSolrClient one = getHttpSolrClient(rep.getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.setDistrib(false);\n          QueryResponse resp = one.query(query);\n          long hits = resp.getResults().getNumFound();\n          if (sliceDocCount == -1) {\n            sliceDocCount = hits;\n            docTotal += hits;\n          } else {\n            if (hits != sliceDocCount) {\n              return -1;\n            }\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","sourceOld":"  // Insure that counts are the same for all replicas in each shard\n  // Return the total doc count for the query.\n  private long checkSlicesSameCounts(DocCollection dColl) throws SolrServerException, IOException {\n    long docTotal = 0; // total number of documents found counting only one replica per slice.\n    for (Slice slice : dColl.getActiveSlices()) {\n      long sliceDocCount = -1;\n      for (Replica rep : slice.getReplicas()) {\n        try (HttpSolrClient one = new HttpSolrClient(rep.getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.setDistrib(false);\n          QueryResponse resp = one.query(query);\n          long hits = resp.getResults().getNumFound();\n          if (sliceDocCount == -1) {\n            sliceDocCount = hits;\n            docTotal += hits;\n          } else {\n            if (hits != sliceDocCount) {\n              return -1;\n            }\n          }\n        }\n      }\n    }\n    return docTotal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["bbe19aa0bae57e25d17544f8e883d688601a5d38"],"bbe19aa0bae57e25d17544f8e883d688601a5d38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bbe19aa0bae57e25d17544f8e883d688601a5d38":["859081acf00749f5dd462772c571d611d4a4d2db"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe19aa0bae57e25d17544f8e883d688601a5d38"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}