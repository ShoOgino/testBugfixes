{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#get(long,boolean).mjava","commits":[{"id":"39d69912999d6e0acfb6eb6be558fcc165eee0b2","date":1308066875,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#get(long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Call this if you require a searcher reflecting all\n   *  changes as of the target generation, and you don't\n   *  require deletions to be reflected.  Note that the\n   *  returned searcher may still reflect some or all\n   *  deletions.\n   *\n   * @param targetGen Returned searcher must reflect changes\n   * as of this generation\n   *\n   * @param requireDeletes If true, the returned searcher must\n   * reflect all deletions.  This can be substantially more\n   * costly than not applying deletes.  Note that if you\n   * pass false, it's still possible that some or all\n   * deletes may have been applied.\n   **/\n  public synchronized IndexSearcher get(long targetGen, boolean requireDeletes) {\n\n    assert noDeletesSearchingGen.get() >= searchingGen.get();\n\n    if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n      // Must wait\n      //final long t0 = System.nanoTime();\n      for(WaitingListener listener : waitingListeners) {\n        listener.waiting(requireDeletes, targetGen);\n      }\n      while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n        //System.out.println(Thread.currentThread().getName() + \": wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes);\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      //final long waitNS = System.nanoTime()-t0;\n      //System.out.println(Thread.currentThread().getName() + \": done wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes + \" WAIT msec=\" + (waitNS/1000000.0));\n    }\n\n    return get(requireDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#get(long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Call this if you require a searcher reflecting all\n   *  changes as of the target generation, and you don't\n   *  require deletions to be reflected.  Note that the\n   *  returned searcher may still reflect some or all\n   *  deletions.\n   *\n   * @param targetGen Returned searcher must reflect changes\n   * as of this generation\n   *\n   * @param requireDeletes If true, the returned searcher must\n   * reflect all deletions.  This can be substantially more\n   * costly than not applying deletes.  Note that if you\n   * pass false, it's still possible that some or all\n   * deletes may have been applied.\n   **/\n  public synchronized IndexSearcher get(long targetGen, boolean requireDeletes) {\n\n    assert noDeletesSearchingGen.get() >= searchingGen.get();\n\n    if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n      // Must wait\n      //final long t0 = System.nanoTime();\n      for(WaitingListener listener : waitingListeners) {\n        listener.waiting(requireDeletes, targetGen);\n      }\n      while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n        //System.out.println(Thread.currentThread().getName() + \": wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes);\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      //final long waitNS = System.nanoTime()-t0;\n      //System.out.println(Thread.currentThread().getName() + \": done wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes + \" WAIT msec=\" + (waitNS/1000000.0));\n    }\n\n    return get(requireDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#get(long,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#get(long,boolean).mjava","sourceNew":"  /** Call this if you require a searcher reflecting all\n   *  changes as of the target generation, and you don't\n   *  require deletions to be reflected.  Note that the\n   *  returned searcher may still reflect some or all\n   *  deletions.\n   *\n   * @param targetGen Returned searcher must reflect changes\n   * as of this generation\n   *\n   * @param requireDeletes If true, the returned searcher must\n   * reflect all deletions.  This can be substantially more\n   * costly than not applying deletes.  Note that if you\n   * pass false, it's still possible that some or all\n   * deletes may have been applied.\n   **/\n  public synchronized IndexSearcher get(long targetGen, boolean requireDeletes) {\n\n    assert noDeletesSearchingGen.get() >= searchingGen.get(): \"noDeletesSearchingGen=\" + noDeletesSearchingGen.get() + \" searchingGen=\" + searchingGen.get();\n\n    if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n      // Must wait\n      //final long t0 = System.nanoTime();\n      for(WaitingListener listener : waitingListeners) {\n        listener.waiting(requireDeletes, targetGen);\n      }\n      while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n        //System.out.println(Thread.currentThread().getName() + \": wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes);\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      //final long waitNS = System.nanoTime()-t0;\n      //System.out.println(Thread.currentThread().getName() + \": done wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes + \" WAIT msec=\" + (waitNS/1000000.0));\n    }\n\n    return get(requireDeletes);\n  }\n\n","sourceOld":"  /** Call this if you require a searcher reflecting all\n   *  changes as of the target generation, and you don't\n   *  require deletions to be reflected.  Note that the\n   *  returned searcher may still reflect some or all\n   *  deletions.\n   *\n   * @param targetGen Returned searcher must reflect changes\n   * as of this generation\n   *\n   * @param requireDeletes If true, the returned searcher must\n   * reflect all deletions.  This can be substantially more\n   * costly than not applying deletes.  Note that if you\n   * pass false, it's still possible that some or all\n   * deletes may have been applied.\n   **/\n  public synchronized IndexSearcher get(long targetGen, boolean requireDeletes) {\n\n    assert noDeletesSearchingGen.get() >= searchingGen.get();\n\n    if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n      // Must wait\n      //final long t0 = System.nanoTime();\n      for(WaitingListener listener : waitingListeners) {\n        listener.waiting(requireDeletes, targetGen);\n      }\n      while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n        //System.out.println(Thread.currentThread().getName() + \": wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes);\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      //final long waitNS = System.nanoTime()-t0;\n      //System.out.println(Thread.currentThread().getName() + \": done wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes + \" WAIT msec=\" + (waitNS/1000000.0));\n    }\n\n    return get(requireDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#get(long,boolean).mjava","sourceNew":null,"sourceOld":"  /** Call this if you require a searcher reflecting all\n   *  changes as of the target generation, and you don't\n   *  require deletions to be reflected.  Note that the\n   *  returned searcher may still reflect some or all\n   *  deletions.\n   *\n   * @param targetGen Returned searcher must reflect changes\n   * as of this generation\n   *\n   * @param requireDeletes If true, the returned searcher must\n   * reflect all deletions.  This can be substantially more\n   * costly than not applying deletes.  Note that if you\n   * pass false, it's still possible that some or all\n   * deletes may have been applied.\n   **/\n  public synchronized IndexSearcher get(long targetGen, boolean requireDeletes) {\n\n    assert noDeletesSearchingGen.get() >= searchingGen.get(): \"noDeletesSearchingGen=\" + noDeletesSearchingGen.get() + \" searchingGen=\" + searchingGen.get();\n\n    if (targetGen > getCurrentSearchingGen(requireDeletes)) {\n      // Must wait\n      //final long t0 = System.nanoTime();\n      for(WaitingListener listener : waitingListeners) {\n        listener.waiting(requireDeletes, targetGen);\n      }\n      while (targetGen > getCurrentSearchingGen(requireDeletes)) {\n        //System.out.println(Thread.currentThread().getName() + \": wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes);\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      //final long waitNS = System.nanoTime()-t0;\n      //System.out.println(Thread.currentThread().getName() + \": done wait fresh searcher targetGen=\" + targetGen + \" vs searchingGen=\" + getCurrentSearchingGen(requireDeletes) + \" requireDeletes=\" + requireDeletes + \" WAIT msec=\" + (waitNS/1000000.0));\n    }\n\n    return get(requireDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606baff722a317c76a92b111d183b54b6e6e5741":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["606baff722a317c76a92b111d183b54b6e6e5741"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["606baff722a317c76a92b111d183b54b6e6e5741"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39d69912999d6e0acfb6eb6be558fcc165eee0b2","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"606baff722a317c76a92b111d183b54b6e6e5741":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}