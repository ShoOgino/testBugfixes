{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(boolean,FacetIndexingParams).mjava","commits":[{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(boolean,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets. */\n  protected final void initIndex(boolean forceDisk, FacetIndexingParams fip) throws Exception {\n    int partitionSize = fip.getPartitionSize();\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize + \"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, fip);\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = DirectoryReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = DirectoryReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(boolean,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets. */\n  protected final void initIndex(boolean forceDisk, FacetIndexingParams fip) throws Exception {\n    int partitionSize = fip.getPartitionSize();\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize + \"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, fip);\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = DirectoryReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = DirectoryReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(boolean,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets. */\n  protected final void initIndex(boolean forceDisk, FacetIndexingParams fip) throws Exception {\n    int partitionSize = fip.getPartitionSize();\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize + \"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, fip);\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = DirectoryReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(boolean,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets. */\n  protected final void initIndex(boolean forceDisk, FacetIndexingParams fip) throws Exception {\n    int partitionSize = fip.getPartitionSize();\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize + \"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, fip);\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = DirectoryReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["d33e19a97046248623a7591aeaa6547233fd15e2","61d5f95d14e5b9b046998c51e16709a398c15226","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}