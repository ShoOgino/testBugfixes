{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetSource(String).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetSource(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determine the offset source for the specified field.  The default algorithm is as follows:\n   * <ol>\n   * <li>This calls {@link #getFieldInfo(String)}. Note this returns null if there is no searcher or if the\n   * field isn't found there.</li>\n   * <li> If there's a field info it has\n   * {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS} then {@link OffsetSource#POSTINGS} is\n   * returned.</li>\n   * <li>If there's a field info and {@link FieldInfo#hasVectors()} then {@link OffsetSource#TERM_VECTORS} is\n   * returned (note we can't check here if the TV has offsets; if there isn't then an exception will get thrown\n   * down the line).</li>\n   * <li>Fall-back: {@link OffsetSource#ANALYSIS} is returned.</li>\n   * </ol>\n   * <p>\n   * Note that the highlighter sometimes switches to something else based on the query, such as if you have\n   * {@link OffsetSource#POSTINGS_WITH_TERM_VECTORS} but in fact don't need term vectors.\n   */\n  protected OffsetSource getOffsetSource(String field) {\n    FieldInfo fieldInfo = getFieldInfo(field);\n    if (fieldInfo != null) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n        return fieldInfo.hasVectors() ? OffsetSource.POSTINGS_WITH_TERM_VECTORS : OffsetSource.POSTINGS;\n      }\n      if (fieldInfo.hasVectors()) { // unfortunately we can't also check if the TV has offsets\n        return OffsetSource.TERM_VECTORS;\n      }\n    }\n    return OffsetSource.ANALYSIS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetSource(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determine the offset source for the specified field.  The default algorithm is as follows:\n   * <ol>\n   * <li>This calls {@link #getFieldInfo(String)}. Note this returns null if there is no searcher or if the\n   * field isn't found there.</li>\n   * <li> If there's a field info it has\n   * {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS} then {@link OffsetSource#POSTINGS} is\n   * returned.</li>\n   * <li>If there's a field info and {@link FieldInfo#hasVectors()} then {@link OffsetSource#TERM_VECTORS} is\n   * returned (note we can't check here if the TV has offsets; if there isn't then an exception will get thrown\n   * down the line).</li>\n   * <li>Fall-back: {@link OffsetSource#ANALYSIS} is returned.</li>\n   * </ol>\n   * <p>\n   * Note that the highlighter sometimes switches to something else based on the query, such as if you have\n   * {@link OffsetSource#POSTINGS_WITH_TERM_VECTORS} but in fact don't need term vectors.\n   */\n  protected OffsetSource getOffsetSource(String field) {\n    FieldInfo fieldInfo = getFieldInfo(field);\n    if (fieldInfo != null) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n        return fieldInfo.hasVectors() ? OffsetSource.POSTINGS_WITH_TERM_VECTORS : OffsetSource.POSTINGS;\n      }\n      if (fieldInfo.hasVectors()) { // unfortunately we can't also check if the TV has offsets\n        return OffsetSource.TERM_VECTORS;\n      }\n    }\n    return OffsetSource.ANALYSIS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}