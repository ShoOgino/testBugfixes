{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"R:   leaf\");\n\n      // Leaf node\n      state.in.seek(leafBlockFPs[nodeID-leafNodeOffset]);\n      \n      // How many points are stored in this leaf cell:\n      int count = state.in.readVInt();\n\n      // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:\n      //state.docs.grow(count);\n      int docID = 0;\n      for(int i=0;i<count;i++) {\n        docID += state.in.readVInt();\n        state.visitor.visit(docID);\n      }\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","sourceOld":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"R:   leaf\");\n\n      // Leaf node\n      state.in.seek(leafBlockFPs[nodeID-leafNodeOffset]);\n      \n      // How many points are stored in this leaf cell:\n      int count = state.in.readVInt();\n\n      // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:\n      //state.docs.grow(count);\n      int docID = 0;\n      for(int i=0;i<count;i++) {\n        docID += state.in.readVInt();\n        state.visitor.visit(docID);\n      }\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","sourceOld":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","sourceOld":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#addAll(IntersectState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","sourceOld":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#addAll(IntersectState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#addAll(IntersectState,int).mjava","sourceNew":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","sourceOld":"  /** Fast path: this is called when the query box fully encompasses all cells under this node. */\n  private void addAll(IntersectState state, int nodeID) throws IOException {\n    //System.out.println(\"R: addAll nodeID=\" + nodeID);\n\n    if (nodeID >= leafNodeOffset) {\n      //System.out.println(\"ADDALL\");\n      visitDocIDs(state.in, leafBlockFPs[nodeID-leafNodeOffset], state.visitor);\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n    } else {\n      addAll(state, 2*nodeID);\n      addAll(state, 2*nodeID+1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}