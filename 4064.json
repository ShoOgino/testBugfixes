{"path":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#parseLuceneVersionString(String).mjava","commits":[{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88","date":1546726477,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n          \"You should not use LATEST as luceneMatchVersion property: \"+\n              \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n              \"sizable changes may happen. If precise back compatibility is important \"+\n              \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n\n    return version;\n  }\n\n","sourceOld":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88":["ee622110ba6021d0390037e77574743c1e55348c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88"],"2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}