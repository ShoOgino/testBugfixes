{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","commits":[{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQueryInternal(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryInternal(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","sourceOld":"  public Query getRangeQuery(QParser parser, SchemaField field, final CurrencyValue p1, final CurrencyValue p2, final boolean minInclusive, final boolean maxInclusive) {\n    String currencyCode = (p1 != null) ? p1.getCurrencyCode() :\n        (p2 != null) ? p2.getCurrencyCode() : defaultCurrency;\n\n    // ValueSourceRangeFilter doesn't check exists(), so we have to\n    final Query docsWithValues = new DocValuesFieldExistsQuery(getAmountField(field).getName());\n    final Query vsRangeFilter = new ValueSourceRangeFilter\n        (new RawCurrencyValueSource(field, currencyCode, parser),\n            p1 == null ? null : p1.getAmount() + \"\",\n            p2 == null ? null : p2.getAmount() + \"\",\n            minInclusive, maxInclusive);\n    return new ConstantScoreQuery(new BooleanQuery.Builder()\n        .add(docsWithValues, Occur.FILTER)\n        .add(vsRangeFilter, Occur.FILTER).build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c81907bd971f786e378654d32b80da32b0e950d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}