{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#makeReplicaFirstWatcher(String,Slice,Replica).mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#makeReplicaFirstWatcher(String,Slice,Replica).mjava","pathOld":"/dev/null","sourceNew":"  // Put the replica in at the head of the queue and send all nodes with the same sequence number to the back of the list\n  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    // First, queue up the preferred leader at the head of the queue.\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; // let's not continue if we didn't get what we expect. Possibly we're offline etc..\n    }\n\n    List<String> electionNodesTmp = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    // Now find other nodes that have the same sequence number as this node and re-queue them at the end of the queue.\n    electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#makeReplicaFirstWatcher(String,Slice,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#makeReplicaFirstWatcher(String,Slice,Replica).mjava","sourceNew":"  // Put the replica in at the head of the queue and send all nodes with the same sequence number to the back of the list\n  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    // First, queue up the preferred leader at the head of the queue.\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; // let's not continue if we didn't get what we expect. Possibly we're offline etc..\n    }\n\n    List<String> electionNodesTmp = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    // Now find other nodes that have the same sequence number as this node and re-queue them at the end of the queue.\n    electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n\n","sourceOld":"  // Put the replica in at the head of the queue and send all nodes with the same sequence number to the back of the list\n  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    // First, queue up the preferred leader at the head of the queue.\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; // let's not continue if we didn't get what we expect. Possibly we're offline etc..\n    }\n\n    List<String> electionNodesTmp = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    // Now find other nodes that have the same sequence number as this node and re-queue them at the end of the queue.\n    electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}