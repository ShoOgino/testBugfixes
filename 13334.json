{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testEquality().mjava","commits":[{"id":"edefb5aa2f5e63eb483c128a8ee99c939fdf041d","date":1493251532,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquality() {\n    SpanQuery sq1 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n    BytesRef payload1 = new BytesRef(\"pay1\");\n    BytesRef payload2 = new BytesRef(\"pay2\");\n    SpanQuery query1 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));\n    SpanQuery query2 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload1));\n    SpanQuery query3 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload2));\n    SpanQuery query4 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload2));\n    SpanQuery query5 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));\n\n    assertEquals(query1, query5);\n    assertFalse(query1.equals(query2));\n    assertFalse(query1.equals(query3));\n    assertFalse(query1.equals(query4));\n    assertFalse(query2.equals(query3));\n    assertFalse(query2.equals(query4));\n    assertFalse(query3.equals(query4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ad966686d8994b78aff2375da1a0583bf0cf5ee","date":1493322197,"type":0,"author":"Erik Hatcher","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquality() {\n    SpanQuery sq1 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n    BytesRef payload1 = new BytesRef(\"pay1\");\n    BytesRef payload2 = new BytesRef(\"pay2\");\n    SpanQuery query1 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));\n    SpanQuery query2 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload1));\n    SpanQuery query3 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload2));\n    SpanQuery query4 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload2));\n    SpanQuery query5 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));\n\n    assertEquals(query1, query5);\n    assertFalse(query1.equals(query2));\n    assertFalse(query1.equals(query3));\n    assertFalse(query1.equals(query4));\n    assertFalse(query2.equals(query3));\n    assertFalse(query2.equals(query4));\n    assertFalse(query3.equals(query4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquality() {\n    SpanQuery sq1 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n    BytesRef payload1 = new BytesRef(\"pay1\");\n    BytesRef payload2 = new BytesRef(\"pay2\");\n    SpanQuery query1 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));\n    SpanQuery query2 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload1));\n    SpanQuery query3 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload2));\n    SpanQuery query4 = new SpanPayloadCheckQuery(sq2, Collections.singletonList(payload2));\n    SpanQuery query5 = new SpanPayloadCheckQuery(sq1, Collections.singletonList(payload1));\n\n    assertEquals(query1, query5);\n    assertFalse(query1.equals(query2));\n    assertFalse(query1.equals(query3));\n    assertFalse(query1.equals(query4));\n    assertFalse(query2.equals(query3));\n    assertFalse(query2.equals(query4));\n    assertFalse(query3.equals(query4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edefb5aa2f5e63eb483c128a8ee99c939fdf041d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ad966686d8994b78aff2375da1a0583bf0cf5ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","edefb5aa2f5e63eb483c128a8ee99c939fdf041d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","edefb5aa2f5e63eb483c128a8ee99c939fdf041d","9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"edefb5aa2f5e63eb483c128a8ee99c939fdf041d":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"9ad966686d8994b78aff2375da1a0583bf0cf5ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}