{"path":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}