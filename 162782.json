{"path":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixQuery#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers\",\n                                        \"/Computers/Mac\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"/Computers\"));\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"All documents in /Computers category and below\", 3, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"/Computers/Mac\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"One in /Computers/Mac\", 1, hits.length);\n\n    query = new PrefixQuery(new Term(\"category\", \"\"));\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"category\");\n    assertFalse(query.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"everything\", 3, hits.length);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}