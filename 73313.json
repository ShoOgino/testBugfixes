{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestSplittingBreakIterator#testBreakIterator(BreakIterator,String,String).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestSplittingBreakIterator#testBreakIterator(BreakIterator,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testBreakIterator(BreakIterator bi, String text, String boundaries) {\n    bi.setText(text);\n\n    //Test first & last\n    testFirstAndLast(bi, text, boundaries);\n\n    //Test if expected boundaries are consistent with reading them from next() in a loop:\n    assertEquals(boundaries, readBoundariesToString(bi, text));\n\n    //Test following() and preceding():\n    // get each index, randomized in case their is a sequencing bug:\n    List<Integer> indexes = randomIntsBetweenInclusive(text.length() + 1);\n    testFollowing(bi, text, boundaries, indexes);\n    testPreceding(bi, text, boundaries, indexes);\n\n    //Test previous():\n    testPrevious(bi, text, boundaries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestSplittingBreakIterator#testBreakIterator(BreakIterator,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testBreakIterator(BreakIterator bi, String text, String boundaries) {\n    bi.setText(text);\n\n    //Test first & last\n    testFirstAndLast(bi, text, boundaries);\n\n    //Test if expected boundaries are consistent with reading them from next() in a loop:\n    assertEquals(boundaries, readBoundariesToString(bi, text));\n\n    //Test following() and preceding():\n    // get each index, randomized in case their is a sequencing bug:\n    List<Integer> indexes = randomIntsBetweenInclusive(text.length() + 1);\n    testFollowing(bi, text, boundaries, indexes);\n    testPreceding(bi, text, boundaries, indexes);\n\n    //Test previous():\n    testPrevious(bi, text, boundaries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}