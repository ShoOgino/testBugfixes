{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        FileStream stream = (FileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      @Override\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      @Override\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      @Override\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      @Override\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      @Override\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      @Override\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      @Override\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      @Override\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a899ae08a2414e44e9aec7db9783e3da08996d9","date":1380547227,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      @Override\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      @Override\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      @Override\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return BinaryResponseParser.BINARY_CONTENT_TYPE;\n      }\n\n      @Override\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      @Override\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      @Override\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      @Override\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return \"application/octet-stream\";\n      }\n\n      @Override\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#registerFileStreamResponseWriter().mjava","sourceNew":null,"sourceOld":"  /**\n   * A ResponseWriter is registered automatically for wt=filestream This response writer is used to transfer index files\n   * in a block-by-block manner within the same HTTP response.\n   */\n  private void registerFileStreamResponseWriter() {\n    core.registerResponseWriter(FILE_STREAM, new BinaryQueryResponseWriter() {\n      @Override\n      public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse resp) throws IOException {\n        DirectoryFileStream stream = (DirectoryFileStream) resp.getValues().get(FILE_STREAM);\n        stream.write(out);\n      }\n\n      @Override\n      public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) {\n        throw new RuntimeException(\"This is a binary writer , Cannot write to a characterstream\");\n      }\n\n      @Override\n      public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n        return BinaryResponseParser.BINARY_CONTENT_TYPE;\n      }\n\n      @Override\n      public void init(NamedList args) { /*no op*/ }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","7530de27b87b961b51f01bd1299b7004d46e8823"],"7a899ae08a2414e44e9aec7db9783e3da08996d9":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0d196318cb8ce39ae32035f290cd1397833e472":["7a899ae08a2414e44e9aec7db9783e3da08996d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"f2126b84bd093fa3d921582a109a0ee578c28126":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0d196318cb8ce39ae32035f290cd1397833e472"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a899ae08a2414e44e9aec7db9783e3da08996d9":["a0d196318cb8ce39ae32035f290cd1397833e472"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a0d196318cb8ce39ae32035f290cd1397833e472":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d9405f486872f1e416304dfe389741f4ee2f8a4d","fe33227f6805edab2036cbb80645cc4e2d1fa424","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a899ae08a2414e44e9aec7db9783e3da08996d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}