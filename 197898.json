{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"714058a3bd900646d4df5e21af2d4e109ed3e4bc","date":1341692336,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in, Charset.defaultCharset().name());\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in, Charset.defaultCharset().name());\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in, Charset.defaultCharset().name());\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in, Charset.defaultCharset().name());\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in);\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#main(String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * HunspellStemmer entry point.  Accepts two arguments: location of affix file and location of dic file\n   *\n   * @param args Program arguments.  Should contain location of affix file and location of dic file\n   * @throws IOException Can be thrown while reading from the files\n   * @throws ParseException Can be thrown while parsing the files\n   */\n  public static void main(String[] args) throws IOException, ParseException {\n    boolean ignoreCase = false;\n    int offset = 0;\n    \n    if (args.length < 2) {\n      System.out.println(\"usage: HunspellStemmer [-i] <affix location> <dic location>\");\n      System.exit(1);\n    }\n\n    if(args[offset].equals(\"-i\")) {\n      ignoreCase = true;\n      System.out.println(\"Ignoring case. All stems will be returned lowercased\");\n      offset++;\n    }\n    \n    InputStream affixInputStream = new FileInputStream(args[offset++]);\n    InputStream dicInputStream = new FileInputStream(args[offset++]);\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixInputStream, dicInputStream, Version.LUCENE_40, ignoreCase);\n\n    affixInputStream.close();\n    dicInputStream.close();\n    \n    HunspellStemmer stemmer = new HunspellStemmer(dictionary);\n\n    Scanner scanner = new Scanner(System.in, Charset.defaultCharset().name());\n    \n    System.out.print(\"> \");\n    while (scanner.hasNextLine()) {\n      String word = scanner.nextLine();\n      \n      if (\"exit\".equals(word)) {\n        break;\n      }\n\n      printStemResults(word, stemmer.stem(word.toCharArray(), word.length()));\n      \n      System.out.print(\"> \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"714058a3bd900646d4df5e21af2d4e109ed3e4bc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","714058a3bd900646d4df5e21af2d4e109ed3e4bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"714058a3bd900646d4df5e21af2d4e109ed3e4bc":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["714058a3bd900646d4df5e21af2d4e109ed3e4bc","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","46d8ada1fff8d18cb197c38c7983225162599948"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}