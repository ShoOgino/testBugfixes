{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((BigDecimal)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object[] values) throws IOException {\n\n    if(!(values[0] instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", values[0].getClass().getName(), values[0].toString());\n    }\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      bins = n.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    \n    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad296b823241a7204dcaa288b06f3df339fb2ed6"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}