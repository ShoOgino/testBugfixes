{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","sourceNew":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          public float getScore() { return DEFAULT_SCORE; }\n\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          public float getScore() { return DEFAULT_SCORE; }\n\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","sourceNew":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      @Override\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      @Override\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          @Override\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          public float getScore() { return DEFAULT_SCORE; }\n\n          @Override\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      @Override\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          public float getScore() { return DEFAULT_SCORE; }\n\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","sourceNew":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      @Override\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      @Override\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          @Override\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          public float getScore() { return DEFAULT_SCORE; }\n\n          @Override\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      @Override\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          public float getScore() { return DEFAULT_SCORE; }\n\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","sourceNew":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      @Override\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      @Override\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          @Override\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          public float getScore() { return DEFAULT_SCORE; }\n\n          @Override\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      @Override\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      @Override\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      @Override\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          @Override\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          public float getScore() { return DEFAULT_SCORE; }\n\n          @Override\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      @Override\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#createScoredDocIds(DocIdSet,int).mjava","sourceNew":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      @Override\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      @Override\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          @Override\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          public float getScore() { return DEFAULT_SCORE; }\n\n          @Override\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      @Override\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a ScoredDocIDs out of a given docIdSet and the total number of documents in an index  \n   */\n  public static final ScoredDocIDs createScoredDocIds(final DocIdSet docIdSet, final int maxDoc) {\n    return new ScoredDocIDs() {\n      private int size = -1;\n      @Override\n      public DocIdSet getDocIDs() { return docIdSet; }\n\n      @Override\n      public ScoredDocIDsIterator iterator() throws IOException {\n        final DocIdSetIterator docIterator = docIdSet.iterator();\n        return new ScoredDocIDsIterator() {\n          @Override\n          public boolean next() {\n            try {\n              return docIterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          public float getScore() { return DEFAULT_SCORE; }\n\n          @Override\n          public int getDocID() { return docIterator.docID(); }\n        };\n      }\n\n      @Override\n      public int size() {\n        // lazy size computation\n        if (size < 0) {\n          OpenBitSetDISI openBitSetDISI;\n          try {\n            openBitSetDISI = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          size = (int) openBitSetDISI.cardinality();\n        }\n        return size;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["7530de27b87b961b51f01bd1299b7004d46e8823"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}