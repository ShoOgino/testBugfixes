{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","commits":[{"id":"456b9f37ef1e5cc180f49b88b21723eb32c846fa","date":1462543026,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTION + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTION + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTION + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","sourceNew":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTIONORALIAS + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTION + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","sourceNew":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTIONORALIAS + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTION + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testSQLExceptionThrownWhenQueryAndConnUseDiffCollections().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"try\"})\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTIONORALIAS + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSQLExceptionThrownWhenQueryAndConnUseDiffCollections() throws Exception  {\n    String badCollection = COLLECTIONORALIAS + \"bad\";\n    String connectionString = \"jdbc:solr://\" + zkHost + \"?collection=\" + badCollection;\n    String sql = \"select id, a_i, a_s, a_f from \" + badCollection + \" order by a_i desc limit 2\";\n\n    //Bad connection string: wrong collection name\n    try(Connection connection = DriverManager.getConnection(connectionString)) {\n      try (Statement statement = connection.createStatement()) {\n        try (ResultSet ignored = statement.executeQuery(sql)) {\n          fail(\"Expected query against wrong collection to throw a SQLException.\");\n        }\n      }\n    } catch (SQLException ignore) {\n      // Expected exception due to miss matched collection\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8c969f15cd04d31e520319c619a445ae21f02d72"],"456b9f37ef1e5cc180f49b88b21723eb32c846fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","456b9f37ef1e5cc180f49b88b21723eb32c846fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["456b9f37ef1e5cc180f49b88b21723eb32c846fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","456b9f37ef1e5cc180f49b88b21723eb32c846fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456b9f37ef1e5cc180f49b88b21723eb32c846fa":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["456b9f37ef1e5cc180f49b88b21723eb32c846fa","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["9ba1b632c041956c93c41aa1143d16a567014891","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}