{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        @Override\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        @Override\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, (o1, o2) -> {\n        long freq1 = o1.getFrequency();\n        long freq2 = o2.getFrequency();\n\n        if (freq2 < freq1) {\n          return -1;\n        } else if (freq1 < freq2) {\n          return 1;\n        } else {\n          return o1.getTerm().compareTo(o2.getTerm());\n        }\n      });\n\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new Comparator<TermsResponse.Term>() {\n        @Override\n        public int compare(TermsResponse.Term o1, TermsResponse.Term o2) {\n          long freq1 = o1.getFrequency();\n          long freq2 = o2.getFrequency();\n          \n          if (freq2 < freq1) {\n            return -1;\n          } else if (freq1 < freq2) {\n            return 1;\n          } else {\n            return o1.getTerm().compareTo(o2.getTerm());\n          }\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":null,"bugIntro":["a45ddee14ecadf18bc50fff428911687afb4745d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a45ddee14ecadf18bc50fff428911687afb4745d","date":1560519742,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#getCountSorted(HashMap[String,TermsResponse.Term]).mjava","sourceNew":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, new TermCountComparator());\n      return arr;\n    }\n\n","sourceOld":"    // based on code from facets\n    public TermsResponse.Term[] getCountSorted(HashMap<String, TermsResponse.Term> data) {\n      TermsResponse.Term[] arr = data.values().toArray(new TermsResponse.Term[data.size()]);\n\n      Arrays.sort(arr, (o1, o2) -> {\n        long freq1 = o1.getFrequency();\n        long freq2 = o2.getFrequency();\n\n        if (freq2 < freq1) {\n          return -1;\n        } else if (freq1 < freq2) {\n          return 1;\n        } else {\n          return o1.getTerm().compareTo(o2.getTerm());\n        }\n      });\n\n      return arr;\n    }\n\n","bugFix":["3a0c04b71951333291abc7f317109a6a5957bd28","401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"a45ddee14ecadf18bc50fff428911687afb4745d":["3a0c04b71951333291abc7f317109a6a5957bd28"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"3a0c04b71951333291abc7f317109a6a5957bd28":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45ddee14ecadf18bc50fff428911687afb4745d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a45ddee14ecadf18bc50fff428911687afb4745d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3a0c04b71951333291abc7f317109a6a5957bd28"],"3a0c04b71951333291abc7f317109a6a5957bd28":["a45ddee14ecadf18bc50fff428911687afb4745d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}