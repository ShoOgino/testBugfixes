{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public boolean seekExact(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto >= 0) {\n          br.copyBytes(info.sortedTerms[termUpto].getKey());\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n","sourceOld":"      @Override\n      public boolean seekExact(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto >= 0) {\n          br.copyBytes(info.sortedTerms[termUpto].getKey());\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public boolean seekExact(BytesRef text, boolean useCache) {\n        termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms, BytesRef.getUTF8SortedAsUnicodeComparator());\n        return termUpto >= 0;\n      }\n\n","sourceOld":"      @Override\n      public boolean seekExact(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto >= 0) {\n          br.copyBytes(info.sortedTerms[termUpto].getKey());\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public boolean seekExact(BytesRef text) {\n        termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms, BytesRef.getUTF8SortedAsUnicodeComparator());\n        return termUpto >= 0;\n      }\n\n","sourceOld":"      @Override\n      public boolean seekExact(BytesRef text, boolean useCache) {\n        termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms, BytesRef.getUTF8SortedAsUnicodeComparator());\n        return termUpto >= 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public boolean seekExact(BytesRef text) {\n        termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms, BytesRef.getUTF8SortedAsUnicodeComparator());\n        return termUpto >= 0;\n      }\n\n","sourceOld":"      @Override\n      public boolean seekExact(BytesRef text, boolean useCache) {\n        termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms, BytesRef.getUTF8SortedAsUnicodeComparator());\n        return termUpto >= 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}