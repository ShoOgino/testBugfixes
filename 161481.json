{"path":"solr/core/src/test/org/apache/solr/client/solrj/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,HttpClientConnection,PoolingHttpClientConnectionManager).mjava","commits":[{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,HttpClientConnection,PoolingHttpClientConnectionManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,ManagedClientConnection).mjava","sourceNew":"  public void headerRequest(HttpHost target, HttpRoute route, HttpClientConnection conn, PoolingHttpClientConnectionManager cm)\n      throws IOException, HttpException {\n    HttpRequest req = new BasicHttpRequest(\"OPTIONS\", \"*\", HttpVersion.HTTP_1_1);\n\n    req.addHeader(\"Host\", target.getHostName());\n    if (!conn.isOpen()) {\n      // establish connection based on its route info\n      cm.connect(conn, route, 1000, context);\n      // and mark it as route complete\n      cm.routeComplete(conn, route, context);\n    }\n    conn.sendRequestHeader(req);\n    conn.flush();\n    conn.receiveResponseHeader();\n  }\n\n","sourceOld":"  public void headerRequest(HttpHost target, HttpRoute route, ManagedClientConnection conn)\n      throws IOException, HttpException {\n    HttpRequest req = new BasicHttpRequest(\"OPTIONS\", \"*\", HttpVersion.HTTP_1_1);\n\n    req.addHeader(\"Host\", target.getHostName());\n    BasicHttpParams p = new BasicHttpParams();\n    HttpProtocolParams.setVersion(p, HttpVersion.HTTP_1_1);\n    if (!conn.isOpen()) conn.open(route, new BasicHttpContext(null), p);\n    conn.sendRequestHeader(req);\n    conn.flush();\n    conn.receiveResponseHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,HttpClientConnection,PoolingHttpClientConnectionManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,HttpClientConnection,PoolingHttpClientConnectionManager).mjava","sourceNew":"  public void headerRequest(HttpHost target, HttpRoute route, HttpClientConnection conn, PoolingHttpClientConnectionManager cm)\n      throws IOException, HttpException {\n    HttpRequest req = new BasicHttpRequest(\"OPTIONS\", \"*\", HttpVersion.HTTP_1_1);\n\n    req.addHeader(\"Host\", target.getHostName());\n    if (!conn.isOpen()) {\n      // establish connection based on its route info\n      cm.connect(conn, route, 1000, context);\n      // and mark it as route complete\n      cm.routeComplete(conn, route, context);\n    }\n    conn.sendRequestHeader(req);\n    conn.flush();\n    conn.receiveResponseHeader();\n  }\n\n","sourceOld":"  public void headerRequest(HttpHost target, HttpRoute route, HttpClientConnection conn, PoolingHttpClientConnectionManager cm)\n      throws IOException, HttpException {\n    HttpRequest req = new BasicHttpRequest(\"OPTIONS\", \"*\", HttpVersion.HTTP_1_1);\n\n    req.addHeader(\"Host\", target.getHostName());\n    if (!conn.isOpen()) {\n      // establish connection based on its route info\n      cm.connect(conn, route, 1000, context);\n      // and mark it as route complete\n      cm.routeComplete(conn, route, context);\n    }\n    conn.sendRequestHeader(req);\n    conn.flush();\n    conn.receiveResponseHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,HttpClientConnection,PoolingHttpClientConnectionManager).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/ConnectionReuseTest#headerRequest(HttpHost,HttpRoute,HttpClientConnection,PoolingHttpClientConnectionManager).mjava","sourceNew":"  public void headerRequest(HttpHost target, HttpRoute route, HttpClientConnection conn, PoolingHttpClientConnectionManager cm)\n      throws IOException, HttpException {\n    HttpRequest req = new BasicHttpRequest(\"OPTIONS\", \"*\", HttpVersion.HTTP_1_1);\n\n    req.addHeader(\"Host\", target.getHostName());\n    if (!conn.isOpen()) {\n      // establish connection based on its route info\n      cm.connect(conn, route, 1000, context);\n      // and mark it as route complete\n      cm.routeComplete(conn, route, context);\n    }\n    conn.sendRequestHeader(req);\n    conn.flush();\n    conn.receiveResponseHeader();\n  }\n\n","sourceOld":"  public void headerRequest(HttpHost target, HttpRoute route, HttpClientConnection conn, PoolingHttpClientConnectionManager cm)\n      throws IOException, HttpException {\n    HttpRequest req = new BasicHttpRequest(\"OPTIONS\", \"*\", HttpVersion.HTTP_1_1);\n\n    req.addHeader(\"Host\", target.getHostName());\n    if (!conn.isOpen()) {\n      // establish connection based on its route info\n      cm.connect(conn, route, 1000, context);\n      // and mark it as route complete\n      cm.routeComplete(conn, route, context);\n    }\n    conn.sendRequestHeader(req);\n    conn.flush();\n    conn.receiveResponseHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["859081acf00749f5dd462772c571d611d4a4d2db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859081acf00749f5dd462772c571d611d4a4d2db"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}