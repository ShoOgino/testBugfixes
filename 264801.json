{"path":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath);\n\n      zkClient.makePath(\"collections/collection1\");\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\");\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\");\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\");\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\");\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        TestCase.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException e) {\n\n        } catch (KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82fbc9a4af34a68002cd5cf8bbac6b604aeef413","date":1474634253,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final SolrZkClient zkClientConLoss = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      zkClient = zkClientConLoss;\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      expectThrows(KeeperException.class,\n          \"Server should be down\",\n          () -> zkClientConLoss.makePath(\"collections/collection2\", false)\n      );\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      try {\n        zkClient.makePath(\"collections/collection2\", false);\n        Assert.fail(\"Server should be down here\");\n      } catch (KeeperException.ConnectionLossException e) {\n\n      }\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);) {\n\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n      Thread thread = new Thread() {\n        public void run() {\n          try {\n            zkClient.makePath(\"collections/collection2\", false);\n           // Assert.fail(\"Server should be down here\");\n          } catch (KeeperException | InterruptedException e) {\n\n          }\n        }\n      };\n\n      thread.start();\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run(false);\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      Thread thread2 = new Thread() {\n        public void run() {\n          try {\n\n            zkClient.makePath(\"collections/collection3\", true);\n\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      thread2.start();\n\n      thread.join();\n      \n      thread2.join();\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final SolrZkClient zkClientConLoss = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n      zkClient = zkClientConLoss;\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      zkClient.makePath(\"collections/collection1\", false, true);\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n\n      expectThrows(KeeperException.class,\n          \"Server should be down\",\n          () -> zkClientConLoss.makePath(\"collections/collection2\", false)\n      );\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run();\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      try {\n        zkClient.makePath(\"collections/collection3\", true);\n      } catch (KeeperException.ConnectionLossException e) {\n        Thread.sleep(5000); // try again in a bit\n        zkClient.makePath(\"collections/collection3\", true);\n      }\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":["92f789dbd1886e4b468e61b0def88b29a3f55228","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d9405f486872f1e416304dfe389741f4ee2f8a4d","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testReconnect().mjava","sourceNew":"  public void testReconnect() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = null;\n    server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);) {\n\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n      Thread thread = new Thread() {\n        public void run() {\n          try {\n            zkClient.makePath(\"collections/collection2\", false);\n           // Assert.fail(\"Server should be down here\");\n          } catch (KeeperException | InterruptedException e) {\n\n          }\n        }\n      };\n\n      thread.start();\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run(false);\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      Thread thread2 = new Thread() {\n        public void run() {\n          try {\n\n            zkClient.makePath(\"collections/collection3\", true);\n\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      thread2.start();\n\n      thread.join();\n      \n      thread2.join();\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testReconnect() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n    server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);) {\n\n      String shardsPath = \"/collections/collection1/shards\";\n      zkClient.makePath(shardsPath, false, true);\n\n      int zkServerPort = server.getPort();\n      // this tests disconnect state\n      server.shutdown();\n\n      Thread.sleep(80);\n\n      Thread thread = new Thread() {\n        public void run() {\n          try {\n            zkClient.makePath(\"collections/collection2\", false);\n           // Assert.fail(\"Server should be down here\");\n          } catch (KeeperException | InterruptedException e) {\n\n          }\n        }\n      };\n\n      thread.start();\n\n      // bring server back up\n      server = new ZkTestServer(zkDir, zkServerPort);\n      server.run(false);\n\n      // TODO: can we do better?\n      // wait for reconnect\n      Thread.sleep(600);\n\n      Thread thread2 = new Thread() {\n        public void run() {\n          try {\n\n            zkClient.makePath(\"collections/collection3\", true);\n\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      thread2.start();\n\n      thread.join();\n      \n      thread2.join();\n\n      assertNotNull(zkClient.exists(\"/collections/collection3\", null, true));\n      assertNotNull(zkClient.exists(\"/collections/collection1\", null, true));\n      \n      // simulate session expiration\n      \n      // one option\n      long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n      server.expire(sessionId);\n      \n      // another option\n      //zkClient.getSolrZooKeeper().getConnection().disconnect();\n\n      // this tests expired state\n\n      Thread.sleep(1000); // pause for reconnect\n      \n      for (int i = 0; i < 8; i++) {\n        try {\n          zkClient.makePath(\"collections/collection4\", true);\n          break;\n        } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n\n        }\n        Thread.sleep(1000 * i);\n      }\n\n      assertNotNull(\"Node does not exist, but it should\", zkClient.exists(\"/collections/collection4\", null, true));\n\n    } finally {\n\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["d9405f486872f1e416304dfe389741f4ee2f8a4d","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c6e1dc1bb4254226c8d7151b596cc1be40671751","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c6e1dc1bb4254226c8d7151b596cc1be40671751","82fbc9a4af34a68002cd5cf8bbac6b604aeef413"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1778938cb7fb298e6e07a43e2d5acaf552d61518"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["82fbc9a4af34a68002cd5cf8bbac6b604aeef413","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48","f2126b84bd093fa3d921582a109a0ee578c28126"],"f4abec28b874149a7223e32cc7a01704c27790de":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","92f789dbd1886e4b468e61b0def88b29a3f55228"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}