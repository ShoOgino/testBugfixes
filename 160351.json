{"path":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","pathOld":"/dev/null","sourceNew":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        IndexInput expected = dir.openInput(\"d1\");\n        IndexInput actual = csr.openInput(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openInput(\"d2\");\n        actual = csr.openInput(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","sourceNew":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        IndexInput expected = dir.openInput(\"d1\");\n        IndexInput actual = csr.openInput(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openInput(\"d2\");\n        actual = csr.openInput(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        IndexInput expected = dir.openInput(\"d1\");\n        IndexInput actual = csr.openInput(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openInput(\"d2\");\n        actual = csr.openInput(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}