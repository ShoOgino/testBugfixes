{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","commits":[{"id":"b530e8c44c21bd02ed338ac1b9620c5d5397ee95","date":1416324742,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","sourceNew":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq.build(), 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","sourceNew":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq.build(), 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w, true);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq.build(), 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testMinShouldMatchLeniency().mjava","sourceNew":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq.build(), 1).totalHits.value);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinShouldMatchLeniency() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.SHOULD);\n\n    // No doc can match: BQ has only 2 clauses and we are asking for minShouldMatch=4\n    bq.setMinimumNumberShouldMatch(4);\n    assertEquals(0, s.search(bq.build(), 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b530e8c44c21bd02ed338ac1b9620c5d5397ee95"],"2a1862266772deb28cdcb7d996b64d2177022687":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["2a1862266772deb28cdcb7d996b64d2177022687"],"b530e8c44c21bd02ed338ac1b9620c5d5397ee95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b530e8c44c21bd02ed338ac1b9620c5d5397ee95"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b530e8c44c21bd02ed338ac1b9620c5d5397ee95":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}