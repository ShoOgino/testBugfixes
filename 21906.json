{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b612f3f700a1ca999f12198b7a33c65b4a96fd0","date":1406127397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion, indexIn);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount(), in);\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount, in);\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq, in);\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount + \" (resource=\" + in + \")\");\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq + \" (resource=\" + in + \")\");\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29a93e7fb303505e4a719e87f378d9a45db981d0","date":1412167802,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(PostingsReaderBase,SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(PostingsReaderBase postingsReader, SegmentReadState state) throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    String termsFile = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                      state.segmentSuffix, \n                                                      OrdsBlockTreeTermsWriter.TERMS_EXTENSION);\n    in = state.directory.openInput(termsFile, state.context);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      int version = CodecUtil.checkSegmentHeader(in, OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                                     OrdsBlockTreeTermsWriter.VERSION_START,\n                                                     OrdsBlockTreeTermsWriter.VERSION_CURRENT,\n                                                     state.segmentInfo.getId(), state.segmentSuffix);\n      \n      String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                        state.segmentSuffix, \n                                                        OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION);\n      indexIn = state.directory.openInput(indexFile, state.context);\n      int indexVersion = CodecUtil.checkSegmentHeader(indexIn, OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT,\n                                                               state.segmentInfo.getId(), state.segmentSuffix);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion, indexIn);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in);\n      seekDir(indexIn);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > state.segmentInfo.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + state.segmentInfo.getDocCount(), in);\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount, in);\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq, in);\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion, indexIn);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount(), in);\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount, in);\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq, in);\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(PostingsReaderBase,SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader#OrdsBlockTreeTermsReader(Directory,FieldInfos,SegmentInfo,PostingsReaderBase,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(PostingsReaderBase postingsReader, SegmentReadState state) throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    String termsFile = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                      state.segmentSuffix, \n                                                      OrdsBlockTreeTermsWriter.TERMS_EXTENSION);\n    in = state.directory.openInput(termsFile, state.context);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      int version = CodecUtil.checkSegmentHeader(in, OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                                     OrdsBlockTreeTermsWriter.VERSION_START,\n                                                     OrdsBlockTreeTermsWriter.VERSION_CURRENT,\n                                                     state.segmentInfo.getId(), state.segmentSuffix);\n      \n      String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                        state.segmentSuffix, \n                                                        OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION);\n      indexIn = state.directory.openInput(indexFile, state.context);\n      int indexVersion = CodecUtil.checkSegmentHeader(indexIn, OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT,\n                                                               state.segmentInfo.getId(), state.segmentSuffix);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion, indexIn);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in);\n      seekDir(indexIn);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > state.segmentInfo.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + state.segmentInfo.getDocCount(), in);\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount, in);\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq, in);\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public OrdsBlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info,\n                                  PostingsReaderBase postingsReader, IOContext ioContext,\n                                  String segmentSuffix)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n\n    this.segment = info.name;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_EXTENSION),\n                       ioContext);\n\n    boolean success = false;\n    IndexInput indexIn = null;\n\n    try {\n      version = CodecUtil.checkHeader(in,\n                                      OrdsBlockTreeTermsWriter.TERMS_CODEC_NAME,\n                                      OrdsBlockTreeTermsWriter.VERSION_START,\n                                      OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      indexIn = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, OrdsBlockTreeTermsWriter.TERMS_INDEX_EXTENSION),\n                              ioContext);\n      int indexVersion = CodecUtil.checkHeader(indexIn,\n                                               OrdsBlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                                               OrdsBlockTreeTermsWriter.VERSION_START,\n                                               OrdsBlockTreeTermsWriter.VERSION_CURRENT);\n      if (indexVersion != version) {\n        throw new CorruptIndexException(\"mixmatched version files: \" + in + \"=\" + version + \",\" + indexIn + \"=\" + indexVersion, indexIn);\n      }\n      \n      // verify\n      CodecUtil.checksumEntireFile(indexIn);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n      \n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n      seekDir(indexIn, indexDirOffset);\n\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        // System.out.println(\"read field=\" + field + \" numTerms=\" + numTerms + \" i=\" + i);\n        final int numBytes = in.readVInt();\n        final BytesRef code = new BytesRef(new byte[numBytes]);\n        in.readBytes(code.bytes, 0, numBytes);\n        code.length = numBytes;\n        final Output rootCode = OrdsBlockTreeTermsWriter.FST_OUTPUTS.newOutput(code, 0, numTerms);\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        assert fieldInfo != null: \"field=\" + field;\n        assert numTerms <= Integer.MAX_VALUE;\n        final long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        final long sumDocFreq = in.readVLong();\n        final int docCount = in.readVInt();\n        final int longsSize = in.readVInt();\n        // System.out.println(\"  longsSize=\" + longsSize);\n\n        BytesRef minTerm = readBytesRef(in);\n        BytesRef maxTerm = readBytesRef(in);\n        if (docCount < 0 || docCount > info.getDocCount()) { // #docs with field must be <= #docs\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" maxDoc: \" + info.getDocCount(), in);\n        }\n        if (sumDocFreq < docCount) {  // #postings must be >= #docs with field\n          throw new CorruptIndexException(\"invalid sumDocFreq: \" + sumDocFreq + \" docCount: \" + docCount, in);\n        }\n        if (sumTotalTermFreq != -1 && sumTotalTermFreq < sumDocFreq) { // #positions must be >= #postings\n          throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + sumTotalTermFreq + \" sumDocFreq: \" + sumDocFreq, in);\n        }\n        final long indexStartFP = indexIn.readVLong();\n        OrdsFieldReader previous = fields.put(fieldInfo.name,       \n                                              new OrdsFieldReader(this, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount,\n                                                                  indexStartFP, longsSize, indexIn, minTerm, maxTerm));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      indexIn.close();\n\n      success = true;\n    } finally {\n      if (!success) {\n        // this.close() will close in:\n        IOUtils.closeWhileHandlingException(indexIn, this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"9bb9a29a5e71a90295f175df8919802993142c9a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","29a93e7fb303505e4a719e87f378d9a45db981d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29a93e7fb303505e4a719e87f378d9a45db981d0":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["9bb9a29a5e71a90295f175df8919802993142c9a","29a93e7fb303505e4a719e87f378d9a45db981d0"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"29a93e7fb303505e4a719e87f378d9a45db981d0":["9bb9a29a5e71a90295f175df8919802993142c9a"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}