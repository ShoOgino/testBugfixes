{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/ParseException#add_escapes(String).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/ParseException#add_escapes(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used to convert raw characters to their escaped version when these raw\n   * version cannot be used as part of an ASCII string literal.\n   */\n  static private String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i)) {\n      case 0:\n        continue;\n      case '\\b':\n        retval.append(\"\\\\b\");\n        continue;\n      case '\\t':\n        retval.append(\"\\\\t\");\n        continue;\n      case '\\n':\n        retval.append(\"\\\\n\");\n        continue;\n      case '\\f':\n        retval.append(\"\\\\f\");\n        continue;\n      case '\\r':\n        retval.append(\"\\\\r\");\n        continue;\n      case '\\\"':\n        retval.append(\"\\\\\\\"\");\n        continue;\n      case '\\'':\n        retval.append(\"\\\\\\'\");\n        continue;\n      case '\\\\':\n        retval.append(\"\\\\\\\\\");\n        continue;\n      default:\n        if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n          String s = \"0000\" + Integer.toString(ch, 16);\n          retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n        } else {\n          retval.append(ch);\n        }\n        continue;\n      }\n    }\n    return retval.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#add_escapes(String).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/ParseException#add_escapes(String).mjava","sourceNew":"  /**\n   * Used to convert raw characters to their escaped version when these raw\n   * version cannot be used as part of an ASCII string literal.\n   */\n  static private String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i)) {\n      case 0:\n        continue;\n      case '\\b':\n        retval.append(\"\\\\b\");\n        continue;\n      case '\\t':\n        retval.append(\"\\\\t\");\n        continue;\n      case '\\n':\n        retval.append(\"\\\\n\");\n        continue;\n      case '\\f':\n        retval.append(\"\\\\f\");\n        continue;\n      case '\\r':\n        retval.append(\"\\\\r\");\n        continue;\n      case '\\\"':\n        retval.append(\"\\\\\\\"\");\n        continue;\n      case '\\'':\n        retval.append(\"\\\\\\'\");\n        continue;\n      case '\\\\':\n        retval.append(\"\\\\\\\\\");\n        continue;\n      default:\n        if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n          String s = \"0000\" + Integer.toString(ch, 16);\n          retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n        } else {\n          retval.append(ch);\n        }\n        continue;\n      }\n    }\n    return retval.toString();\n  }\n\n","sourceOld":"  /**\n   * Used to convert raw characters to their escaped version when these raw\n   * version cannot be used as part of an ASCII string literal.\n   */\n  static private String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i)) {\n      case 0:\n        continue;\n      case '\\b':\n        retval.append(\"\\\\b\");\n        continue;\n      case '\\t':\n        retval.append(\"\\\\t\");\n        continue;\n      case '\\n':\n        retval.append(\"\\\\n\");\n        continue;\n      case '\\f':\n        retval.append(\"\\\\f\");\n        continue;\n      case '\\r':\n        retval.append(\"\\\\r\");\n        continue;\n      case '\\\"':\n        retval.append(\"\\\\\\\"\");\n        continue;\n      case '\\'':\n        retval.append(\"\\\\\\'\");\n        continue;\n      case '\\\\':\n        retval.append(\"\\\\\\\\\");\n        continue;\n      default:\n        if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n          String s = \"0000\" + Integer.toString(ch, 16);\n          retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n        } else {\n          retval.append(ch);\n        }\n        continue;\n      }\n    }\n    return retval.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}