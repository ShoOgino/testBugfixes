{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"/dev/null","sourceNew":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return columnRowCounters[s - 1] < columns.get(s - 1).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32dccb0e1a1e6f0673086f4d0b95e14419730e6a","date":1215389321,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < columns.get(s - 1).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return columnRowCounters[s - 1] < columns.get(s - 1).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56","date":1221157398,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator permutationIterator() {\n\n      return new Iterator() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < ((Column) columns.get(s - 1)).getRows().size();\n        }\n\n        public Object next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = (Matrix.Column.Row) ((Column) columns.get(i)).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == ((Column) columns.get(i)).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < columns.get(s - 1).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator permutationIterator() {\n\n      return new Iterator() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < ((Column) columns.get(s - 1)).getRows().size();\n        }\n\n        public Object next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = (Matrix.Column.Row) ((Column) columns.get(i)).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == ((Column) columns.get(i)).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator permutationIterator() {\n\n      return new Iterator() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          return s != 0 && columnRowCounters[s - 1] < ((Column) columns.get(s - 1)).getRows().size();\n        }\n\n        public Object next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = (Matrix.Column.Row) ((Column) columns.get(i)).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == ((Column) columns.get(i)).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["32dccb0e1a1e6f0673086f4d0b95e14419730e6a"],"32dccb0e1a1e6f0673086f4d0b95e14419730e6a":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["32dccb0e1a1e6f0673086f4d0b95e14419730e6a"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"32dccb0e1a1e6f0673086f4d0b95e14419730e6a":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}