{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#SimpleStandardTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", StandardCodec.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"]},"commit2Childs":{"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}