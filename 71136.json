{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#offer(byte[],long).mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}