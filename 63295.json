{"path":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae81ef60a860c551619f7702a13ba15f7dc024f5","date":1341796635,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new FileReader(      file ), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), \"UTF-8\");\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, stream.getReader()));\n    } finally {\n      s.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4d9a6c5c486f577603b2c8ce6c2fedc31022c1d","date":1395964143,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), \"UTF-8\");\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), \"UTF-8\");\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, stream.getReader()));\n    } finally {\n      s.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\", createTempDir());\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), \"UTF-8\");\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, stream.getReader()));\n    } finally {\n      s.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream( file );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), \"UTF-8\");\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\", createTempDir());\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\", createTempDir());\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), \"UTF-8\");\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, stream.getReader()));\n    } finally {\n      s.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\", createTempDir());\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader().openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException \n  {\n    File file = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource( \"solrj/README\" )) {\n      assertNotNull(is);\n      file = new File(createTempDir().toFile(), \"README\");\n      try (FileOutputStream os = new FileOutputStream(file)) {\n        IOUtils.copy(is, os);\n      }\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader().openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be58baf5760d4f17a711eb110f79091ab713ae36","date":1539906801,"type":3,"author":"Andrew Lundgren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      assertNotNull(is);\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(\n             new FileInputStream(file), StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      // Test the code that sets content based on < being the 1st character\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException \n  {\n    File file = null;\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource( \"solrj/README\" )) {\n      assertNotNull(is);\n      file = new File(createTempDir().toFile(), \"README\");\n      try (FileOutputStream os = new FileOutputStream(file)) {\n        IOUtils.copy(is, os);\n      }\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(\n        new FileInputStream(file), StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    } finally {\n      s.close();\n      r.close();\n      isr.close();\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      assertNotNull(is);\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(\n             new FileInputStream(file), StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      // Test the code that sets content based on < being the 1st character\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      assertNotNull(is);\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(\n             new FileInputStream(file), StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      // Test the code that sets content based on < being the 1st character\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testFileStream().mjava","sourceNew":"  public void testFileStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      assertNotNull(is);\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(\n             new FileInputStream(file), StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      // Test the code that sets content based on < being the 1st character\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    }\n  }\n\n","sourceOld":"  public void testFileStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      assertNotNull(is);\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(\n             new FileInputStream(file), StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      // Test the code that sets content based on < being the 1st character\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis, s));\n      assertTrue(IOUtils.contentEquals(isr, r));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4d9a6c5c486f577603b2c8ce6c2fedc31022c1d":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"ae81ef60a860c551619f7702a13ba15f7dc024f5":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["be58baf5760d4f17a711eb110f79091ab713ae36"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["be58baf5760d4f17a711eb110f79091ab713ae36","8c5cdabe00d4d433e6a831e18f68201284973eef"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["abd55340ba9df8b62edcd692b34e46cf0614a52e","ae81ef60a860c551619f7702a13ba15f7dc024f5"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f4abec28b874149a7223e32cc7a01704c27790de"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"9d3d365762604952e436b51980101dfc84cc1b3e":["f4d9a6c5c486f577603b2c8ce6c2fedc31022c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2acf500f78aa12b92e371fd89c719291986b6b90","19275ba31e621f6da1b83bf13af75233876fd3d4"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"be58baf5760d4f17a711eb110f79091ab713ae36":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"46d8ada1fff8d18cb197c38c7983225162599948":["abd55340ba9df8b62edcd692b34e46cf0614a52e","2acf500f78aa12b92e371fd89c719291986b6b90"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["abd55340ba9df8b62edcd692b34e46cf0614a52e","2acf500f78aa12b92e371fd89c719291986b6b90"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"f4d9a6c5c486f577603b2c8ce6c2fedc31022c1d":["9d3d365762604952e436b51980101dfc84cc1b3e"],"ae81ef60a860c551619f7702a13ba15f7dc024f5":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1416f9d09d016a6894cd17e1caac137dad2bba59","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d0d579490a72f2e6297eaa648940611234c57cf1"],"2acf500f78aa12b92e371fd89c719291986b6b90":["19275ba31e621f6da1b83bf13af75233876fd3d4","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["f4d9a6c5c486f577603b2c8ce6c2fedc31022c1d"],"9d3d365762604952e436b51980101dfc84cc1b3e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","5eb2511ababf862ea11e10761c70ee560cd84510"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["be58baf5760d4f17a711eb110f79091ab713ae36"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"be58baf5760d4f17a711eb110f79091ab713ae36":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"f4abec28b874149a7223e32cc7a01704c27790de":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["ae81ef60a860c551619f7702a13ba15f7dc024f5","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}