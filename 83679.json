{"path":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","commits":[{"id":"7018a7db55be9b8846650dfafa31a80f05867862","date":1309541464,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XsltUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n    inputFactory.setXMLReporter(xmllog);\n    \n    final SolrParams p = SolrParams.toSolrParams(args);\n    this.xsltCacheLifetimeSeconds = p.getInt(XSLT_CACHE_PARAM,XSLT_CACHE_DEFAULT);\n    log.info(\"xsltCacheLifetimeSeconds=\" + xsltCacheLifetimeSeconds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c26f00b574427b55127e869b935845554afde1fa":["7018a7db55be9b8846650dfafa31a80f05867862","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7018a7db55be9b8846650dfafa31a80f05867862"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7018a7db55be9b8846650dfafa31a80f05867862"],"7018a7db55be9b8846650dfafa31a80f05867862":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7018a7db55be9b8846650dfafa31a80f05867862"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","7018a7db55be9b8846650dfafa31a80f05867862","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7018a7db55be9b8846650dfafa31a80f05867862":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}