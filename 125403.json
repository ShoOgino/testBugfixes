{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","commits":[{"id":"342497ca1bfc6de322c3a6d0ff5bef4be2a7954a","date":1294263582,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(qp.parse(\"+foo -ba*\")));\n    assertEquals(0, searcher.search(qp.parse(\"+foo -ba*\"), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", Field.Index.ANALYZED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", Field.Index.ANALYZED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"342497ca1bfc6de322c3a6d0ff5bef4be2a7954a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["342497ca1bfc6de322c3a6d0ff5bef4be2a7954a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["342497ca1bfc6de322c3a6d0ff5bef4be2a7954a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","342497ca1bfc6de322c3a6d0ff5bef4be2a7954a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","342497ca1bfc6de322c3a6d0ff5bef4be2a7954a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"342497ca1bfc6de322c3a6d0ff5bef4be2a7954a":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["342497ca1bfc6de322c3a6d0ff5bef4be2a7954a","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}