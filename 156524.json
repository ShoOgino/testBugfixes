{"path":"lucene/classification/src/test/org/apache/lucene/classification/CachingNaiveBayesClassifierTest#testBasicUsage().mjava","commits":[{"id":"1be1c3be4cd07e6a195dc475b583da2877e4b3bd","date":1415781533,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/CachingNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new CachingNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    checkCorrectClassification(new CachingNaiveBayesClassifier(), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/CachingNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/CachingNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new CachingNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new CachingNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new CachingNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    checkCorrectClassification(new CachingNaiveBayesClassifier(), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/CachingNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/CachingNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new CachingNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new CachingNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new CachingNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new CachingNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1be1c3be4cd07e6a195dc475b583da2877e4b3bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["1be1c3be4cd07e6a195dc475b583da2877e4b3bd"]},"commit2Childs":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1be1c3be4cd07e6a195dc475b583da2877e4b3bd"],"1be1c3be4cd07e6a195dc475b583da2877e4b3bd":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}