{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","sourceNew":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   * TODO (Facet): add AUTO_EXPAND option  \n   */\n  public final int getDepth() {\n    return depth;\n  }\n\n","sourceOld":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   * TODO (Facet): add AUTO_EXPAND option  \n   */\n  public final int getDepth() {\n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","sourceNew":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","sourceOld":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   * TODO (Facet): add AUTO_EXPAND option  \n   */\n  public final int getDepth() {\n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","sourceNew":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","sourceOld":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}