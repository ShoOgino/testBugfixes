{"path":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target, boolean useCache) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target, boolean useCache) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target, boolean useCache) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.OrdWrappedTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef target) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef target, boolean useCache) throws IOException {\n\n      // already here\n      if (term != null && term.equals(target)) {\n        return SeekStatus.FOUND;\n      }\n\n      int startIdx = Arrays.binarySearch(indexedTermsArray, target);\n\n      if (startIdx >= 0) {\n        // we hit the term exactly... lucky us!\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;\n        return SeekStatus.FOUND;\n      }\n\n      // we didn't hit the term exactly\n      startIdx = -startIdx-1;\n    \n      if (startIdx == 0) {\n        // our target occurs *before* the first term\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(target);\n        assert seekStatus == TermsEnum.SeekStatus.NOT_FOUND;\n        ord = 0;\n        setTerm();\n        assert term != null;\n        return SeekStatus.NOT_FOUND;\n      }\n\n      // back up to the start of the block\n      startIdx--;\n\n      if ((ord >> indexIntervalBits) == startIdx && term != null && term.compareTo(target) <= 0) {\n        // we are already in the right block and the current term is before the term we want,\n        // so we don't need to seek.\n      } else {\n        // seek to the right block\n        TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(indexedTermsArray[startIdx]);\n        assert seekStatus == TermsEnum.SeekStatus.FOUND;\n        ord = startIdx << indexIntervalBits;\n        setTerm();\n        assert term != null;  // should be non-null since it's in the index\n      }\n\n      while (term != null && term.compareTo(target) < 0) {\n        next();\n      }\n\n      if (term == null) {\n        return SeekStatus.END;\n      } else if (term.compareTo(target) == 0) {\n        return SeekStatus.FOUND;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}