{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader.PulsingDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader.PulsingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"PR d&p nextDoc this=\" + this);\n\n      while(true) {\n        //System.out.println(\"  cycle skip posPending=\" + posPending);\n\n        skipPositions();\n\n        if (postings.eof()) {\n          //System.out.println(\"PR   END\");\n          return docID = NO_MORE_DOCS;\n        }\n\n        final int code = postings.readVInt();\n        accum += code >>> 1;            // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = postings.readVInt();     // else read freq\n        }\n        posPending = freq;\n        startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"  return docID=\" + docID + \" freq=\" + freq);\n          position = 0;\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader.PulsingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"PR d&p nextDoc this=\" + this);\n\n      while(true) {\n        //System.out.println(\"  cycle skip posPending=\" + posPending);\n\n        skipPositions();\n\n        if (postings.eof()) {\n          //System.out.println(\"PR   END\");\n          return docID = NO_MORE_DOCS;\n        }\n\n        final int code = postings.readVInt();\n        accum += code >>> 1;            // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = postings.readVInt();     // else read freq\n        }\n        posPending = freq;\n        startOffset = storeOffsets ? 0 : -1; // always return -1 if no offsets are stored\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"  return docID=\" + docID + \" freq=\" + freq);\n          position = 0;\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f8633b56150a205774ee3e2adf1452a81b0d904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}