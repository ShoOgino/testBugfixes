{"path":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n    Random random = newRandom();\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    Random random = newRandom();\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n    Random random = newRandom();\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    Random random = newRandom();\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper directory = newDirectory(random);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper directory = newDirectory(random);\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for(int iter=0;iter<10;iter++) {\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(100))\n      );\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}