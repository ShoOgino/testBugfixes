{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  char[] getStartPoints() {\n    Set<Character> pointset = new HashSet<Character>();\n    for (State s : getStates()) {\n      pointset.add(Character.MIN_VALUE);\n      for (Transition t : s.transitions) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_VALUE) pointset.add((char) (t.max + 1));\n      }\n    }\n    char[] points = new char[pointset.size()];\n    int n = 0;\n    for (Character m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<Integer>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  char[] getStartPoints() {\n    Set<Character> pointset = new HashSet<Character>();\n    for (State s : getStates()) {\n      pointset.add(Character.MIN_VALUE);\n      for (Transition t : s.transitions) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_VALUE) pointset.add((char) (t.max + 1));\n      }\n    }\n    char[] points = new char[pointset.size()];\n    int n = 0;\n    for (Character m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<Integer>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<Integer>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}