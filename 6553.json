{"path":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","commits":[{"id":"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","date":1452119871,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    RefCounted<SolrIndexSearcher> ref = null;\n    SolrIndexSearcher searcher = null;\n    try {\n      ref = core.getSearcher();\n      searcher = ref.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString + \n          \" but got: \" + info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY) +\n          \"\\n SegmentInfo: \" + info +\n          \"\\n SegmentInfos: \" + infos + \n          \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY));\n    } finally {\n      if (ref != null) ref.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","sourceNew":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    h.getCore().withSearcher(searcher -> {\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString +\n              \" but got: \" + info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY) +\n              \"\\n SegmentInfo: \" + info +\n              \"\\n SegmentInfos: \" + infos +\n              \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY));\n      return null;\n    });\n  }\n\n","sourceOld":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    RefCounted<SolrIndexSearcher> ref = null;\n    SolrIndexSearcher searcher = null;\n    try {\n      ref = core.getSearcher();\n      searcher = ref.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString + \n          \" but got: \" + info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY) +\n          \"\\n SegmentInfo: \" + info +\n          \"\\n SegmentInfos: \" + infos + \n          \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY));\n    } finally {\n      if (ref != null) ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","sourceNew":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    h.getCore().withSearcher(searcher -> {\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString +\n              \" but got: \" + info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY) +\n              \"\\n SegmentInfo: \" + info +\n              \"\\n SegmentInfos: \" + infos +\n              \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY));\n      return null;\n    });\n  }\n\n","sourceOld":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    RefCounted<SolrIndexSearcher> ref = null;\n    SolrIndexSearcher searcher = null;\n    try {\n      ref = core.getSearcher();\n      searcher = ref.get();\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString + \n          \" but got: \" + info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY) +\n          \"\\n SegmentInfo: \" + info +\n          \"\\n SegmentInfos: \" + infos + \n          \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY));\n    } finally {\n      if (ref != null) ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"032d92825f7237d4f5c53736cf96f7e1fc7025f5","date":1598439346,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#assertCompressionMode(String,SolrCore).mjava","sourceNew":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    h.getCore().withSearcher(searcher -> {\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString +\n              \" but got: \" + info.getAttribute(Lucene87StoredFieldsFormat.MODE_KEY) +\n              \"\\n SegmentInfo: \" + info +\n              \"\\n SegmentInfos: \" + infos +\n              \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene87StoredFieldsFormat.MODE_KEY));\n      return null;\n    });\n  }\n\n","sourceOld":"  protected void assertCompressionMode(String expectedModeString, SolrCore core) throws IOException {\n    h.getCore().withSearcher(searcher -> {\n      SegmentInfos infos = SegmentInfos.readLatestCommit(searcher.getIndexReader().directory());\n      SegmentInfo info = infos.info(infos.size() - 1).info;\n      assertEquals(\"Expecting compression mode string to be \" + expectedModeString +\n              \" but got: \" + info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY) +\n              \"\\n SegmentInfo: \" + info +\n              \"\\n SegmentInfos: \" + infos +\n              \"\\n Codec: \" + core.getCodec(),\n          expectedModeString, info.getAttribute(Lucene50StoredFieldsFormat.MODE_KEY));\n      return null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"032d92825f7237d4f5c53736cf96f7e1fc7025f5":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["032d92825f7237d4f5c53736cf96f7e1fc7025f5"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"032d92825f7237d4f5c53736cf96f7e1fc7025f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["032d92825f7237d4f5c53736cf96f7e1fc7025f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}