{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.CompressedBinaryBlockWriter#writeMetaData().mjava","commits":[{"id":"5fcfc028fca127dc2779630e53a9c2ec208ee7a0","date":1582034562,"type":0,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.CompressedBinaryBlockWriter#writeMetaData().mjava","pathOld":"/dev/null","sourceNew":"    void writeMetaData() throws IOException {\n      if (totalChunks == 0) {\n        return;\n      }\n      \n      long startDMW = data.getFilePointer();\n      meta.writeLong(startDMW);\n      \n      meta.writeVInt(totalChunks);\n      meta.writeVInt(Lucene80DocValuesFormat.BINARY_BLOCK_SHIFT);\n      meta.writeVInt(maxUncompressedBlockLength);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n      \n    \n      CodecUtil.writeFooter(tempBinaryOffsets);\n      IOUtils.close(tempBinaryOffsets);             \n      //write the compressed block offsets info to the meta file by reading from temp file\n      try (ChecksumIndexInput filePointersIn = state.directory.openChecksumInput(tempBinaryOffsets.getName(), IOContext.READONCE)) {\n        CodecUtil.checkHeader(filePointersIn, Lucene80DocValuesFormat.META_CODEC + \"FilePointers\", Lucene80DocValuesFormat.VERSION_CURRENT,\n          Lucene80DocValuesFormat.VERSION_CURRENT);\n        Throwable priorE = null;\n        try {\n          final DirectMonotonicWriter filePointers = DirectMonotonicWriter.getInstance(meta, data, totalChunks, DIRECT_MONOTONIC_BLOCK_SHIFT);\n          long fp = blockAddressesStart;\n          for (int i = 0; i < totalChunks; ++i) {\n            filePointers.add(fp);\n            fp += filePointersIn.readVLong();\n          }\n          if (maxPointer < fp) {\n            throw new CorruptIndexException(\"File pointers don't add up (\"+fp+\" vs expected \"+maxPointer+\")\", filePointersIn);\n          }\n          filePointers.finish();\n        } catch (Throwable e) {\n          priorE = e;\n        } finally {\n          CodecUtil.checkFooter(filePointersIn, priorE);\n        }\n      }\n      // Write the length of the DMW block in the data \n      meta.writeLong(data.getFilePointer() - startDMW);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}