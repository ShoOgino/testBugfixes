{"path":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","commits":[{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param x1DV\n   * @param y1DV\n   * @param x2DV\n   * @param y2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues x1DV, DocValues y1DV, DocValues x2DV, DocValues y2DV) {\n    double result = 0;\n    double x1 = x1DV.doubleVal(doc); //in radians\n    double y1 = y1DV.doubleVal(doc);\n    double x2 = x2DV.doubleVal(doc);\n    double y2 = y2DV.doubleVal(doc);\n\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX / 2);\n      double hsinY = Math.sin(diffY / 2);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf0f06494833f3935ee69a7e806ce358b324ca0d","date":1258413240,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param x1DV\n   * @param y1DV\n   * @param x2DV\n   * @param y2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues x1DV, DocValues y1DV, DocValues x2DV, DocValues y2DV) {\n    double result = 0;\n    double x1 = x1DV.doubleVal(doc); //in radians\n    double y1 = y1DV.doubleVal(doc);\n    double x2 = x2DV.doubleVal(doc);\n    double y2 = y2DV.doubleVal(doc);\n\n    //make sure they aren't all the same, as then we can just return 0\n    result = DistanceUtils.haversine(x1, y1, x2, y2, radius);\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param x1DV\n   * @param y1DV\n   * @param x2DV\n   * @param y2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues x1DV, DocValues y1DV, DocValues x2DV, DocValues y2DV) {\n    double result = 0;\n    double x1 = x1DV.doubleVal(doc); //in radians\n    double y1 = y1DV.doubleVal(doc);\n    double x2 = x2DV.doubleVal(doc);\n    double y2 = y2DV.doubleVal(doc);\n\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX / 2);\n      double hsinY = Math.sin(diffY / 2);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ee3516c0159528e9661e9988a585ec3baad3026","date":1258585358,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param x1DV\n   * @param y1DV\n   * @param x2DV\n   * @param y2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues x1DV, DocValues y1DV, DocValues x2DV, DocValues y2DV) {\n    double x1 = x1DV.doubleVal(doc); //in radians\n    double y1 = y1DV.doubleVal(doc);\n    double x2 = x2DV.doubleVal(doc);\n    double y2 = y2DV.doubleVal(doc);\n\n    return DistanceUtils.haversine(x1, y1, x2, y2, radius);\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param x1DV\n   * @param y1DV\n   * @param x2DV\n   * @param y2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues x1DV, DocValues y1DV, DocValues x2DV, DocValues y2DV) {\n    double result = 0;\n    double x1 = x1DV.doubleVal(doc); //in radians\n    double y1 = y1DV.doubleVal(doc);\n    double x2 = x2DV.doubleVal(doc);\n    double y2 = y2DV.doubleVal(doc);\n\n    //make sure they aren't all the same, as then we can just return 0\n    result = DistanceUtils.haversine(x1, y1, x2, y2, radius);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues,DocValues,DocValues).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param x1DV\n   * @param y1DV\n   * @param x2DV\n   * @param y2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues x1DV, DocValues y1DV, DocValues x2DV, DocValues y2DV) {\n    double x1 = x1DV.doubleVal(doc); //in radians\n    double y1 = y1DV.doubleVal(doc);\n    double x2 = x2DV.doubleVal(doc);\n    double y2 = y2DV.doubleVal(doc);\n\n    return DistanceUtils.haversine(x1, y1, x2, y2, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["1ee3516c0159528e9661e9988a585ec3baad3026"],"1ee3516c0159528e9661e9988a585ec3baad3026":["bf0f06494833f3935ee69a7e806ce358b324ca0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bf0f06494833f3935ee69a7e806ce358b324ca0d":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":[],"1ee3516c0159528e9661e9988a585ec3baad3026":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"bf0f06494833f3935ee69a7e806ce358b324ca0d":["1ee3516c0159528e9661e9988a585ec3baad3026"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["bf0f06494833f3935ee69a7e806ce358b324ca0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}