{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert scratch.startsWith(VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","560e2ea4254f72003898bd4d74a0971828130864"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e8338ed9af8fe4457cdb985e4f8b3228363a8e1","date":1320855891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert scratch.startsWith(VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert scratch.startsWith(VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert scratch.startsWith(VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#readField(BytesRef,FieldInfo,StoredFieldVisitor).mjava","sourceNew":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","sourceOld":"  private void readField(BytesRef type, FieldInfo fieldInfo, StoredFieldVisitor visitor) throws IOException {\n    readLine();\n    assert StringHelper.startsWith(scratch, VALUE);\n    if (type == TYPE_STRING) {\n      visitor.stringField(fieldInfo, new String(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, \"UTF-8\"));\n    } else if (type == TYPE_BINARY) {\n      // TODO: who owns the bytes?\n      byte[] copy = new byte[scratch.length-VALUE.length];\n      System.arraycopy(scratch.bytes, scratch.offset+VALUE.length, copy, 0, copy.length);\n      visitor.binaryField(fieldInfo, copy, 0, copy.length);\n    } else if (type == TYPE_INT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.intField(fieldInfo, Integer.parseInt(scratchUTF16.toString()));\n    } else if (type == TYPE_LONG) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.longField(fieldInfo, Long.parseLong(scratchUTF16.toString()));\n    } else if (type == TYPE_FLOAT) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.floatField(fieldInfo, Float.parseFloat(scratchUTF16.toString()));\n    } else if (type == TYPE_DOUBLE) {\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+VALUE.length, scratch.length-VALUE.length, scratchUTF16);\n      visitor.doubleField(fieldInfo, Double.parseDouble(scratchUTF16.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8e8338ed9af8fe4457cdb985e4f8b3228363a8e1":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["8e8338ed9af8fe4457cdb985e4f8b3228363a8e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"8e8338ed9af8fe4457cdb985e4f8b3228363a8e1":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"06584e6e98d592b34e1329b384182f368d2025e8":["8e8338ed9af8fe4457cdb985e4f8b3228363a8e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}