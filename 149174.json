{"path":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}