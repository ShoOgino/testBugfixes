{"path":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.CacheThread#run().mjava","commits":[{"id":"d7214103e1b0d5289fa253d65f7968ba13d526b9","date":1273335447,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.CacheThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.CacheThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.CacheThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final CloneableObject obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(new CloneableObject(obj), obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.CacheThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache.CacheThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final CloneableObject obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(new CloneableObject(obj), obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final CloneableObject obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(new CloneableObject(obj), obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7214103e1b0d5289fa253d65f7968ba13d526b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aafd88401639311b0404e67c94e829e123a0e45":["d7214103e1b0d5289fa253d65f7968ba13d526b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d7214103e1b0d5289fa253d65f7968ba13d526b9":["2aafd88401639311b0404e67c94e829e123a0e45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7214103e1b0d5289fa253d65f7968ba13d526b9"],"2aafd88401639311b0404e67c94e829e123a0e45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}