{"path":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,int,int).mjava","pathOld":"/dev/null","sourceNew":"      public FieldsReader(Directory dir, FieldInfos fieldInfos,\n                          SegmentInfo si, int readBufferSize,\n                          int indexDivisor) throws IOException {\n\n        final int fieldCount = fieldInfos.size();\n        for(int i=0;i<fieldCount;i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed) {\n            fields.add(fi.name);\n            Codec codec = getCodec(fi.name);\n            if (!codecs.containsKey(codec)) {\n              codecs.put(codec, codec.fieldsProducer(new SegmentReadState(dir, si, fieldInfos, readBufferSize, indexDivisor)));\n            }\n          }\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00dda04108a6c48c97848716d9911ba4a6f9eb12","date":1275777366,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/TestExternalCodecs.PerFieldCodecWrapper.FieldsReader#FieldsReader(Directory,FieldInfos,SegmentInfo,int,int).mjava","sourceNew":null,"sourceOld":"      public FieldsReader(Directory dir, FieldInfos fieldInfos,\n                          SegmentInfo si, int readBufferSize,\n                          int indexDivisor) throws IOException {\n\n        final int fieldCount = fieldInfos.size();\n        for(int i=0;i<fieldCount;i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed) {\n            fields.add(fi.name);\n            Codec codec = getCodec(fi.name);\n            if (!codecs.containsKey(codec)) {\n              codecs.put(codec, codec.fieldsProducer(new SegmentReadState(dir, si, fieldInfos, readBufferSize, indexDivisor)));\n            }\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00dda04108a6c48c97848716d9911ba4a6f9eb12":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00dda04108a6c48c97848716d9911ba4a6f9eb12"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["00dda04108a6c48c97848716d9911ba4a6f9eb12"],"00dda04108a6c48c97848716d9911ba4a6f9eb12":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}