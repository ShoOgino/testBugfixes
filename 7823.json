{"path":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(IndexOutput,int).mjava","commits":[{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      initDataOut(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"]},"commit2Childs":{"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}