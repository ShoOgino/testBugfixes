{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery.Builder,String,boolean).mjava","commits":[{"id":"3ca415055c1401a2359adfb8f5d3fbf3887f95d7","date":1438554679,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setMinShouldMatch(BooleanQuery.Builder,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks the number of optional clauses in the query, and compares it\n   * with the specification string to determine the proper value to use.\n   * <p>\n   * If mmAutoRelax=true, we'll perform auto relaxation of mm if tokens\n   * are removed from some but not all DisMax clauses, as can happen when\n   * stopwords or punctuation tokens are removed in analysis.\n   * </p>\n   * <p>\n   * Details about the specification format can be found\n   * <a href=\"doc-files/min-should-match.html\">here</a>\n   * </p>\n   *\n   * <p>A few important notes...</p>\n   * <ul>\n   * <li>\n   * If the calculations based on the specification determine that no\n   * optional clauses are needed, BooleanQuerysetMinMumberShouldMatch\n   * will never be called, but the usual rules about BooleanQueries\n   * still apply at search time (a BooleanQuery containing no required\n   * clauses must still match at least one optional clause)\n   * <li>\n   * <li>\n   * No matter what number the calculation arrives at,\n   * BooleanQuery.setMinShouldMatch() will never be called with a\n   * value greater then the number of optional clauses (or less then 1)\n   * </li>\n   * </ul>\n   *\n   * <p>:TODO: should optimize the case where number is same\n   * as clauses to just make them all \"required\"\n   * </p>\n   *\n   * @param q The query as a BooleanQuery.Builder\n   * @param spec The mm spec\n   * @param mmAutoRelax whether to perform auto relaxation of mm if tokens are removed from some but not all DisMax clauses\n   */\n  public static void setMinShouldMatch(BooleanQuery.Builder q, String spec, boolean mmAutoRelax) {\n\n    int optionalClauses = 0;\n    int maxDisjunctsSize = 0;\n    int optionalDismaxClauses = 0;\n    for (BooleanClause c : q.build().clauses()) {\n      if (c.getOccur() == Occur.SHOULD) {\n        if (mmAutoRelax && c.getQuery() instanceof DisjunctionMaxQuery) {\n          int numDisjuncts = ((DisjunctionMaxQuery)c.getQuery()).getDisjuncts().size();\n          if (numDisjuncts>maxDisjunctsSize) {\n            maxDisjunctsSize = numDisjuncts;\n            optionalDismaxClauses = 1;\n          }\n          else if (numDisjuncts == maxDisjunctsSize) {\n            optionalDismaxClauses++;\n          }\n        } else {\n          optionalClauses++;\n        }\n      }\n    }\n\n    int msm = calculateMinShouldMatch(optionalClauses + optionalDismaxClauses, spec);\n    if (0 < msm) {\n      q.setMinimumNumberShouldMatch(msm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}