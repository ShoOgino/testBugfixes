{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    //---- PARSE PRIMARY MESSAGE PARAMS\n    // important that we use NAME for the alias as that is what the Overseer will get a lock on before calling us\n    final String aliasName = message.getStr(NAME);\n    final String routeValue = message.getStr(ROUTED_ALIAS_TARGET_COL);\n\n    final ZkStateReader.AliasesManager aliasesManager = ocmh.zkStateReader.aliasesManager;\n    final Aliases aliases = aliasesManager.getAliases();\n    final Map<String, String> aliasMetadata = aliases.getCollectionAliasProperties(aliasName);\n    if (aliasMetadata.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Alias \" + aliasName + \" does not exist or is not a routed alias.\"); // if it did exist, we'd have a non-null map\n    }\n    final RoutedAlias ra = RoutedAlias.fromProps(aliasName, aliasMetadata);\n    if (ra == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"MaintainRoutedAlias called on non-routed alias\");\n    }\n\n    ra.updateParsedCollectionAliases(ocmh.zkStateReader, true);\n    List<RoutedAlias.Action> actions = ra.calculateActions(routeValue);\n    for (RoutedAlias.Action action : actions) {\n      boolean exists = ocmh.zkStateReader.getClusterState().getCollectionOrNull(action.targetCollection) != null;\n      switch (action.actionType) {\n        case ENSURE_REMOVED:\n          if (exists) {\n            ocmh.tpe.submit(() -> {\n              try {\n                deleteTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, action);\n              } catch (Exception e) {\n                log.warn(\"Deletion of {} by {} {} failed (this might be ok if two clients were\"\n                    , action.targetCollection, ra.getAliasName()\n                    , \" writing to a routed alias at the same time and both caused a deletion)\");\n                log.debug(\"Exception for last message:\", e);\n              }\n            });\n          }\n          break;\n        case ENSURE_EXISTS:\n          if (!exists) {\n            addTargetCollection(clusterState, cloudConfig, results, aliasName, aliasesManager, aliasMetadata, action);\n          } else {\n            // check that the collection is properly integrated into the alias (see\n            // TimeRoutedAliasUpdateProcessorTest.java:141). Presently we need to ensure inclusion in the alias\n            // and the presence of the appropriate collection property. Note that this only works if the collection\n            // happens to fall where we would have created one already. Support for un-even collection sizes will\n            // take additional work (though presently they might work if the below book keeping is done by hand)\n            if (!ra.getCollectionList(aliases).contains(action.targetCollection)) {\n              addCollectionToAlias(aliasName, aliasesManager, action.targetCollection);\n              Map<String, String> collectionProperties = ocmh.zkStateReader\n                  .getCollectionProperties(action.targetCollection, 1000);\n              if (!collectionProperties.containsKey(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP)) {\n                CollectionProperties props = new CollectionProperties(ocmh.zkStateReader.getZkClient());\n                props.setCollectionProperty(action.targetCollection, RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, aliasName);\n              }\n            }\n          }\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown action type!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}