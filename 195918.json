{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","commits":[{"id":"c447e0427ce53ca53d708ce8b64eaf8cfd372591","date":1359552077,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#copy(BytesRef).mjava","sourceNew":"  /**\n   * Appends the bytes in the provided {@link BytesRef} at\n   * the current position.\n   */\n  public void append(final BytesRef bytes) {\n    int length = bytes.length;\n    if (length == 0) {\n      return;\n    }\n    int offset = bytes.offset;\n    int overflow = (length + byteUpto) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) { \n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, length);\n        byteUpto += length;\n        break;\n      } else {\n        final int bytesToCopy = length-overflow;\n        if (bytesToCopy > 0) {\n          System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesToCopy);\n          offset += bytesToCopy;\n          length -= bytesToCopy;\n        }\n        nextBuffer();\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    }  while(true);\n  }\n\n","sourceOld":"  /**\n   * Copies the given {@link BytesRef} at the current positions (\n   * {@link #byteUpto} across buffer boundaries\n   */\n  public final void copy(final BytesRef bytes) {\n    int length = bytes.length;\n    int offset = bytes.offset;\n    int overflow = (length + byteUpto) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) { \n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, length);\n        byteUpto += length;\n        break;\n      } else {\n        final int bytesToCopy = length-overflow;\n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesToCopy);\n        offset += bytesToCopy;\n        length -= bytesToCopy;\n        nextBuffer();\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    }  while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Appends the bytes in the provided {@link BytesRef} at\n   * the current position.\n   */\n  public void append(final BytesRef bytes) {\n    int length = bytes.length;\n    if (length == 0) {\n      return;\n    }\n    int offset = bytes.offset;\n    int overflow = (length + byteUpto) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) { \n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, length);\n        byteUpto += length;\n        break;\n      } else {\n        final int bytesToCopy = length-overflow;\n        if (bytesToCopy > 0) {\n          System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesToCopy);\n          offset += bytesToCopy;\n          length -= bytesToCopy;\n        }\n        nextBuffer();\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    }  while(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","date":1491925651,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","sourceNew":"  /**\n   * Appends the bytes in the provided {@link BytesRef} at\n   * the current position.\n   */\n  public void append(final BytesRef bytes) {\n    int bytesLeft = bytes.length;\n    int offset = bytes.offset;\n    while (bytesLeft > 0) {\n      int bufferLeft = BYTE_BLOCK_SIZE - byteUpto;\n      if (bytesLeft < bufferLeft) {\n        // fits within current buffer\n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesLeft);\n        byteUpto += bytesLeft;\n        break;\n      } else {\n        // fill up this buffer and move to next one\n        if (bufferLeft > 0) {\n          System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bufferLeft);\n        }\n        nextBuffer();\n        bytesLeft -= bufferLeft;\n        offset += bufferLeft;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Appends the bytes in the provided {@link BytesRef} at\n   * the current position.\n   */\n  public void append(final BytesRef bytes) {\n    int length = bytes.length;\n    if (length == 0) {\n      return;\n    }\n    int offset = bytes.offset;\n    int overflow = (length + byteUpto) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) { \n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, length);\n        byteUpto += length;\n        break;\n      } else {\n        final int bytesToCopy = length-overflow;\n        if (bytesToCopy > 0) {\n          System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesToCopy);\n          offset += bytesToCopy;\n          length -= bytesToCopy;\n        }\n        nextBuffer();\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    }  while(true);\n  }\n\n","bugFix":["c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#append(BytesRef).mjava","sourceNew":"  /**\n   * Appends the bytes in the provided {@link BytesRef} at\n   * the current position.\n   */\n  public void append(final BytesRef bytes) {\n    int bytesLeft = bytes.length;\n    int offset = bytes.offset;\n    while (bytesLeft > 0) {\n      int bufferLeft = BYTE_BLOCK_SIZE - byteUpto;\n      if (bytesLeft < bufferLeft) {\n        // fits within current buffer\n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesLeft);\n        byteUpto += bytesLeft;\n        break;\n      } else {\n        // fill up this buffer and move to next one\n        if (bufferLeft > 0) {\n          System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bufferLeft);\n        }\n        nextBuffer();\n        bytesLeft -= bufferLeft;\n        offset += bufferLeft;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Appends the bytes in the provided {@link BytesRef} at\n   * the current position.\n   */\n  public void append(final BytesRef bytes) {\n    int length = bytes.length;\n    if (length == 0) {\n      return;\n    }\n    int offset = bytes.offset;\n    int overflow = (length + byteUpto) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) { \n        System.arraycopy(bytes.bytes, offset, buffer, byteUpto, length);\n        byteUpto += length;\n        break;\n      } else {\n        final int bytesToCopy = length-overflow;\n        if (bytesToCopy > 0) {\n          System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesToCopy);\n          offset += bytesToCopy;\n          length -= bytesToCopy;\n        }\n        nextBuffer();\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    }  while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57"]},"commit2Childs":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c447e0427ce53ca53d708ce8b64eaf8cfd372591","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}