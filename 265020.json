{"path":"solr/core/src/test/org/apache/solr/search/TestSolrCoreParser#testHandySpanQuery().mjava","commits":[{"id":"8adbe9599e1f40415314d303714aa799ccedcbfa","date":1485884320,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCoreParser#testHandySpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // test custom query (HandyQueryBuilder) wrapping a SpanQuery\n  public void testHandySpanQuery() throws IOException, ParserException {\n    final String lhsXml = \"<SpanOr fieldName='contents'>\"\n        + \"<SpanTerm>rain</SpanTerm>\"\n        + \"<SpanTerm>spain</SpanTerm>\"\n        + \"<SpanTerm>plain</SpanTerm>\"\n        + \"</SpanOr>\";\n    final String rhsXml = \"<SpanNear fieldName='contents' slop='2' inOrder='true'>\"\n        + \"<SpanTerm>sunny</SpanTerm>\"\n        + \"<SpanTerm>sky</SpanTerm>\"\n        + \"</SpanNear>\";\n    final Query query = parseHandyQuery(lhsXml, rhsXml);\n    final BooleanQuery bq = (BooleanQuery)query;\n    assertEquals(2, bq.clauses().size());\n    for (int ii=0; ii<bq.clauses().size(); ++ii) {\n      final Query clauseQuery = bq.clauses().get(ii).getQuery();\n      switch (ii) {\n        case 0:\n          assertTrue(unwrapSpanBoostQuery(clauseQuery) instanceof SpanOrQuery);\n          break;\n        case 1:\n          assertTrue(unwrapSpanBoostQuery(clauseQuery) instanceof SpanNearQuery);\n          break;\n        default:\n          fail(\"unexpected clause index \"+ii);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCoreParser#testHandySpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // test custom query (HandyQueryBuilder) wrapping a SpanQuery\n  public void testHandySpanQuery() throws IOException, ParserException {\n    final String lhsXml = \"<SpanOr fieldName='contents'>\"\n        + \"<SpanTerm>rain</SpanTerm>\"\n        + \"<SpanTerm>spain</SpanTerm>\"\n        + \"<SpanTerm>plain</SpanTerm>\"\n        + \"</SpanOr>\";\n    final String rhsXml = \"<SpanNear fieldName='contents' slop='2' inOrder='true'>\"\n        + \"<SpanTerm>sunny</SpanTerm>\"\n        + \"<SpanTerm>sky</SpanTerm>\"\n        + \"</SpanNear>\";\n    final Query query = parseHandyQuery(lhsXml, rhsXml);\n    final BooleanQuery bq = (BooleanQuery)query;\n    assertEquals(2, bq.clauses().size());\n    for (int ii=0; ii<bq.clauses().size(); ++ii) {\n      final Query clauseQuery = bq.clauses().get(ii).getQuery();\n      switch (ii) {\n        case 0:\n          assertTrue(unwrapSpanBoostQuery(clauseQuery) instanceof SpanOrQuery);\n          break;\n        case 1:\n          assertTrue(unwrapSpanBoostQuery(clauseQuery) instanceof SpanNearQuery);\n          break;\n        default:\n          fail(\"unexpected clause index \"+ii);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8adbe9599e1f40415314d303714aa799ccedcbfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8adbe9599e1f40415314d303714aa799ccedcbfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8adbe9599e1f40415314d303714aa799ccedcbfa"]},"commit2Childs":{"8adbe9599e1f40415314d303714aa799ccedcbfa":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8adbe9599e1f40415314d303714aa799ccedcbfa","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}