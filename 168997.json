{"path":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoMBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17214d8e78747476e041c28fa2128452c7076257","date":1559763541,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(solrMetricsContext, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(metricManager, registry, \"foo\", scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(CaffeineCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(solrMetricsContext, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof CaffeineCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(solrMetricsContext, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","pathOld":"solr/core/src/test/org/apache/solr/SolrInfoBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void testCallMBeanInfo() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(CaffeineCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for(@SuppressWarnings({\"rawtypes\"})Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(solrMetricsContext, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof CaffeineCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<>();\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(CaffeineCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    SolrMetricManager metricManager = h.getCoreContainer().getMetricManager();\n    String registry = h.getCore().getCoreMetricManager().getRegistryName();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    for( Class clazz : classes ) {\n      if( SolrInfoBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoBean info = (SolrInfoBean)clazz.getConstructor().newInstance();\n          if (info instanceof SolrMetricProducer) {\n            ((SolrMetricProducer)info).initializeMetrics(solrMetricsContext, scope);\n          }\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getName() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getDescription() );\n          assertNotNull( info.getClass().getCanonicalName(), info.getCategory() );\n          \n          if( info instanceof CaffeineCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          checked++;\n        }\n        catch( ReflectiveOperationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initialize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43564cbb30b064675027cfb569564e8531096e97":["28288370235ed02234a64753cdbf0c6ec096304a","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["17214d8e78747476e041c28fa2128452c7076257"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["816521ebaad5add9cb96bb88c577394e2938c40b","5ff704ef91e9ae30ca59babb23ece85720701b60"],"e98520789adb1d5ad05afb4956eca0944a929688":["4d7d3943904804560937e6239effeebda0f920e4"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["43564cbb30b064675027cfb569564e8531096e97"],"bfc52860e6d13d034226a760813c59d984c6817a":["28288370235ed02234a64753cdbf0c6ec096304a"],"17214d8e78747476e041c28fa2128452c7076257":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"43564cbb30b064675027cfb569564e8531096e97":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["e98520789adb1d5ad05afb4956eca0944a929688"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["43564cbb30b064675027cfb569564e8531096e97","30c8e5574b55d57947e989443dfde611646530ee","bfc52860e6d13d034226a760813c59d984c6817a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["17214d8e78747476e041c28fa2128452c7076257"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"17214d8e78747476e041c28fa2128452c7076257":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}