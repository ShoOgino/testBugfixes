{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","commits":[{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setState(Map<String, Object> state) {\n    lastCollectionEvent.clear();\n    lastNodeEvent.clear();\n    lastShardEvent.clear();\n    lastReplicaEvent.clear();\n    Map<String, Long> collTimes = (Map<String, Long>)state.get(\"lastCollectionEvent\");\n    if (collTimes != null) {\n      lastCollectionEvent.putAll(collTimes);\n    }\n    Map<String, Long> nodeTimes = (Map<String, Long>)state.get(\"lastNodeEvent\");\n    if (nodeTimes != null) {\n      lastNodeEvent.putAll(nodeTimes);\n    }\n    Map<String, Long> shardTimes = (Map<String, Long>)state.get(\"lastShardEvent\");\n    if (shardTimes != null) {\n      lastShardEvent.putAll(shardTimes);\n    }\n    Map<String, Long> replicaTimes = (Map<String, Long>)state.get(\"lastReplicaEvent\");\n    if (replicaTimes != null) {\n      lastReplicaEvent.putAll(replicaTimes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2ba631afa835c2dfd14555cf19ae7e73663c17","date":1505762504,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void setState(Map<String, Object> state) {\n    lastCollectionEvent.clear();\n    lastNodeEvent.clear();\n    lastShardEvent.clear();\n    lastReplicaEvent.clear();\n    Map<String, Long> collTimes = (Map<String, Long>)state.get(\"lastCollectionEvent\");\n    if (collTimes != null) {\n      lastCollectionEvent.putAll(collTimes);\n    }\n    Map<String, Long> nodeTimes = (Map<String, Long>)state.get(\"lastNodeEvent\");\n    if (nodeTimes != null) {\n      lastNodeEvent.putAll(nodeTimes);\n    }\n    Map<String, Long> shardTimes = (Map<String, Long>)state.get(\"lastShardEvent\");\n    if (shardTimes != null) {\n      lastShardEvent.putAll(shardTimes);\n    }\n    Map<String, Long> replicaTimes = (Map<String, Long>)state.get(\"lastReplicaEvent\");\n    if (replicaTimes != null) {\n      lastReplicaEvent.putAll(replicaTimes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setState(Map<String, Object> state) {\n    lastCollectionEvent.clear();\n    lastNodeEvent.clear();\n    lastShardEvent.clear();\n    lastReplicaEvent.clear();\n    Map<String, Long> collTimes = (Map<String, Long>)state.get(\"lastCollectionEvent\");\n    if (collTimes != null) {\n      lastCollectionEvent.putAll(collTimes);\n    }\n    Map<String, Long> nodeTimes = (Map<String, Long>)state.get(\"lastNodeEvent\");\n    if (nodeTimes != null) {\n      lastNodeEvent.putAll(nodeTimes);\n    }\n    Map<String, Long> shardTimes = (Map<String, Long>)state.get(\"lastShardEvent\");\n    if (shardTimes != null) {\n      lastShardEvent.putAll(shardTimes);\n    }\n    Map<String, Long> replicaTimes = (Map<String, Long>)state.get(\"lastReplicaEvent\");\n    if (replicaTimes != null) {\n      lastReplicaEvent.putAll(replicaTimes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","sourceNew":"  @Override\n  protected void setState(Map<String, Object> state) {\n    lastCollectionEvent.clear();\n    lastNodeEvent.clear();\n    lastShardEvent.clear();\n    lastReplicaEvent.clear();\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> collTimes = (Map<String, Long>)state.get(\"lastCollectionEvent\");\n    if (collTimes != null) {\n      lastCollectionEvent.putAll(collTimes);\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> nodeTimes = (Map<String, Long>)state.get(\"lastNodeEvent\");\n    if (nodeTimes != null) {\n      lastNodeEvent.putAll(nodeTimes);\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> shardTimes = (Map<String, Long>)state.get(\"lastShardEvent\");\n    if (shardTimes != null) {\n      lastShardEvent.putAll(shardTimes);\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> replicaTimes = (Map<String, Long>)state.get(\"lastReplicaEvent\");\n    if (replicaTimes != null) {\n      lastReplicaEvent.putAll(replicaTimes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setState(Map<String, Object> state) {\n    lastCollectionEvent.clear();\n    lastNodeEvent.clear();\n    lastShardEvent.clear();\n    lastReplicaEvent.clear();\n    Map<String, Long> collTimes = (Map<String, Long>)state.get(\"lastCollectionEvent\");\n    if (collTimes != null) {\n      lastCollectionEvent.putAll(collTimes);\n    }\n    Map<String, Long> nodeTimes = (Map<String, Long>)state.get(\"lastNodeEvent\");\n    if (nodeTimes != null) {\n      lastNodeEvent.putAll(nodeTimes);\n    }\n    Map<String, Long> shardTimes = (Map<String, Long>)state.get(\"lastShardEvent\");\n    if (shardTimes != null) {\n      lastShardEvent.putAll(shardTimes);\n    }\n    Map<String, Long> replicaTimes = (Map<String, Long>)state.get(\"lastReplicaEvent\");\n    if (replicaTimes != null) {\n      lastReplicaEvent.putAll(replicaTimes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#setState(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void setState(Map<String, Object> state) {\n    lastCollectionEvent.clear();\n    lastNodeEvent.clear();\n    lastShardEvent.clear();\n    lastReplicaEvent.clear();\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> collTimes = (Map<String, Long>)state.get(\"lastCollectionEvent\");\n    if (collTimes != null) {\n      lastCollectionEvent.putAll(collTimes);\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> nodeTimes = (Map<String, Long>)state.get(\"lastNodeEvent\");\n    if (nodeTimes != null) {\n      lastNodeEvent.putAll(nodeTimes);\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> shardTimes = (Map<String, Long>)state.get(\"lastShardEvent\");\n    if (shardTimes != null) {\n      lastShardEvent.putAll(shardTimes);\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Long> replicaTimes = (Map<String, Long>)state.get(\"lastReplicaEvent\");\n    if (replicaTimes != null) {\n      lastReplicaEvent.putAll(replicaTimes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":["3955a9511098c96b652734b2f2d4160d07cc2d63"]},"commit2Childs":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3f354f2175f861ee625bb3c9572d53b77cd8545","3955a9511098c96b652734b2f2d4160d07cc2d63"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}