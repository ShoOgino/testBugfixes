{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#findTargetCollectionGivenTimestamp(Instant).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#findTargetCollectionGivenTimestamp(Instant).mjava","pathOld":"/dev/null","sourceNew":"  /** Given the route key, finds the collection.  Returns null if too old to go in last one. */\n  private String findTargetCollectionGivenTimestamp(Instant docTimestamp) {\n    // Lookup targetCollection given route key.  Iterates in reverse chronological order.\n    //    We're O(N) here but N should be small, the loop is fast, and usually looking for 1st.\n    for (Map.Entry<Instant, String> entry : parsedCollectionsDesc) {\n      Instant colStartTime = entry.getKey();\n      if (!docTimestamp.isBefore(colStartTime)) {  // i.e. docTimeStamp is >= the colStartTime\n        return entry.getValue(); //found it\n      }\n    }\n    return null; //not found\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#findTargetCollectionGivenTimestamp(Instant).mjava","pathOld":"/dev/null","sourceNew":"  /** Given the route key, finds the collection.  Returns null if too old to go in last one. */\n  private String findTargetCollectionGivenTimestamp(Instant docTimestamp) {\n    // Lookup targetCollection given route key.  Iterates in reverse chronological order.\n    //    We're O(N) here but N should be small, the loop is fast, and usually looking for 1st.\n    for (Map.Entry<Instant, String> entry : parsedCollectionsDesc) {\n      Instant colStartTime = entry.getKey();\n      if (!docTimestamp.isBefore(colStartTime)) {  // i.e. docTimeStamp is >= the colStartTime\n        return entry.getValue(); //found it\n      }\n    }\n    return null; //not found\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#findCandidateGivenTimestamp(Instant,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#findTargetCollectionGivenTimestamp(Instant).mjava","sourceNew":"  /**\n   * Given the route key, finds the correct collection or returns the most recent collection if the doc\n   * is in the future. Future docs will potentially cause creation of a collection that does not yet exist\n   * or an error if they exceed the maxFutureMs setting.\n   *\n   * @throws SolrException if the doc is too old to be stored in the TRA\n   */\n  private Map.Entry<Instant, String> findCandidateGivenTimestamp(Instant docTimestamp, String printableId) {\n    // Lookup targetCollection given route key.  Iterates in reverse chronological order.\n    //    We're O(N) here but N should be small, the loop is fast, and usually looking for 1st.\n    for (Map.Entry<Instant, String> entry : parsedCollectionsDesc) {\n      Instant colStartTime = entry.getKey();\n      if (!docTimestamp.isBefore(colStartTime)) {  // i.e. docTimeStamp is >= the colStartTime\n        return entry; //found it\n      }\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"Doc \" + printableId + \" couldn't be routed with \" + timeRoutedAlias.getRouteField() + \"=\" + docTimestamp);\n  }\n\n","sourceOld":"  /** Given the route key, finds the collection.  Returns null if too old to go in last one. */\n  private String findTargetCollectionGivenTimestamp(Instant docTimestamp) {\n    // Lookup targetCollection given route key.  Iterates in reverse chronological order.\n    //    We're O(N) here but N should be small, the loop is fast, and usually looking for 1st.\n    for (Map.Entry<Instant, String> entry : parsedCollectionsDesc) {\n      Instant colStartTime = entry.getKey();\n      if (!docTimestamp.isBefore(colStartTime)) {  // i.e. docTimeStamp is >= the colStartTime\n        return entry.getValue(); //found it\n      }\n    }\n    return null; //not found\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849083f8095b1ffaff05a66e0b1e024617b9968d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}