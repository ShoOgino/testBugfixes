{"path":"lucene/sandbox/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight indexWeight = indexQuery.createWeight(searcher, needsScores, boost);\n    final Weight dvWeight = dvQuery.createWeight(searcher, needsScores, boost);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return indexWeight.bulkScorer(context);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final ScorerSupplier indexScorerSupplier = indexWeight.scorerSupplier(context);\n        final ScorerSupplier dvScorerSupplier = dvWeight.scorerSupplier(context); \n        if (indexScorerSupplier == null || dvScorerSupplier == null) {\n          return null;\n        }\n        return new ScorerSupplier() {\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            return (randomAccess ? dvScorerSupplier : indexScorerSupplier).get(randomAccess);\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(indexScorerSupplier.cost(), dvScorerSupplier.cost());\n          }\n        };\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight indexWeight = indexQuery.createWeight(searcher, needsScores, boost);\n    final Weight dvWeight = dvQuery.createWeight(searcher, needsScores, boost);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return indexWeight.bulkScorer(context);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final ScorerSupplier indexScorerSupplier = indexWeight.scorerSupplier(context);\n        final ScorerSupplier dvScorerSupplier = dvWeight.scorerSupplier(context); \n        if (indexScorerSupplier == null || dvScorerSupplier == null) {\n          return null;\n        }\n        return new ScorerSupplier() {\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            return (randomAccess ? dvScorerSupplier : indexScorerSupplier).get(randomAccess);\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(indexScorerSupplier.cost(), dvScorerSupplier.cost());\n          }\n        };\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight indexWeight = indexQuery.createWeight(searcher, needsScores, boost);\n    final Weight dvWeight = dvQuery.createWeight(searcher, needsScores, boost);\n    return new Weight(this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        indexWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        // We need to check a single doc, so the dv query should perform better\n        return dvWeight.explain(context, doc);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        // Bulk scorers need to consume the entire set of docs, so using an\n        // index structure should perform better\n        return indexWeight.bulkScorer(context);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final ScorerSupplier indexScorerSupplier = indexWeight.scorerSupplier(context);\n        final ScorerSupplier dvScorerSupplier = dvWeight.scorerSupplier(context);\n        if (indexScorerSupplier == null || dvScorerSupplier == null) {\n          return null;\n        }\n        return new ScorerSupplier() {\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            return (randomAccess ? dvScorerSupplier : indexScorerSupplier).get(randomAccess);\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(indexScorerSupplier.cost(), dvScorerSupplier.cost());\n          }\n        };\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight indexWeight = indexQuery.createWeight(searcher, needsScores, boost);\n    final Weight dvWeight = dvQuery.createWeight(searcher, needsScores, boost);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return indexWeight.bulkScorer(context);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final ScorerSupplier indexScorerSupplier = indexWeight.scorerSupplier(context);\n        final ScorerSupplier dvScorerSupplier = dvWeight.scorerSupplier(context); \n        if (indexScorerSupplier == null || dvScorerSupplier == null) {\n          return null;\n        }\n        return new ScorerSupplier() {\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            return (randomAccess ? dvScorerSupplier : indexScorerSupplier).get(randomAccess);\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(indexScorerSupplier.cost(), dvScorerSupplier.cost());\n          }\n        };\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/IndexOrDocValuesQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight indexWeight = indexQuery.createWeight(searcher, needsScores, boost);\n    final Weight dvWeight = dvQuery.createWeight(searcher, needsScores, boost);\n    return new Weight(this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        indexWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        // We need to check a single doc, so the dv query should perform better\n        return dvWeight.explain(context, doc);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        // Bulk scorers need to consume the entire set of docs, so using an\n        // index structure should perform better\n        return indexWeight.bulkScorer(context);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final ScorerSupplier indexScorerSupplier = indexWeight.scorerSupplier(context);\n        final ScorerSupplier dvScorerSupplier = dvWeight.scorerSupplier(context);\n        if (indexScorerSupplier == null || dvScorerSupplier == null) {\n          return null;\n        }\n        return new ScorerSupplier() {\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            return (randomAccess ? dvScorerSupplier : indexScorerSupplier).get(randomAccess);\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(indexScorerSupplier.cost(), dvScorerSupplier.cost());\n          }\n        };\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight indexWeight = indexQuery.createWeight(searcher, needsScores, boost);\n    final Weight dvWeight = dvQuery.createWeight(searcher, needsScores, boost);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return indexWeight.bulkScorer(context);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final ScorerSupplier indexScorerSupplier = indexWeight.scorerSupplier(context);\n        final ScorerSupplier dvScorerSupplier = dvWeight.scorerSupplier(context); \n        if (indexScorerSupplier == null || dvScorerSupplier == null) {\n          return null;\n        }\n        return new ScorerSupplier() {\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            return (randomAccess ? dvScorerSupplier : indexScorerSupplier).get(randomAccess);\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(indexScorerSupplier.cost(), dvScorerSupplier.cost());\n          }\n        };\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a412a7808b2815566cb17117ebe6638112b9a31":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["302d34f2c66e8d489ee13078305c330cbf67b226","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a412a7808b2815566cb17117ebe6638112b9a31"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["5a412a7808b2815566cb17117ebe6638112b9a31","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"5a412a7808b2815566cb17117ebe6638112b9a31":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"302d34f2c66e8d489ee13078305c330cbf67b226":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}