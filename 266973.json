{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testExclusive().mjava","sourceNew":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testExclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", false, false);\n    initializeIndex(new String[] {\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    initializeIndex(new String[] {\"A\", \"B\", \"D\"});\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D, only B in range\", 1, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added, still only B in range\", 1, hits.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}