{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n      while (threadsIterator.hasNext()) {\n        final ThreadState perThread = threadsIterator.next();\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.perThread.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.perThread.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n      while (threadsIterator.hasNext()) {\n        final ThreadState perThread = threadsIterator.next();\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.perThread.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.perThread.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n      while (threadsIterator.hasNext()) {\n        final ThreadState perThread = threadsIterator.next();\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.perThread.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.perThread.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f241b963c5bcd6c2293a928059dd2d64988a6042","date":1340296137,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":["334c1175813aea771a71728cd2c4ee4754fd0603"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":["efb7a19703a037c29e30440260d393500febc1f4","334c1175813aea771a71728cd2c4ee4754fd0603"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } catch (IOException ex) {\n              // continue\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ab569c1172c7f749243bbad23c63f9c5542aca4","date":1343845246,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n    synchronized (this) {\n      deleteQueue.clear();\n    }\n\n    try {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort(IndexWriter writer) {\n    assert !Thread.holdsLock(writer) : \"IndexWriter lock should never be hold when aborting\";\n    boolean success = false;\n    final Set<String> newFilesSet = new HashSet<String>();\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          abortThreadState(perThread, newFilesSet);\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + newFilesSet + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort(IndexWriter writer) {\n    assert !Thread.holdsLock(writer) : \"IndexWriter lock should never be hold when aborting\";\n    boolean success = false;\n    final Set<String> newFilesSet = new HashSet<String>();\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          abortThreadState(perThread, newFilesSet);\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + newFilesSet + \" success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":null,"sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() {\n    boolean success = false;\n\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          if (perThread.isActive()) { // we might be closed\n            try {\n              perThread.dwpt.abort();\n            } finally {\n              perThread.dwpt.checkAndResetHasAborted();\n              flushControl.doOnAbort(perThread);\n            }\n          } else {\n            assert closed;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort; abortedFiles=\" + abortedFiles + \" success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort(IndexWriter).mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n      final int limit = perThreadPool.getActiveThreadStateCount();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          abortThreadState(perThread);\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort(IndexWriter writer) throws IOException {\n    assert !Thread.holdsLock(writer) : \"IndexWriter lock should never be hold when aborting\";\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n      final int limit = perThreadPool.getActiveThreadStateCount();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          abortThreadState(perThread);\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n      for (final DocumentsWriterPerThread perThread : perThreadPool.filterAndLock(x -> true)) {\n        try {\n          abortDocumentsWriterPerThread(perThread);\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      assert perThreadPool.size() == 0\n          : \"There are still active DWPT in the pool: \" + perThreadPool.size();\n      success = true;\n    } finally {\n      if (success) {\n        assert flushControl.getFlushingBytes() == 0 : \"flushingBytes has unexpected value 0 != \" + flushControl.getFlushingBytes();\n        assert flushControl.netBytes() == 0 : \"netBytes has unexpected value 0 != \" + flushControl.netBytes();\n      }\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort success=\" + success);\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  synchronized void abort() throws IOException {\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"abort\");\n      }\n      final int limit = perThreadPool.getActiveThreadStateCount();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        try {\n          abortThreadState(perThread);\n        } finally {\n          perThread.unlock();\n        }\n      }\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"done abort success=\" + success);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["6b8498afacfc8322268ca0d659d274fcce08d557"],"7af110b00ea8df9429309d83e38e0533d82e144f":["6ab569c1172c7f749243bbad23c63f9c5542aca4"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["6ab569c1172c7f749243bbad23c63f9c5542aca4","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["6ab569c1172c7f749243bbad23c63f9c5542aca4","7af110b00ea8df9429309d83e38e0533d82e144f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","6ab569c1172c7f749243bbad23c63f9c5542aca4"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6b8498afacfc8322268ca0d659d274fcce08d557":["7af110b00ea8df9429309d83e38e0533d82e144f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6ab569c1172c7f749243bbad23c63f9c5542aca4"],"6ab569c1172c7f749243bbad23c63f9c5542aca4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","6b8498afacfc8322268ca0d659d274fcce08d557"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["f241b963c5bcd6c2293a928059dd2d64988a6042","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6b8498afacfc8322268ca0d659d274fcce08d557":["264935965977b4a9e2f3920420647072c9c49176"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"6ab569c1172c7f749243bbad23c63f9c5542aca4":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","6ab569c1172c7f749243bbad23c63f9c5542aca4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}