{"path":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#installPackage(String,String).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#installPackage(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Install a given package and version from the available repositories to Solr.\n   * The various steps for doing so are, briefly, a) find upload a manifest to package store,\n   * b) download the artifacts and upload to package store, c) call {@link PackageAPI} to register\n   * the package.\n   */\n  private boolean installPackage(String packageName, String version) throws SolrException {\n    SolrPackageInstance existingPlugin = packageManager.getPackageInstance(packageName, version);\n    if (existingPlugin != null && existingPlugin.version.equals(version)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Plugin already installed.\");\n    }\n\n    SolrPackageRelease release = getPackageRelease(packageName, version);\n    List<Path> downloaded = downloadPackageArtifacts(packageName, version);\n    // TODO: Should we introduce a checksum to validate the downloading?\n    // Currently, not a big problem since signature based checking happens anyway\n\n    try {\n      // post the manifest\n      PackageUtils.printGreen(\"Posting manifest...\");\n\n      if (release.manifest == null) {\n        String manifestJson = PackageUtils.getFileFromJarsAsString(downloaded, \"manifest.json\");\n        if (manifestJson == null) {\n          throw new SolrException(ErrorCode.NOT_FOUND, \"No manifest found for package: \" + packageName + \", version: \" + version);\n        }\n        release.manifest = getMapper().readValue(manifestJson, SolrPackage.Manifest.class);\n      }\n      String manifestJson = getMapper().writeValueAsString(release.manifest);\n      String manifestSHA512 = BlobRepository.sha512Digest(ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")));\n      PackageUtils.postFile(solrClient, ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")),\n          String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, \"manifest.json\"), null);\n\n      // post the artifacts\n      PackageUtils.printGreen(\"Posting artifacts...\");\n      for (int i=0; i<release.artifacts.size(); i++) {\n        PackageUtils.postFile(solrClient, ByteBuffer.wrap(FileUtils.readFileToByteArray(downloaded.get(i).toFile())),\n            String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, downloaded.get(i).getFileName().toString()),\n            release.artifacts.get(i).sig\n            );\n      }\n\n      // Call Package API to add this version of the package\n      PackageUtils.printGreen(\"Executing Package API to register this package...\");\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = version;\n      add.pkg = packageName;\n      add.files = downloaded.stream().map(\n          file -> String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, file.getFileName().toString())).collect(Collectors.toList());  \n      add.manifest = \"/package/\" + packageName + \"/\" + version + \"/manifest.json\";\n      add.manifestSHA512 = manifestSHA512;\n\n      V2Request req = new V2Request.Builder(\"/api/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n\n      try {\n        V2Response resp = req.process(solrClient);\n        PackageUtils.printGreen(\"Response: \"+resp.jsonStr());\n      } catch (SolrServerException | IOException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n\n    } catch (SolrServerException | IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#installPackage(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#installPackage(String,String).mjava","sourceNew":"  /**\n   * Install a given package and version from the available repositories to Solr.\n   * The various steps for doing so are, briefly, a) find upload a manifest to package store,\n   * b) download the artifacts and upload to package store, c) call {@link PackageAPI} to register\n   * the package.\n   */\n  private boolean installPackage(String packageName, String version) throws SolrException {\n    SolrPackageInstance existingPlugin = packageManager.getPackageInstance(packageName, version);\n    if (existingPlugin != null && existingPlugin.version.equals(version)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Plugin already installed.\");\n    }\n\n    SolrPackageRelease release = getPackageRelease(packageName, version);\n    List<Path> downloaded = downloadPackageArtifacts(packageName, version);\n    // TODO: Should we introduce a checksum to validate the downloading?\n    // Currently, not a big problem since signature based checking happens anyway\n\n    try {\n      // post the manifest\n      PackageUtils.printGreen(\"Posting manifest...\");\n\n      if (release.manifest == null) {\n        String manifestJson = PackageUtils.getFileFromJarsAsString(downloaded, \"manifest.json\");\n        if (manifestJson == null) {\n          throw new SolrException(ErrorCode.NOT_FOUND, \"No manifest found for package: \" + packageName + \", version: \" + version);\n        }\n        release.manifest = getMapper().readValue(manifestJson, SolrPackage.Manifest.class);\n      }\n      String manifestJson = getMapper().writeValueAsString(release.manifest);\n      String manifestSHA512 = BlobRepository.sha512Digest(ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")));\n      PackageUtils.postFile(solrClient, ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")),\n          String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, \"manifest.json\"), null);\n\n      // post the artifacts\n      PackageUtils.printGreen(\"Posting artifacts...\");\n      for (int i=0; i<release.artifacts.size(); i++) {\n        PackageUtils.postFile(solrClient, ByteBuffer.wrap(FileUtils.readFileToByteArray(downloaded.get(i).toFile())),\n            String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, downloaded.get(i).getFileName().toString()),\n            release.artifacts.get(i).sig\n            );\n      }\n\n      // Call Package API to add this version of the package\n      PackageUtils.printGreen(\"Executing Package API to register this package...\");\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = version;\n      add.pkg = packageName;\n      add.files = downloaded.stream().map(\n          file -> String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, file.getFileName().toString())).collect(Collectors.toList());  \n      add.manifest = \"/package/\" + packageName + \"/\" + version + \"/manifest.json\";\n      add.manifestSHA512 = manifestSHA512;\n\n      V2Request req = new V2Request.Builder(PackageUtils.PACKAGE_PATH)\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n\n      try {\n        V2Response resp = req.process(solrClient);\n        PackageUtils.printGreen(\"Response: \"+resp.jsonStr());\n      } catch (SolrServerException | IOException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n\n    } catch (SolrServerException | IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Install a given package and version from the available repositories to Solr.\n   * The various steps for doing so are, briefly, a) find upload a manifest to package store,\n   * b) download the artifacts and upload to package store, c) call {@link PackageAPI} to register\n   * the package.\n   */\n  private boolean installPackage(String packageName, String version) throws SolrException {\n    SolrPackageInstance existingPlugin = packageManager.getPackageInstance(packageName, version);\n    if (existingPlugin != null && existingPlugin.version.equals(version)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Plugin already installed.\");\n    }\n\n    SolrPackageRelease release = getPackageRelease(packageName, version);\n    List<Path> downloaded = downloadPackageArtifacts(packageName, version);\n    // TODO: Should we introduce a checksum to validate the downloading?\n    // Currently, not a big problem since signature based checking happens anyway\n\n    try {\n      // post the manifest\n      PackageUtils.printGreen(\"Posting manifest...\");\n\n      if (release.manifest == null) {\n        String manifestJson = PackageUtils.getFileFromJarsAsString(downloaded, \"manifest.json\");\n        if (manifestJson == null) {\n          throw new SolrException(ErrorCode.NOT_FOUND, \"No manifest found for package: \" + packageName + \", version: \" + version);\n        }\n        release.manifest = getMapper().readValue(manifestJson, SolrPackage.Manifest.class);\n      }\n      String manifestJson = getMapper().writeValueAsString(release.manifest);\n      String manifestSHA512 = BlobRepository.sha512Digest(ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")));\n      PackageUtils.postFile(solrClient, ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")),\n          String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, \"manifest.json\"), null);\n\n      // post the artifacts\n      PackageUtils.printGreen(\"Posting artifacts...\");\n      for (int i=0; i<release.artifacts.size(); i++) {\n        PackageUtils.postFile(solrClient, ByteBuffer.wrap(FileUtils.readFileToByteArray(downloaded.get(i).toFile())),\n            String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, downloaded.get(i).getFileName().toString()),\n            release.artifacts.get(i).sig\n            );\n      }\n\n      // Call Package API to add this version of the package\n      PackageUtils.printGreen(\"Executing Package API to register this package...\");\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = version;\n      add.pkg = packageName;\n      add.files = downloaded.stream().map(\n          file -> String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, file.getFileName().toString())).collect(Collectors.toList());  \n      add.manifest = \"/package/\" + packageName + \"/\" + version + \"/manifest.json\";\n      add.manifestSHA512 = manifestSHA512;\n\n      V2Request req = new V2Request.Builder(\"/api/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n\n      try {\n        V2Response resp = req.process(solrClient);\n        PackageUtils.printGreen(\"Response: \"+resp.jsonStr());\n      } catch (SolrServerException | IOException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n\n    } catch (SolrServerException | IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#installPackage(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#installPackage(String,String).mjava","sourceNew":"  /**\n   * Install a given package and version from the available repositories to Solr.\n   * The various steps for doing so are, briefly, a) find upload a manifest to package store,\n   * b) download the artifacts and upload to package store, c) call {@link PackageAPI} to register\n   * the package.\n   */\n  private boolean installPackage(String packageName, String version) throws SolrException {\n    SolrPackageInstance existingPlugin = packageManager.getPackageInstance(packageName, version);\n    if (existingPlugin != null && existingPlugin.version.equals(version)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Plugin already installed.\");\n    }\n\n    SolrPackageRelease release = getPackageRelease(packageName, version);\n    List<Path> downloaded = downloadPackageArtifacts(packageName, version);\n    // TODO: Should we introduce a checksum to validate the downloading?\n    // Currently, not a big problem since signature based checking happens anyway\n\n    try {\n      // post the manifest\n      PackageUtils.printGreen(\"Posting manifest...\");\n\n      if (release.manifest == null) {\n        String manifestJson = PackageUtils.getFileFromJarsAsString(downloaded, \"manifest.json\");\n        if (manifestJson == null) {\n          throw new SolrException(ErrorCode.NOT_FOUND, \"No manifest found for package: \" + packageName + \", version: \" + version);\n        }\n        release.manifest = getMapper().readValue(manifestJson, SolrPackage.Manifest.class);\n      }\n      String manifestJson = getMapper().writeValueAsString(release.manifest);\n      String manifestSHA512 = BlobRepository.sha512Digest(ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")));\n      PackageUtils.postFile(solrClient, ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")),\n          String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, \"manifest.json\"), null);\n\n      // post the artifacts\n      PackageUtils.printGreen(\"Posting artifacts...\");\n      for (int i=0; i<release.artifacts.size(); i++) {\n        PackageUtils.postFile(solrClient, ByteBuffer.wrap(FileUtils.readFileToByteArray(downloaded.get(i).toFile())),\n            String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, downloaded.get(i).getFileName().toString()),\n            release.artifacts.get(i).sig\n            );\n      }\n\n      // Call Package API to add this version of the package\n      PackageUtils.printGreen(\"Executing Package API to register this package...\");\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = version;\n      add.pkg = packageName;\n      add.files = downloaded.stream().map(\n          file -> String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, file.getFileName().toString())).collect(Collectors.toList());  \n      add.manifest = \"/package/\" + packageName + \"/\" + version + \"/manifest.json\";\n      add.manifestSHA512 = manifestSHA512;\n\n      V2Request req = new V2Request.Builder(PackageUtils.PACKAGE_PATH)\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n\n      try {\n        V2Response resp = req.process(solrClient);\n        PackageUtils.printGreen(\"Response: \"+resp.jsonStr());\n      } catch (SolrServerException | IOException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n\n    } catch (SolrServerException | IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Install a given package and version from the available repositories to Solr.\n   * The various steps for doing so are, briefly, a) find upload a manifest to package store,\n   * b) download the artifacts and upload to package store, c) call {@link PackageAPI} to register\n   * the package.\n   */\n  private boolean installPackage(String packageName, String version) throws SolrException {\n    SolrPackageInstance existingPlugin = packageManager.getPackageInstance(packageName, version);\n    if (existingPlugin != null && existingPlugin.version.equals(version)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Plugin already installed.\");\n    }\n\n    SolrPackageRelease release = getPackageRelease(packageName, version);\n    List<Path> downloaded = downloadPackageArtifacts(packageName, version);\n    // TODO: Should we introduce a checksum to validate the downloading?\n    // Currently, not a big problem since signature based checking happens anyway\n\n    try {\n      // post the manifest\n      PackageUtils.printGreen(\"Posting manifest...\");\n\n      if (release.manifest == null) {\n        String manifestJson = PackageUtils.getFileFromJarsAsString(downloaded, \"manifest.json\");\n        if (manifestJson == null) {\n          throw new SolrException(ErrorCode.NOT_FOUND, \"No manifest found for package: \" + packageName + \", version: \" + version);\n        }\n        release.manifest = getMapper().readValue(manifestJson, SolrPackage.Manifest.class);\n      }\n      String manifestJson = getMapper().writeValueAsString(release.manifest);\n      String manifestSHA512 = BlobRepository.sha512Digest(ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")));\n      PackageUtils.postFile(solrClient, ByteBuffer.wrap(manifestJson.getBytes(\"UTF-8\")),\n          String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, \"manifest.json\"), null);\n\n      // post the artifacts\n      PackageUtils.printGreen(\"Posting artifacts...\");\n      for (int i=0; i<release.artifacts.size(); i++) {\n        PackageUtils.postFile(solrClient, ByteBuffer.wrap(FileUtils.readFileToByteArray(downloaded.get(i).toFile())),\n            String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, downloaded.get(i).getFileName().toString()),\n            release.artifacts.get(i).sig\n            );\n      }\n\n      // Call Package API to add this version of the package\n      PackageUtils.printGreen(\"Executing Package API to register this package...\");\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = version;\n      add.pkg = packageName;\n      add.files = downloaded.stream().map(\n          file -> String.format(Locale.ROOT, \"/package/%s/%s/%s\", packageName, version, file.getFileName().toString())).collect(Collectors.toList());  \n      add.manifest = \"/package/\" + packageName + \"/\" + version + \"/manifest.json\";\n      add.manifestSHA512 = manifestSHA512;\n\n      V2Request req = new V2Request.Builder(\"/api/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n\n      try {\n        V2Response resp = req.process(solrClient);\n        PackageUtils.printGreen(\"Response: \"+resp.jsonStr());\n      } catch (SolrServerException | IOException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n\n    } catch (SolrServerException | IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62d55718cd611235e975fa73a6bdf263fbd58859"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"62d55718cd611235e975fa73a6bdf263fbd58859":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}