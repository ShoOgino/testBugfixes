{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    Path file = getWorkDir().resolve(\"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    try (BufferedReader br = Files.newBufferedReader(file, StandardCharsets.UTF_8)) {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line); // header line is written once, no matter how many threads there are\n      for (int i = 0; i < threads.length; i++) {\n        line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}