{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db36cab313d5b26c5e9f23f828d863efc8b0281b","date":1327501086,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8","date":1365482412,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ee035c01471fd3e2c4f4cd57a0c1e293886bd44","date":1423565351,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4","date":1425860185,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ebe869a45c162aebb0f477914767f6d0562cca5","date":1430403651,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7750beabbbfbdcfe0c55d1a062872e03d4f31c68","date":1507638239,"type":3,"author":"tballison","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c065f41b1ad6becb9cdc0758c462d71eb589a109","date":1507906465,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"deprecation\"})\n  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"deprecation\"})\n  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    @SuppressWarnings({\"unchecked\"})\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<>();\n    @SuppressWarnings({\"unchecked\"})\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      tikaParser = new AutoDetectParser(tikaConfig);\n    } else {\n      tikaParser = context.getSolrCore().getResourceLoader().newInstance(parser, Parser.class);\n    }\n    try {\n        ParseContext context = new ParseContext();\n        if (\"identity\".equals(htmlMapper)){\n          context.set(HtmlMapper.class, IdentityHtmlMapper.INSTANCE);\n        }\n        if (extractEmbedded) {\n          context.set(Parser.class, tikaParser);\n        } else {\n          context.set(Parser.class, EMPTY_PARSER);\n        }\n        tikaParser.parse(is, contentHandler, metadata , context);\n    } catch (Exception e) {\n      if(SKIP.equals(onError)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SKIP_ROW,\n            \"Document skipped :\" + e.getMessage());\n      }\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    tryToAddLatLon(metadata, row);\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["c065f41b1ad6becb9cdc0758c462d71eb589a109"],"db36cab313d5b26c5e9f23f828d863efc8b0281b":["c26f00b574427b55127e869b935845554afde1fa"],"4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","db36cab313d5b26c5e9f23f828d863efc8b0281b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7ee035c01471fd3e2c4f4cd57a0c1e293886bd44","4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"7ebe869a45c162aebb0f477914767f6d0562cca5":["4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","db36cab313d5b26c5e9f23f828d863efc8b0281b"],"7ee035c01471fd3e2c4f4cd57a0c1e293886bd44":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7750beabbbfbdcfe0c55d1a062872e03d4f31c68":["7ebe869a45c162aebb0f477914767f6d0562cca5"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["db36cab313d5b26c5e9f23f828d863efc8b0281b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4":["7ee035c01471fd3e2c4f4cd57a0c1e293886bd44"],"c065f41b1ad6becb9cdc0758c462d71eb589a109":["7ebe869a45c162aebb0f477914767f6d0562cca5","7750beabbbfbdcfe0c55d1a062872e03d4f31c68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7ee035c01471fd3e2c4f4cd57a0c1e293886bd44"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"db36cab313d5b26c5e9f23f828d863efc8b0281b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["db36cab313d5b26c5e9f23f828d863efc8b0281b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ebe869a45c162aebb0f477914767f6d0562cca5":["7750beabbbfbdcfe0c55d1a062872e03d4f31c68","c065f41b1ad6becb9cdc0758c462d71eb589a109"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"7ee035c01471fd3e2c4f4cd57a0c1e293886bd44":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4"],"7750beabbbfbdcfe0c55d1a062872e03d4f31c68":["c065f41b1ad6becb9cdc0758c462d71eb589a109"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["4895f0cd3a4e0530cb56c32f0033bf7ea32de4c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"4bc0ba275af8ad75f2e706cbe9bbc0b6b2d102c4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ebe869a45c162aebb0f477914767f6d0562cca5"],"c065f41b1ad6becb9cdc0758c462d71eb589a109":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}