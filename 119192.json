{"path":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testPositionIncrements().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    // test that generated tokens start at the same posInc as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"), \n        new String[] { \"aa\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"aa\" },\n        new int[] { 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"bb\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"bb\" },\n        new int[] { 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 5, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 0, 2 });\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    // test that generated tokens start at the same posInc as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"), \n        new String[] { \"aa\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"aa\" },\n        new int[] { 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"bb\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"bb\" },\n        new int[] { 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 5, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 0, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54c9be9a3aac8e0bab09abb249165f90a6758f01","date":1331903190,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testPositionIncrements().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testPositionIncrements().mjava","sourceNew":"  public void testPositionIncrements() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    // test that generated tokens start at the same posInc as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"), \n        new String[] { \"aa\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"b,1 a,0\"),\n        new String[] { \"b\", \"aa\" },\n        new int[] { 1, 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"bb\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"c,1 b,0\"),\n        new String[] { \"c\", \"bb\" },\n        new int[] { 1, 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 5, 2 });\n    assertTokenizesTo(map, tokens(\"d,1 c,0\"),\n        new String[] { \"d\", \"cc\", \"c2\" },\n        new int[] { 1, 0, 2 });\n  }\n\n","sourceOld":"  public void testPositionIncrements() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    // test that generated tokens start at the same posInc as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"), \n        new String[] { \"aa\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"aa\" },\n        new int[] { 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"bb\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"bb\" },\n        new int[] { 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 5, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 0, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testPositionIncrements().mjava","sourceNew":null,"sourceOld":"  public void testPositionIncrements() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    // test that generated tokens start at the same posInc as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"), \n        new String[] { \"aa\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"b,1 a,0\"),\n        new String[] { \"b\", \"aa\" },\n        new int[] { 1, 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"bb\" },\n        new int[] { 5 });\n    assertTokenizesTo(map, tokens(\"c,1 b,0\"),\n        new String[] { \"c\", \"bb\" },\n        new int[] { 1, 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"cc\", \"c2\" },\n        new int[] { 5, 2 });\n    assertTokenizesTo(map, tokens(\"d,1 c,0\"),\n        new String[] { \"d\", \"cc\", \"c2\" },\n        new int[] { 1, 0, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["54c9be9a3aac8e0bab09abb249165f90a6758f01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54c9be9a3aac8e0bab09abb249165f90a6758f01":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"54c9be9a3aac8e0bab09abb249165f90a6758f01":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["54c9be9a3aac8e0bab09abb249165f90a6758f01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}