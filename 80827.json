{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","sourceNew":"  public void testGetTermSet() throws Exception {\n    Query query = paW.parse( \"A AND B OR x:C NOT (D AND E)\" );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","sourceOld":"  public void testGetTermSet() throws Exception {\n    Query query = paW.parse( \"A AND B OR x:C NOT (D AND E)\" );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","sourceNew":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","sourceOld":"  public void testGetTermSet() throws Exception {\n    Query query = paW.parse( \"A AND B OR x:C NOT (D AND E)\" );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","sourceNew":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","sourceOld":"  public void testGetTermSet() throws Exception {\n    Query query = paW.parse( \"A AND B OR x:C NOT (D AND E)\" );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","sourceNew":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","sourceOld":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["b89678825b68eccaf09e6ab71675fc0b0af1e099","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}