{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","date":1341575807,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d2afc65d4799ba989bc52649d9c2fb038e6bca4","date":1363890800,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 200 * RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), -1);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new PatternTokenizer(newAttributeFactory(), Pattern.compile(\"a\"), 0);\n        return new TokenStreamComponents(tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","bugFix":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["5d2afc65d4799ba989bc52649d9c2fb038e6bca4"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5d2afc65d4799ba989bc52649d9c2fb038e6bca4":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"57c6c784f777a2cc8fa014507ea129526822714d":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"04e7f30683f53928b2fce016e6430c9795caff22":[],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["04e7f30683f53928b2fce016e6430c9795caff22","5d2afc65d4799ba989bc52649d9c2fb038e6bca4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"5d2afc65d4799ba989bc52649d9c2fb038e6bca4":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"57c6c784f777a2cc8fa014507ea129526822714d":["71da933d30aea361ccc224d6544c451cbf49916d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["57c6c784f777a2cc8fa014507ea129526822714d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}