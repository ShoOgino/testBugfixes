{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    BitSet bs = lfilter.bits(this.reader);\n    OpenBitSet obs = new OpenBitSet(bs.size());\n    for(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {\n      obs.fastSet(i);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    BitSet bs = lfilter.bits(this.reader);\n    OpenBitSet obs = new OpenBitSet(bs.size());\n    for(int i=bs.nextSetBit(0); i>=0; i=bs.nextSetBit(i+1)) {\n      obs.fastSet(i);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader.getTopReaderContext());\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb5ac7cd9f1e1df32548027ca612af74fd3462c","date":1294451108,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader.getTopReaderContext());\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#convertFilter(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n  * Converts a filter into a DocSet.\n  * This method is not cache-aware and no caches are checked.\n  */\n  public DocSet convertFilter(Filter lfilter) throws IOException {\n    DocIdSet docSet = lfilter.getDocIdSet(this.reader);\n    OpenBitSet obs = new OpenBitSet();\n    DocIdSetIterator it = docSet.iterator();\n    int doc;\n    while((doc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      obs.fastSet(doc);\n    }\n    return new BitDocSet(obs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","9fb5ac7cd9f1e1df32548027ca612af74fd3462c"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9fb5ac7cd9f1e1df32548027ca612af74fd3462c":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","9fb5ac7cd9f1e1df32548027ca612af74fd3462c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb5ac7cd9f1e1df32548027ca612af74fd3462c"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["9fb5ac7cd9f1e1df32548027ca612af74fd3462c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"9fb5ac7cd9f1e1df32548027ca612af74fd3462c":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}