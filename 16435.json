{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","sourceNew":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments\n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","sourceOld":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments\n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","sourceNew":"  /** Improves readability of a score-sorted list of TextFragments by merging any fragments\n   * that were contiguous in the original text into one larger fragment with the correct order.\n   * This will leave a \"null\" in the array entry for the lesser scored fragment.\n   *\n   * @param frag An array of document fragments in descending score\n   */\n  private void mergeContiguousFragments(TextFragment[] frag)\n  {\n    boolean mergingStillBeingDone;\n    if (frag.length > 1)\n      do\n      {\n        mergingStillBeingDone = false; //initialise loop control flag\n        //for each fragment, scan other frags looking for contiguous blocks\n        for (int i = 0; i < frag.length; i++)\n        {\n          if (frag[i] == null)\n          {\n            continue;\n          }\n          //merge any contiguous blocks\n          for (int x = 0; x < frag.length; x++)\n          {\n            if (frag[x] == null)\n            {\n              continue;\n            }\n            if (frag[i] == null)\n            {\n              break;\n            }\n            TextFragment frag1 = null;\n            TextFragment frag2 = null;\n            int frag1Num = 0;\n            int frag2Num = 0;\n            int bestScoringFragNum;\n            int worstScoringFragNum;\n            //if blocks are contiguous....\n            if (frag[i].follows(frag[x]))\n            {\n              frag1 = frag[x];\n              frag1Num = x;\n              frag2 = frag[i];\n              frag2Num = i;\n            }\n            else\n              if (frag[x].follows(frag[i]))\n              {\n                frag1 = frag[i];\n                frag1Num = i;\n                frag2 = frag[x];\n                frag2Num = x;\n              }\n            //merging required..\n            if (frag1 != null)\n            {\n              if (frag1.getScore() > frag2.getScore())\n              {\n                bestScoringFragNum = frag1Num;\n                worstScoringFragNum = frag2Num;\n              }\n              else\n              {\n                bestScoringFragNum = frag2Num;\n                worstScoringFragNum = frag1Num;\n              }\n              frag1.merge(frag2);\n              frag[worstScoringFragNum] = null;\n              mergingStillBeingDone = true;\n              frag[bestScoringFragNum] = frag1;\n            }\n          }\n        }\n      }\n      while (mergingStillBeingDone);\n  }\n\n","sourceOld":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments\n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}