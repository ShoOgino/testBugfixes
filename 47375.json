{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":["34ca474b88b90218279fc4b893727bcefbb1f725","be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(SlowCompositeReaderWrapper.wrap(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(SlowCompositeReaderWrapper.wrap(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=true\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    \n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", r.document(i).getField(\"country\"));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(SlowCompositeReaderWrapper.wrap(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=true\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    \n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", r.document(i).getField(\"country\"));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(SlowCompositeReaderWrapper.wrap(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=true\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    \n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", r.document(i).getField(\"country\"));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    SortedDocValues idx = FieldCache.DEFAULT.getTermsIndex(SlowCompositeReaderWrapper.wrap(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertTrue(\"doc \" + i + \" has null country\", idx.getOrd(i) != -1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=ByteBuffersDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=true\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    \n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", r.document(i).getField(\"country\"));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=true\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    \n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", r.document(i).getField(\"country\"));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"d77dafd89756a5161d244985903e3487ca109182":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","93dd449115a9247533e44bab47e8429e5dccbc6d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d4d69c535930b5cce125cff868d40f6373dc27d4","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d77dafd89756a5161d244985903e3487ca109182","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}