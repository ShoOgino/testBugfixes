{"path":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}