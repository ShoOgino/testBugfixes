{"path":"src/java/org/apache/lucene/index/FieldsWriter#compress(byte[],int,int).mjava","commits":[{"id":"7d7203a8194ca217ec527231120df075e9bec237","date":1219055463,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsWriter#compress(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsWriter#compress(byte[]).mjava","sourceNew":"    private final byte[] compress (byte[] input, int offset, int length) {\n      // Create the compressor with highest level of compression\n      Deflater compressor = new Deflater();\n      compressor.setLevel(Deflater.BEST_COMPRESSION);\n\n      // Give the compressor the data to compress\n      compressor.setInput(input, offset, length);\n      compressor.finish();\n\n      /*\n       * Create an expandable byte array to hold the compressed data.\n       * You cannot use an array that's the same size as the orginal because\n       * there is no guarantee that the compressed data will be smaller than\n       * the uncompressed data.\n       */\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n      try {\n        compressor.setLevel(Deflater.BEST_COMPRESSION);\n\n        // Give the compressor the data to compress\n        compressor.setInput(input);\n        compressor.finish();\n\n        // Compress the data\n        byte[] buf = new byte[1024];\n        while (!compressor.finished()) {\n          int count = compressor.deflate(buf);\n          bos.write(buf, 0, count);\n        }\n\n      } finally {      \n        compressor.end();\n      }\n\n      // Get the compressed data\n      return bos.toByteArray();\n    }\n\n","sourceOld":"    private final byte[] compress (byte[] input) {\n\n      /*\n       * Create an expandable byte array to hold the compressed data.\n       * You cannot use an array that's the same size as the orginal because\n       * there is no guarantee that the compressed data will be smaller than\n       * the uncompressed data.\n       */\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n      // Create the compressor with highest level of compression\n      Deflater compressor = new Deflater();\n\n      try {\n        compressor.setLevel(Deflater.BEST_COMPRESSION);\n\n        // Give the compressor the data to compress\n        compressor.setInput(input);\n        compressor.finish();\n\n        // Compress the data\n        byte[] buf = new byte[1024];\n        while (!compressor.finished()) {\n          int count = compressor.deflate(buf);\n          bos.write(buf, 0, count);\n        }\n\n      } finally {      \n        compressor.end();\n      }\n\n      // Get the compressed data\n      return bos.toByteArray();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de01496176b31b9496ca92b2faebc31e16d91cc0","date":1237569222,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/FieldsWriter#compress(byte[],int,int).mjava","sourceNew":null,"sourceOld":"    private final byte[] compress (byte[] input, int offset, int length) {\n      // Create the compressor with highest level of compression\n      Deflater compressor = new Deflater();\n      compressor.setLevel(Deflater.BEST_COMPRESSION);\n\n      // Give the compressor the data to compress\n      compressor.setInput(input, offset, length);\n      compressor.finish();\n\n      /*\n       * Create an expandable byte array to hold the compressed data.\n       * You cannot use an array that's the same size as the orginal because\n       * there is no guarantee that the compressed data will be smaller than\n       * the uncompressed data.\n       */\n      ByteArrayOutputStream bos = new ByteArrayOutputStream(length);\n\n      try {\n        compressor.setLevel(Deflater.BEST_COMPRESSION);\n\n        // Give the compressor the data to compress\n        compressor.setInput(input);\n        compressor.finish();\n\n        // Compress the data\n        byte[] buf = new byte[1024];\n        while (!compressor.finished()) {\n          int count = compressor.deflate(buf);\n          bos.write(buf, 0, count);\n        }\n\n      } finally {      \n        compressor.end();\n      }\n\n      // Get the compressed data\n      return bos.toByteArray();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d7203a8194ca217ec527231120df075e9bec237":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de01496176b31b9496ca92b2faebc31e16d91cc0":["7d7203a8194ca217ec527231120df075e9bec237"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de01496176b31b9496ca92b2faebc31e16d91cc0"]},"commit2Childs":{"7d7203a8194ca217ec527231120df075e9bec237":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d7203a8194ca217ec527231120df075e9bec237"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}