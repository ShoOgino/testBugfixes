{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","commits":[{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws InvalidGeoException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidGeoException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidGeoException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidGeoException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws InvalidGeoException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidGeoException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidGeoException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidGeoException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws InvalidGeoException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidGeoException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidGeoException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidGeoException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws InvalidGeoException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidGeoException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidGeoException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidGeoException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parseLatitudeLongitude(double[],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * extract (by calling {@link #parsePoint(String[], String, int)} and validate the latitude and longitude contained\n   * in the String by making sure the latitude is between 90 & -90 and longitude is between -180 and 180.\n   * <p/>\n   * The latitude is assumed to be the first part of the string and the longitude the second part.\n   *\n   * @param latLon    A preallocated array to hold the result\n   * @param latLonStr The string to parse.  Latitude is the first value, longitude is the second.\n   * @return The lat long\n   * @throws InvalidGeoException if there was an error parsing\n   */\n  public static final double[] parseLatitudeLongitude(double[] latLon, String latLonStr) throws InvalidGeoException {\n    if (latLon == null) {\n      latLon = new double[2];\n    }\n    double[] toks = parsePointDouble(null, latLonStr, 2);\n\n    if (toks[0] < -90.0 || toks[0] > 90.0) {\n      throw new InvalidGeoException(\n              \"Invalid latitude: latitudes are range -90 to 90: provided lat: [\"\n                      + toks[0] + \"]\");\n    }\n    latLon[0] = toks[0];\n\n\n    if (toks[1] < -180.0 || toks[1] > 180.0) {\n\n      throw new InvalidGeoException(\n              \"Invalid longitude: longitudes are range -180 to 180: provided lon: [\"\n                      + toks[1] + \"]\");\n    }\n    latLon[1] = toks[1];\n\n    return latLon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459be89020f9023e3b60066066a892c7edb5de58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","459be89020f9023e3b60066066a892c7edb5de58"],"e47768b261c28e7e6032060e8331475c81057953":["459be89020f9023e3b60066066a892c7edb5de58","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["459be89020f9023e3b60066066a892c7edb5de58"]},"commit2Childs":{"459be89020f9023e3b60066066a892c7edb5de58":["5f4e87790277826a2aea119328600dfb07761f32","e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["459be89020f9023e3b60066066a892c7edb5de58","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}