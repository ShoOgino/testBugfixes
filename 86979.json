{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#restoreState(AutoScaling.Trigger).mjava","commits":[{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof SearchRateTrigger) {\n      SearchRateTrigger that = (SearchRateTrigger)old;\n      assert this.name.equals(that.name);\n      this.lastCollectionEvent.clear();\n      this.lastNodeEvent.clear();\n      this.lastShardEvent.clear();\n      this.lastReplicaEvent.clear();\n      this.lastCollectionEvent.putAll(that.lastCollectionEvent);\n      this.lastNodeEvent.putAll(that.lastNodeEvent);\n      this.lastShardEvent.putAll(that.lastShardEvent);\n      this.lastReplicaEvent.putAll(that.lastReplicaEvent);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2ba631afa835c2dfd14555cf19ae7e73663c17","date":1505762504,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#restoreState(AutoScaling.Trigger).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof SearchRateTrigger) {\n      SearchRateTrigger that = (SearchRateTrigger)old;\n      assert this.name.equals(that.name);\n      this.lastCollectionEvent.clear();\n      this.lastNodeEvent.clear();\n      this.lastShardEvent.clear();\n      this.lastReplicaEvent.clear();\n      this.lastCollectionEvent.putAll(that.lastCollectionEvent);\n      this.lastNodeEvent.putAll(that.lastNodeEvent);\n      this.lastShardEvent.putAll(that.lastShardEvent);\n      this.lastReplicaEvent.putAll(that.lastReplicaEvent);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof SearchRateTrigger) {\n      SearchRateTrigger that = (SearchRateTrigger)old;\n      assert this.name.equals(that.name);\n      this.lastCollectionEvent.clear();\n      this.lastNodeEvent.clear();\n      this.lastShardEvent.clear();\n      this.lastReplicaEvent.clear();\n      this.lastCollectionEvent.putAll(that.lastCollectionEvent);\n      this.lastNodeEvent.putAll(that.lastNodeEvent);\n      this.lastShardEvent.putAll(that.lastShardEvent);\n      this.lastReplicaEvent.putAll(that.lastReplicaEvent);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#restoreState(AutoScaling.Trigger).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof SearchRateTrigger) {\n      SearchRateTrigger that = (SearchRateTrigger)old;\n      assert this.name.equals(that.name);\n      this.lastCollectionEvent.clear();\n      this.lastNodeEvent.clear();\n      this.lastShardEvent.clear();\n      this.lastReplicaEvent.clear();\n      this.lastCollectionEvent.putAll(that.lastCollectionEvent);\n      this.lastNodeEvent.putAll(that.lastNodeEvent);\n      this.lastShardEvent.putAll(that.lastShardEvent);\n      this.lastReplicaEvent.putAll(that.lastReplicaEvent);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":["3955a9511098c96b652734b2f2d4160d07cc2d63"]},"commit2Childs":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["3f504512a03d978990cbff30db0522b354e846db"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3f354f2175f861ee625bb3c9572d53b77cd8545","3955a9511098c96b652734b2f2d4160d07cc2d63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4f2ba631afa835c2dfd14555cf19ae7e73663c17":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","4f2ba631afa835c2dfd14555cf19ae7e73663c17"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}