{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#compareGroupValue(String,GroupDocs[#]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#compareGroupValue(String,GroupDocs[#]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#compareGroupValue(String,GroupDocs[#]).mjava","sourceNew":"  private void compareGroupValue(String expected, GroupDocs<?> group) {\n    if (expected == null) {\n      if (group.groupValue == null) {\n        return;\n      } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n        return;\n      } else if (((BytesRef) group.groupValue).length == 0) {\n        return;\n      }\n      fail();\n    }\n\n    if (group.groupValue.getClass().isAssignableFrom(BytesRef.class)) {\n      assertEquals(new BytesRef(expected), group.groupValue);\n    } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n      MutableValueStr v = new MutableValueStr();\n      v.value = new BytesRef(expected);\n      assertEquals(v, group.groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","sourceOld":"  private void compareGroupValue(String expected, GroupDocs<?> group) {\n    if (expected == null) {\n      if (group.groupValue == null) {\n        return;\n      } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n        return;\n      } else if (((BytesRef) group.groupValue).length == 0) {\n        return;\n      }\n      fail();\n    }\n\n    if (group.groupValue.getClass().isAssignableFrom(BytesRef.class)) {\n      assertEquals(new BytesRef(expected), group.groupValue);\n    } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n      MutableValueStr v = new MutableValueStr();\n      v.value = new BytesRef(expected);\n      assertEquals(v, group.groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#compareGroupValue(String,GroupDocs[#]).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#compareGroupValue(String,GroupDocs[#]).mjava","sourceNew":"  private void compareGroupValue(String expected, GroupDocs<?> group) {\n    if (expected == null) {\n      if (group.groupValue == null) {\n        return;\n      } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n        return;\n      } else if (((BytesRef) group.groupValue).length == 0) {\n        return;\n      }\n      fail();\n    }\n\n    if (group.groupValue.getClass().isAssignableFrom(BytesRef.class)) {\n      assertEquals(new BytesRef(expected), group.groupValue);\n    } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n      MutableValueStr v = new MutableValueStr();\n      v.value.copyChars(expected);\n      assertEquals(v, group.groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","sourceOld":"  private void compareGroupValue(String expected, GroupDocs<?> group) {\n    if (expected == null) {\n      if (group.groupValue == null) {\n        return;\n      } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n        return;\n      } else if (((BytesRef) group.groupValue).length == 0) {\n        return;\n      }\n      fail();\n    }\n\n    if (group.groupValue.getClass().isAssignableFrom(BytesRef.class)) {\n      assertEquals(new BytesRef(expected), group.groupValue);\n    } else if (group.groupValue.getClass().isAssignableFrom(MutableValueStr.class)) {\n      MutableValueStr v = new MutableValueStr();\n      v.value = new BytesRef(expected);\n      assertEquals(v, group.groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","bugFix":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}