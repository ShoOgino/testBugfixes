{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    log.info(\"Shards giving the response: \" + Arrays.toString(shardAddresses.toArray()));\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray())); // logOK\n    }\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    log.info(\"Shards giving the response: \" + Arrays.toString(shardAddresses.toArray()));\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray()));\n    }\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray())); // logOK\n    }\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryWithShardsPreferenceRules(CloudHttp2SolrClient,boolean,String).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    @SuppressWarnings({\"unchecked\"})\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray()));\n    }\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private void queryWithShardsPreferenceRules(CloudHttp2SolrClient cloudClient,\n                                          boolean useShardsPreference,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    if (useShardsPreference) {\n      qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n    } else {\n      qParams.add(CommonParams.PREFER_LOCAL_SHARDS, \"true\");\n    }\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    // CloudSolrClient sends the request to some node.\n    // And since all the nodes are hosting cores from all shards, the\n    // distributed query formed by this node will select cores from the\n    // local shards only\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Shards giving the response: {}\", Arrays.toString(shardAddresses.toArray()));\n    }\n\n    // Make sure the distributed queries were directed to a single node only\n    Set<Integer> ports = new HashSet<Integer>();\n    for (String shardAddr: shardAddresses) {\n      URL url = new URL (shardAddr);\n      ports.add(url.getPort());\n    }\n\n    // This assertion would hold true as long as every shard has a core on each node\n    assertTrue (\"Response was not received from shards on a single node\",\n        shardAddresses.size() > 1 && ports.size()==1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}