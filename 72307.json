{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testPayloadSpanUtil().mjava","commits":[{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/payloads/TestPayloadSpanUtil#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(new ClassicSimilarity()));\n\n    Document doc = new Document();\n    doc.add(newTextField(FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n\n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}