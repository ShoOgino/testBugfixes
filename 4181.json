{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"/dev/null","sourceNew":"    /**TODO document this \n     * @return \n     * @throws IOException \n     */ \n    public  ReferenceCounter<StorageQuery> getStorageQuery() throws IOException { \n        synchronized (this.storageControllerLock) { \n \n        if(this.storageQuery == null){ \n            this.storageQuery = getNewStorageQueryHolder(new StorageQuery(this.currentBuffer,this.searcher)); \n            if(LOG.isInfoEnabled()) \n                LOG.info(\"Relese new StorageQuery\"); \n        } \n        this.storageQuery.increamentReference(); \n        return this.storageQuery; \n        } \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be arround as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n        synchronized (this.storageControllerLock) {\n\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Relese new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }\n    }\n\n","sourceOld":"    /**TODO document this \n     * @return \n     * @throws IOException \n     */ \n    public  ReferenceCounter<StorageQuery> getStorageQuery() throws IOException { \n        synchronized (this.storageControllerLock) { \n \n        if(this.storageQuery == null){ \n            this.storageQuery = getNewStorageQueryHolder(new StorageQuery(this.currentBuffer,this.searcher)); \n            if(LOG.isInfoEnabled()) \n                LOG.info(\"Relese new StorageQuery\"); \n        } \n        this.storageQuery.increamentReference(); \n        return this.storageQuery; \n        } \n    } \n\n","bugFix":null,"bugIntro":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be arround as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Relese new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n        \tthis.closeCondition.signalAll();\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be arround as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n        synchronized (this.storageControllerLock) {\n\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Relese new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }\n    }\n\n","bugFix":["52754a40a1550056d5637c8992b4076b5ed77328"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be arround as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Relese new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be arround as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Relese new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n        \tthis.closeCondition.signalAll();\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be arround as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Relese new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#getStorageQuery().mjava","sourceNew":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * returns a <tt>StorageQuery</tt> to query the storage index. The\n     * returned object is a reference counter to keep track of the references to\n     * the <tt>StorageQuery</tt>. The reference is already incremented before\n     * returned from this method.\n     * <p>\n     * if the reference counter has no remaining references the resource e.g.\n     * the <tt>StorageQuery</tt> will be closed. This ensures that a\n     * <tt>StorageQuery</tt> instance will be around as long as needed and\n     * the resources will be released. The reference counter should be\n     * decremented by clients after finished using the query instance.\n     * </p>\n     * \n     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a\n     *         resource.\n     * \n     */\n    protected ReferenceCounter<StorageQuery> getStorageQuery() {\n    \tif(this.isClosed.get())\n    \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n        this.storageControllerLock.lock();\n        try{\n        \tif(this.isClosed.get())\n        \t\tthrow new IllegalStateException(\"StorageController is already closed -- server is shutting down\");\n            if (this.storageQuery == null) {\n                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(\n                        this.currentBuffer, this.searcher));\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Release new StorageQuery\");\n            }\n            this.storageQuery.increamentReference();\n            return this.storageQuery;\n        }finally{\n            try{\n        \tthis.closeCondition.signalAll();\n            }catch (Throwable e) {/**/}\n        \tthis.storageControllerLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["52754a40a1550056d5637c8992b4076b5ed77328"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}