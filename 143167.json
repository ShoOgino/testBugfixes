{"path":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","commits":[{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["1509f151d7692d84fae414b2b799ac06ba60fcb4","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}