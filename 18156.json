{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.LongRangeBuilder#addRange(long,long,int).mjava","commits":[{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.LongRangeBuilder#addRange(long,long,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.LongRangeBuilder#addRange(long,long,int,int).mjava","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the raw long range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final long min, final long max, final int shift) {\n      addRange(longToPrefixCoded(min, shift), longToPrefixCoded(max, shift));\n    }\n\n","sourceOld":"    /**\n     * Overwrite this method, if you like to receive the raw long range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final long min, final long max, final int shift, final int level) {\n      /*System.out.println(Long.toHexString((min^0x8000000000000000L) >>> shift)+\"..\"+\n        Long.toHexString((max^0x8000000000000000L) >>> shift));*/\n      addRange(longToPrefixCoded(min, shift), longToPrefixCoded(max, shift), level);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.LongRangeBuilder#addRange(long,long,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Overwrite this method, if you like to receive the raw long range bounds.\n     * You can use this for e.g. debugging purposes (print out range bounds).\n     */\n    public void addRange(final long min, final long max, final int shift) {\n      addRange(longToPrefixCoded(min, shift), longToPrefixCoded(max, shift));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}