{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzRefill().mjava","commits":[{"id":"3a5582df130621a89a150891fa2fa492fdce73e0","date":1332126832,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzRefill().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Refills the input buffer.\r\n   *\r\n   * @return      <code>false</code>, iff there was new input.\r\n   * \r\n   * @exception   java.io.IOException  if any I/O-Error occurs\r\n   */\r\n  private boolean zzRefill() throws java.io.IOException {\r\n\r\n    /* first: make room (if you can) */\r\n    if (zzStartRead > 0) {\r\n      System.arraycopy(zzBuffer, zzStartRead,\r\n                       zzBuffer, 0,\r\n                       zzEndRead-zzStartRead);\r\n\r\n      /* translate stored positions */\r\n      zzEndRead-= zzStartRead;\r\n      zzCurrentPos-= zzStartRead;\r\n      zzMarkedPos-= zzStartRead;\r\n      zzStartRead = 0;\r\n    }\r\n\r\n    /* is the buffer big enough? */\r\n    if (zzCurrentPos >= zzBuffer.length) {\r\n      /* if not: blow it up */\r\n      char newBuffer[] = new char[zzCurrentPos*2];\r\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\r\n      zzBuffer = newBuffer;\r\n    }\r\n\r\n    /* finally: fill the buffer with new input */\r\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\r\n                                            zzBuffer.length-zzEndRead);\r\n\r\n    if (numRead > 0) {\r\n      zzEndRead+= numRead;\r\n      return false;\r\n    }\r\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \r\n    if (numRead == 0) {\r\n      int c = zzReader.read();\r\n      if (c == -1) {\r\n        return true;\r\n      } else {\r\n        zzBuffer[zzEndRead++] = (char) c;\r\n        return false;\r\n      }     \r\n    }\r\n\r\n\t// numRead < 0\r\n    return true;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzRefill().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","sourceOld":"  /**\r\n   * Refills the input buffer.\r\n   *\r\n   * @return      <code>false</code>, iff there was new input.\r\n   * \r\n   * @exception   java.io.IOException  if any I/O-Error occurs\r\n   */\r\n  private boolean zzRefill() throws java.io.IOException {\r\n\r\n    /* first: make room (if you can) */\r\n    if (zzStartRead > 0) {\r\n      System.arraycopy(zzBuffer, zzStartRead,\r\n                       zzBuffer, 0,\r\n                       zzEndRead-zzStartRead);\r\n\r\n      /* translate stored positions */\r\n      zzEndRead-= zzStartRead;\r\n      zzCurrentPos-= zzStartRead;\r\n      zzMarkedPos-= zzStartRead;\r\n      zzStartRead = 0;\r\n    }\r\n\r\n    /* is the buffer big enough? */\r\n    if (zzCurrentPos >= zzBuffer.length) {\r\n      /* if not: blow it up */\r\n      char newBuffer[] = new char[zzCurrentPos*2];\r\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\r\n      zzBuffer = newBuffer;\r\n    }\r\n\r\n    /* finally: fill the buffer with new input */\r\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\r\n                                            zzBuffer.length-zzEndRead);\r\n\r\n    if (numRead > 0) {\r\n      zzEndRead+= numRead;\r\n      return false;\r\n    }\r\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \r\n    if (numRead == 0) {\r\n      int c = zzReader.read();\r\n      if (c == -1) {\r\n        return true;\r\n      } else {\r\n        zzBuffer[zzEndRead++] = (char) c;\r\n        return false;\r\n      }     \r\n    }\r\n\r\n\t// numRead < 0\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzRefill().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"3a5582df130621a89a150891fa2fa492fdce73e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["3a5582df130621a89a150891fa2fa492fdce73e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a5582df130621a89a150891fa2fa492fdce73e0":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a5582df130621a89a150891fa2fa492fdce73e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}