{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sr/SerbianNormalizationRegularFilter#incrementToken().mjava","commits":[{"id":"c251aaecf3821db00286e52c5b3b0f25e2ea83e0","date":1447181142,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sr/SerbianNormalizationRegularFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char c = buffer[i];\n        switch(c) {\n        case 'а':\n          buffer[i] = 'a';\n          break;\n        case 'б':\n          buffer[i] = 'b';\n          break;\n        case 'в':\n          buffer[i] = 'v';\n          break;\n        case 'г':\n          buffer[i] = 'g';\n          break;\n        case 'д':\n          buffer[i] = 'd';\n          break;\n        case 'ђ':\n          buffer[i] = 'đ';\n          break;\n        case 'е':\n          buffer[i] = 'e';\n          break;\n        case 'ж':\n          buffer[i] = 'ž';\n          break;\n        case 'з':\n          buffer[i] = 'z';\n          break;\n        case 'и':\n          buffer[i] = 'i';\n          break;\n        case 'ј':\n          buffer[i] = 'j';\n          break;\n        case 'к':\n          buffer[i] = 'k';\n          break;\n        case 'л':\n          buffer[i] = 'l';\n          break;\n        case 'љ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'l';\n          buffer[++i] = 'j';\n          length++;\n          break;\n        case 'м':\n          buffer[i] = 'm';\n          break;\n        case 'н':\n          buffer[i] = 'n';\n          break;\n        case 'њ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'n';\n          buffer[++i] = 'j';\n          length++;\n          break;\n        case 'о':\n          buffer[i] = 'o';\n          break;\n        case 'п':\n          buffer[i] = 'p';\n          break;\n        case 'р':\n          buffer[i] = 'r';\n          break;\n        case 'с':\n          buffer[i] = 's';\n          break;\n        case 'т':\n          buffer[i] = 't';\n          break;\n        case 'ћ':\n          buffer[i] = 'ć';\n          break;\n        case 'у':\n          buffer[i] = 'u';\n          break;\n        case 'ф':\n          buffer[i] = 'f';\n          break;\n        case 'х':\n          buffer[i] = 'h';\n          break;\n        case 'ц':\n          buffer[i] = 'c';\n          break;\n        case 'ч':\n          buffer[i] = 'č';\n          break;\n        case 'џ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'd';\n          buffer[++i] = 'ž';\n          length++;\n          break;\n        case 'ш':\n          buffer[i] = 'š';\n          break;\n        default:\n          break;\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2e933afe6322b2a04dd69c90013f4208e2036e8","date":1447183137,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sr/SerbianNormalizationRegularFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char c = buffer[i];\n        switch(c) {\n        case 'а':\n          buffer[i] = 'a';\n          break;\n        case 'б':\n          buffer[i] = 'b';\n          break;\n        case 'в':\n          buffer[i] = 'v';\n          break;\n        case 'г':\n          buffer[i] = 'g';\n          break;\n        case 'д':\n          buffer[i] = 'd';\n          break;\n        case 'ђ':\n          buffer[i] = 'đ';\n          break;\n        case 'е':\n          buffer[i] = 'e';\n          break;\n        case 'ж':\n          buffer[i] = 'ž';\n          break;\n        case 'з':\n          buffer[i] = 'z';\n          break;\n        case 'и':\n          buffer[i] = 'i';\n          break;\n        case 'ј':\n          buffer[i] = 'j';\n          break;\n        case 'к':\n          buffer[i] = 'k';\n          break;\n        case 'л':\n          buffer[i] = 'l';\n          break;\n        case 'љ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'l';\n          buffer[++i] = 'j';\n          length++;\n          break;\n        case 'м':\n          buffer[i] = 'm';\n          break;\n        case 'н':\n          buffer[i] = 'n';\n          break;\n        case 'њ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'n';\n          buffer[++i] = 'j';\n          length++;\n          break;\n        case 'о':\n          buffer[i] = 'o';\n          break;\n        case 'п':\n          buffer[i] = 'p';\n          break;\n        case 'р':\n          buffer[i] = 'r';\n          break;\n        case 'с':\n          buffer[i] = 's';\n          break;\n        case 'т':\n          buffer[i] = 't';\n          break;\n        case 'ћ':\n          buffer[i] = 'ć';\n          break;\n        case 'у':\n          buffer[i] = 'u';\n          break;\n        case 'ф':\n          buffer[i] = 'f';\n          break;\n        case 'х':\n          buffer[i] = 'h';\n          break;\n        case 'ц':\n          buffer[i] = 'c';\n          break;\n        case 'ч':\n          buffer[i] = 'č';\n          break;\n        case 'џ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'd';\n          buffer[++i] = 'ž';\n          length++;\n          break;\n        case 'ш':\n          buffer[i] = 'š';\n          break;\n        default:\n          break;\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1632b4d5778907f39ce8f1aeca85916e8822afc8","date":1447184812,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/sr/SerbianNormalizationRegularFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        final char c = buffer[i];\n        switch(c) {\n        case 'а':\n          buffer[i] = 'a';\n          break;\n        case 'б':\n          buffer[i] = 'b';\n          break;\n        case 'в':\n          buffer[i] = 'v';\n          break;\n        case 'г':\n          buffer[i] = 'g';\n          break;\n        case 'д':\n          buffer[i] = 'd';\n          break;\n        case 'ђ':\n          buffer[i] = 'đ';\n          break;\n        case 'е':\n          buffer[i] = 'e';\n          break;\n        case 'ж':\n          buffer[i] = 'ž';\n          break;\n        case 'з':\n          buffer[i] = 'z';\n          break;\n        case 'и':\n          buffer[i] = 'i';\n          break;\n        case 'ј':\n          buffer[i] = 'j';\n          break;\n        case 'к':\n          buffer[i] = 'k';\n          break;\n        case 'л':\n          buffer[i] = 'l';\n          break;\n        case 'љ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'l';\n          buffer[++i] = 'j';\n          length++;\n          break;\n        case 'м':\n          buffer[i] = 'm';\n          break;\n        case 'н':\n          buffer[i] = 'n';\n          break;\n        case 'њ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'n';\n          buffer[++i] = 'j';\n          length++;\n          break;\n        case 'о':\n          buffer[i] = 'o';\n          break;\n        case 'п':\n          buffer[i] = 'p';\n          break;\n        case 'р':\n          buffer[i] = 'r';\n          break;\n        case 'с':\n          buffer[i] = 's';\n          break;\n        case 'т':\n          buffer[i] = 't';\n          break;\n        case 'ћ':\n          buffer[i] = 'ć';\n          break;\n        case 'у':\n          buffer[i] = 'u';\n          break;\n        case 'ф':\n          buffer[i] = 'f';\n          break;\n        case 'х':\n          buffer[i] = 'h';\n          break;\n        case 'ц':\n          buffer[i] = 'c';\n          break;\n        case 'ч':\n          buffer[i] = 'č';\n          break;\n        case 'џ':\n          buffer = termAtt.resizeBuffer(1+length);\n          if (i < length) {\n            System.arraycopy(buffer, i, buffer, i+1, (length-i));\n          }\n          buffer[i] = 'd';\n          buffer[++i] = 'ž';\n          length++;\n          break;\n        case 'ш':\n          buffer[i] = 'š';\n          break;\n        default:\n          break;\n        }\n      }\n      termAtt.setLength(length);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2e933afe6322b2a04dd69c90013f4208e2036e8":["c251aaecf3821db00286e52c5b3b0f25e2ea83e0"],"c251aaecf3821db00286e52c5b3b0f25e2ea83e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1632b4d5778907f39ce8f1aeca85916e8822afc8":["d2e933afe6322b2a04dd69c90013f4208e2036e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1632b4d5778907f39ce8f1aeca85916e8822afc8"]},"commit2Childs":{"d2e933afe6322b2a04dd69c90013f4208e2036e8":["1632b4d5778907f39ce8f1aeca85916e8822afc8"],"c251aaecf3821db00286e52c5b3b0f25e2ea83e0":["d2e933afe6322b2a04dd69c90013f4208e2036e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c251aaecf3821db00286e52c5b3b0f25e2ea83e0"],"1632b4d5778907f39ce8f1aeca85916e8822afc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}