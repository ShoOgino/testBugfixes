{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10));\n    s.search(q, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery(\"f\", \"b\", \"c\");\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10));\n    s.search(q, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10));\n    s.search(q, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery(\"f\", \"b\", \"c\");\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10, Integer.MAX_VALUE));\n    s.search(q, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery(\"f\", \"b\", \"c\");\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10));\n    s.search(q, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}