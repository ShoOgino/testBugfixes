{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddChildToChildFreeDoc().mjava","commits":[{"id":"aa4f44656c8081bbc63325a83abdb025eafd5a2b","date":1543200469,"type":0,"author":"Moshe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddChildToChildFreeDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddChildToChildFreeDoc() throws IOException, SolrServerException, IllegalArgumentException, IllegalAccessException, SecurityException, NoSuchFieldException {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n\n    SolrInputDocument docToUpdate = new SolrInputDocument();\n    docToUpdate.addField(\"id\", \"p0\");\n    docToUpdate.addField(\"title_s\", \"i am a child free doc\");\n    client.add(docToUpdate);\n    client.commit();\n\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.set( CommonParams.FL, \"id,title_s\" );\n    q.addSort(\"id\", SolrQuery.ORDER.desc);\n\n    SolrDocumentList results = client.query(q).getResults();\n    assertThat(results.getNumFound(), is(1L));\n    SolrDocument foundDoc = results.get(0);\n    assertThat(foundDoc.getFieldValue(\"title_s\"), is(\"i am a child free doc\"));\n\n    // Rewrite child free doc\n    docToUpdate.setField(\"title_s\", \"i am a parent\");\n\n    SolrInputDocument child = new SolrInputDocument();\n    child.addField(\"id\", \"c0\");\n    child.addField(\"title_s\", \"i am a child\");\n\n    docToUpdate.addChildDocument(child);\n\n    client.add(docToUpdate);\n    client.commit();\n\n    results = client.query(q).getResults();\n\n    assertThat(results.getNumFound(), is(2L));\n    foundDoc = results.get(0);\n    assertThat(foundDoc.getFieldValue(\"title_s\"), is(\"i am a parent\"));\n    foundDoc = results.get(1);\n    assertThat(foundDoc.getFieldValue(\"title_s\"), is(\"i am a child\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"]},"commit2Childs":{"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}