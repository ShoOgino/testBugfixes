{"path":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.reusableTokenStream(\"\", new StringReader(\"a b c d e f g h i j k l m n\"));\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.reusableTokenStream( \"\", new StringReader( v ) );\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        a1.tokenStream( \"\", new StringReader( \"a b c d e f g h i j k l m n\" ) ) );\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream( \"\", new StringReader( v ) );\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", new StringReader(\"a b c d e f g h i j k l m n\"));\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", new StringReader(v));\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.reusableTokenStream(\"\", new StringReader(\"a b c d e f g h i j k l m n\"));\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.reusableTokenStream( \"\", new StringReader( v ) );\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", new StringReader(\"a b c d e f g h i j k l m n\"));\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", new StringReader(v));\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", new StringReader(\"a b c d e f g h i j k l m n\"));\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", new StringReader(v));\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer();\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer();\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer();\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer();\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer();\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer();\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd19a665923f0acf59d3f056adfef60dbe7c1047","date":1419308867,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testOffsetWindowTokenFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testTermOffsetsTokenStream().mjava","sourceNew":"  @Test\n  public void testOffsetWindowTokenFilter() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer();\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n\n    OffsetWindowTokenFilter tots = new OffsetWindowTokenFilter(tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.advanceToNextWindowOfLength(v.length());\n      ts1.reset();\n      Analyzer a2 = new WhitespaceAnalyzer();\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermOffsetsTokenStream() throws Exception {\n    String[] multivalued = { \"a b c d\", \"e f g\", \"h\", \"i j k l m n\" };\n    Analyzer a1 = new WhitespaceAnalyzer();\n    TokenStream tokenStream = a1.tokenStream(\"\", \"a b c d e f g h i j k l m n\");\n    tokenStream.reset();\n\n    TermOffsetsTokenStream tots = new TermOffsetsTokenStream(\n        tokenStream);\n    for( String v : multivalued ){\n      TokenStream ts1 = tots.getMultiValuedTokenStream( v.length() );\n      Analyzer a2 = new WhitespaceAnalyzer();\n      TokenStream ts2 = a2.tokenStream(\"\", v);\n      ts2.reset();\n\n      while (ts1.incrementToken()) {\n        assertTrue(ts2.incrementToken());\n        assertEquals(ts1, ts2);\n      }\n      assertFalse(ts2.incrementToken());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["69e043c521d4e8db770cc140c63f5ef51f03426a","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bd19a665923f0acf59d3f056adfef60dbe7c1047":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"cf7efd82433f3f64684711c16edfd149db6af111":["c26f00b574427b55127e869b935845554afde1fa"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd19a665923f0acf59d3f056adfef60dbe7c1047"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c26f00b574427b55127e869b935845554afde1fa":["cf7efd82433f3f64684711c16edfd149db6af111"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ff4227bb146f97aabae888091c19e48c88dbb0db","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"bd19a665923f0acf59d3f056adfef60dbe7c1047":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["bd19a665923f0acf59d3f056adfef60dbe7c1047"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}