{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","commits":[{"id":"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","date":1399054058,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"/dev/null","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure its still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new NumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new NumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure its still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new NumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new LegacyNumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new NumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new CannedTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new LegacyNumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new CannedTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new LegacyNumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new CannedTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new LegacyNumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new CannedTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new LegacyNumericTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldReuse#testStringField().mjava","sourceNew":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts2);\n    assertTokenStreamContents(ts,\n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new CannedTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","sourceOld":"  public void testStringField() throws IOException {\n    StringField stringField = new StringField(\"foo\", \"bar\", Field.Store.NO);\n    \n    // passing null\n    TokenStream ts = stringField.tokenStream(null, null);\n    assertTokenStreamContents(ts, \n        new String[] { \"bar\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // now reuse previous stream\n    stringField = new StringField(\"foo\", \"baz\", Field.Store.NO);\n    TokenStream ts2 = stringField.tokenStream(null, ts);\n    assertSame(ts, ts);\n    assertTokenStreamContents(ts, \n        new String[] { \"baz\" },\n        new int[]    { 0 },\n        new int[]    { 3 }\n    );\n    \n    // pass a bogus stream and ensure it's still ok\n    stringField = new StringField(\"foo\", \"beer\", Field.Store.NO);\n    TokenStream bogus = new CannedTokenStream();\n    ts = stringField.tokenStream(null, bogus);\n    assertNotSame(ts, bogus);\n    assertTokenStreamContents(ts, \n        new String[] { \"beer\" },\n        new int[]    { 0 },\n        new int[]    { 4 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42210058b8ae092085fa2658880b69931512e8bf":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42210058b8ae092085fa2658880b69931512e8bf"]},"commit2Childs":{"42210058b8ae092085fa2658880b69931512e8bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["42210058b8ae092085fa2658880b69931512e8bf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}