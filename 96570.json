{"path":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","commits":[{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * TODO: parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * TODO: parallelize this one too\n   */\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(query, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3530bdb35df564c8916e1fa475608edb79a1191b","date":1114565957,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * TODO: parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      final MultiReaderHitCollector hc;\n      if (results instanceof MultiReaderHitCollector) {\n        // results can shift\n        final MultiReaderHitCollector resultsMulti = (MultiReaderHitCollector) results;\n        hc = new MultiReaderHitCollector() {\n            public void collect(int doc, float score) {\n              resultsMulti.collect(doc, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) throws IOException {\n              resultsMulti.setNextReader(reader, start+docBase);\n            }\n          };\n      } else {\n        // We must shift the docIDs\n        hc = new MultiReaderHitCollector() {\n            private int docBase;\n            public void collect(int doc, float score) {\n              results.collect(doc + docBase + start, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) {\n              this.docBase = docBase;\n            }\n          };\n      }\n      \n      searchables[i].search(weight, filter, hc);\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n          public void collect(int doc, float score) {\n            results.collect(doc + start, score);\n          }\n        });\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   * @deprecated use {@link #search(Weight, Filter, Collector)} instead.\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    search(weight, filter, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      final MultiReaderHitCollector hc;\n      if (results instanceof MultiReaderHitCollector) {\n        // results can shift\n        final MultiReaderHitCollector resultsMulti = (MultiReaderHitCollector) results;\n        hc = new MultiReaderHitCollector() {\n            public void collect(int doc, float score) {\n              resultsMulti.collect(doc, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) throws IOException {\n              resultsMulti.setNextReader(reader, start+docBase);\n            }\n          };\n      } else {\n        // We must shift the docIDs\n        hc = new MultiReaderHitCollector() {\n            private int docBase;\n            public void collect(int doc, float score) {\n              results.collect(doc + docBase + start, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) {\n              this.docBase = docBase;\n            }\n          };\n      }\n      \n      searchables[i].search(weight, filter, hc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param weight to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * \n   * @todo parallelize this one too\n   * @deprecated use {@link #search(Weight, Filter, Collector)} instead.\n   */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    search(weight, filter, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3530bdb35df564c8916e1fa475608edb79a1191b":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["3530bdb35df564c8916e1fa475608edb79a1191b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["3530bdb35df564c8916e1fa475608edb79a1191b"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"3530bdb35df564c8916e1fa475608edb79a1191b":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}