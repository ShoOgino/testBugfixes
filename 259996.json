{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#bleEndings().mjava","commits":[{"id":"f3517d617f8b4502b5cca1a57e228d54bda3dd0f","date":1307019502,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#bleEndings().mjava","pathOld":"/dev/null","sourceNew":"  /* handle -able and -ible */\n  private void bleEndings() {\n    int old_k = k;\n    char word_char;\n    \n    if (endsIn('b', 'l', 'e')) {\n      if (!((word.charAt(j) == 'a') || (word.charAt(j) == 'i'))) return;\n      word_char = word.charAt(j);\n      word.setLength(j); /* try just removing the ending */\n      k = j - 1;\n      if (lookup()) return;\n      if (doubleC(k)) { /* allow for a doubled consonant */\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        k++;\n        word.unsafeWrite(word.charAt(k - 1));\n      }\n      word.setLength(j);\n      word.unsafeWrite('e'); /* try removing -a/ible and adding -e */\n      k = j;\n      if (lookup()) return;\n      word.setLength(j);\n      word.append(\"ate\"); /* try removing -able and adding -ate */\n      /* (e.g., compensable/compensate) */\n      k = j + 2;\n      if (lookup()) return;\n      word.setLength(j);\n      word.unsafeWrite(word_char); /* restore the original values */\n      word.append(\"ble\");\n      k = old_k;\n      // nolookup()\n    }\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#bleEndings().mjava","pathOld":"/dev/null","sourceNew":"  /* handle -able and -ible */\n  private void bleEndings() {\n    int old_k = k;\n    char word_char;\n    \n    if (endsIn('b', 'l', 'e')) {\n      if (!((word.charAt(j) == 'a') || (word.charAt(j) == 'i'))) return;\n      word_char = word.charAt(j);\n      word.setLength(j); /* try just removing the ending */\n      k = j - 1;\n      if (lookup()) return;\n      if (doubleC(k)) { /* allow for a doubled consonant */\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        k++;\n        word.unsafeWrite(word.charAt(k - 1));\n      }\n      word.setLength(j);\n      word.unsafeWrite('e'); /* try removing -a/ible and adding -e */\n      k = j;\n      if (lookup()) return;\n      word.setLength(j);\n      word.append(\"ate\"); /* try removing -able and adding -ate */\n      /* (e.g., compensable/compensate) */\n      k = j + 2;\n      if (lookup()) return;\n      word.setLength(j);\n      word.unsafeWrite(word_char); /* restore the original values */\n      word.append(\"ble\");\n      k = old_k;\n      // nolookup()\n    }\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#bleEndings().mjava","pathOld":"/dev/null","sourceNew":"  /* handle -able and -ible */\n  private void bleEndings() {\n    int old_k = k;\n    char word_char;\n    \n    if (endsIn('b', 'l', 'e')) {\n      if (!((word.charAt(j) == 'a') || (word.charAt(j) == 'i'))) return;\n      word_char = word.charAt(j);\n      word.setLength(j); /* try just removing the ending */\n      k = j - 1;\n      if (lookup()) return;\n      if (doubleC(k)) { /* allow for a doubled consonant */\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        k++;\n        word.unsafeWrite(word.charAt(k - 1));\n      }\n      word.setLength(j);\n      word.unsafeWrite('e'); /* try removing -a/ible and adding -e */\n      k = j;\n      if (lookup()) return;\n      word.setLength(j);\n      word.append(\"ate\"); /* try removing -able and adding -ate */\n      /* (e.g., compensable/compensate) */\n      k = j + 2;\n      if (lookup()) return;\n      word.setLength(j);\n      word.unsafeWrite(word_char); /* restore the original values */\n      word.append(\"ble\");\n      k = old_k;\n      // nolookup()\n    }\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#bleEndings().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#bleEndings().mjava","sourceNew":"  /* handle -able and -ible */\n  private void bleEndings() {\n    int old_k = k;\n    char word_char;\n    \n    if (endsIn('b', 'l', 'e')) {\n      if (!((word.charAt(j) == 'a') || (word.charAt(j) == 'i'))) return;\n      word_char = word.charAt(j);\n      word.setLength(j); /* try just removing the ending */\n      k = j - 1;\n      if (lookup()) return;\n      if (doubleC(k)) { /* allow for a doubled consonant */\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        k++;\n        word.unsafeWrite(word.charAt(k - 1));\n      }\n      word.setLength(j);\n      word.unsafeWrite('e'); /* try removing -a/ible and adding -e */\n      k = j;\n      if (lookup()) return;\n      word.setLength(j);\n      word.append(\"ate\"); /* try removing -able and adding -ate */\n      /* (e.g., compensable/compensate) */\n      k = j + 2;\n      if (lookup()) return;\n      word.setLength(j);\n      word.unsafeWrite(word_char); /* restore the original values */\n      word.append(\"ble\");\n      k = old_k;\n      // nolookup()\n    }\n    return;\n  }\n\n","sourceOld":"  /* handle -able and -ible */\n  private void bleEndings() {\n    int old_k = k;\n    char word_char;\n    \n    if (endsIn('b', 'l', 'e')) {\n      if (!((word.charAt(j) == 'a') || (word.charAt(j) == 'i'))) return;\n      word_char = word.charAt(j);\n      word.setLength(j); /* try just removing the ending */\n      k = j - 1;\n      if (lookup()) return;\n      if (doubleC(k)) { /* allow for a doubled consonant */\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        k++;\n        word.unsafeWrite(word.charAt(k - 1));\n      }\n      word.setLength(j);\n      word.unsafeWrite('e'); /* try removing -a/ible and adding -e */\n      k = j;\n      if (lookup()) return;\n      word.setLength(j);\n      word.append(\"ate\"); /* try removing -able and adding -ate */\n      /* (e.g., compensable/compensate) */\n      k = j + 2;\n      if (lookup()) return;\n      word.setLength(j);\n      word.unsafeWrite(word_char); /* restore the original values */\n      word.append(\"ble\");\n      k = old_k;\n      // nolookup()\n    }\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}