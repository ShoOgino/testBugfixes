{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator();\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator();\n      rightEnum = rightTerms.iterator();\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator();\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator();\n      rightEnum = rightTerms.iterator();\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}