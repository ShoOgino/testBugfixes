{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","commits":[{"id":"cef13333102a2c287543f5141a0f24ccca005b2e","date":1201185584,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"/dev/null","sourceNew":"  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cef13333102a2c287543f5141a0f24ccca005b2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["cef13333102a2c287543f5141a0f24ccca005b2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"cef13333102a2c287543f5141a0f24ccca005b2e":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cef13333102a2c287543f5141a0f24ccca005b2e"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}