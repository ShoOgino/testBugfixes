{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#convexPolygonWithHoles(PlanetModel,Constraints).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#convexPolygonWithHoles(PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random generated a convex GeoPolygon with holes under given constraints. Returns\n   * NULL if it cannot build the GeoPolygon with holes under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPolygon.\n   */\n  private GeoPolygon convexPolygonWithHoles(PlanetModel planetModel, Constraints constraints) {\n    int vertexCount = random().nextInt(4) + 3;\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      List<GeoPoint> geoPoints = points(vertexCount,planetModel, constraints);\n      List<GeoPoint> orderedGeoPoints = orderPoints(geoPoints);\n      try {\n        GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, orderedGeoPoints);\n        //polygon should comply with all constraints except disjoint as we have holes\n        Constraints polygonConstraints = new Constraints();\n        polygonConstraints.putAll(constraints.getContains());\n        polygonConstraints.putAll(constraints.getWithin());\n        polygonConstraints.putAll(constraints.getDisjoint());\n        if (!polygonConstraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        //hole must overlap with polygon and comply with any CONTAINS constraint.\n        Constraints holeConstraints = new Constraints();\n        holeConstraints.putAll(constraints.getContains());\n        holeConstraints.put(polygon,GeoArea.OVERLAPS);\n        //Points must be with in the polygon and must comply\n        // CONTAINS and DISJOINT constraints\n        Constraints pointsConstraints = new Constraints();\n        pointsConstraints.put(polygon,GeoArea.WITHIN);\n        pointsConstraints.putAll(constraints.getContains());\n        pointsConstraints.putAll(constraints.getDisjoint());\n        List<GeoPolygon> holes = concavePolygonHoles(planetModel, holeConstraints, pointsConstraints);\n        //we should have at least one hole\n        if (holes.size() == 0){\n          continue;\n        }\n        polygon = GeoPolygonFactory.makeGeoPolygon(planetModel,orderedGeoPoints,holes);\n        if (!constraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        return polygon;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1fe6c223f93a8e9b72644987025e2057fdd99a76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#convexPolygonWithHoles(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#convexPolygonWithHoles(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated a convex GeoPolygon with holes under given constraints. Returns\n   * NULL if it cannot build the GeoPolygon with holes under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPolygon.\n   */\n  private GeoPolygon convexPolygonWithHoles(PlanetModel planetModel, Constraints constraints) {\n    int vertexCount = random().nextInt(4) + 3;\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      List<GeoPoint> geoPoints = points(vertexCount,planetModel, constraints);\n      List<GeoPoint> orderedGeoPoints = orderPoints(geoPoints);\n      try {\n        GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, orderedGeoPoints);\n        //polygon should comply with all constraints except disjoint as we have holes\n        Constraints polygonConstraints = new Constraints();\n        polygonConstraints.putAll(constraints.getContains());\n        polygonConstraints.putAll(constraints.getWithin());\n        polygonConstraints.putAll(constraints.getDisjoint());\n        if (!polygonConstraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        //hole must overlap with polygon and comply with any CONTAINS constraint.\n        Constraints holeConstraints = new Constraints();\n        holeConstraints.putAll(constraints.getContains());\n        holeConstraints.put(polygon,GeoArea.OVERLAPS);\n        //Points must be with in the polygon and must comply\n        // CONTAINS and DISJOINT constraints\n        Constraints pointsConstraints = new Constraints();\n        pointsConstraints.put(polygon,GeoArea.WITHIN);\n        pointsConstraints.putAll(constraints.getContains());\n        pointsConstraints.putAll(constraints.getDisjoint());\n        List<GeoPolygon> holes = concavePolygonHoles(planetModel, holeConstraints, pointsConstraints);\n        //we should have at least one hole\n        if (holes.size() == 0){\n          continue;\n        }\n        polygon = GeoPolygonFactory.makeGeoPolygon(planetModel,orderedGeoPoints,holes);\n        if (!constraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        return polygon;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated a convex GeoPolygon with holes under given constraints. Returns\n   * NULL if it cannot build the GeoPolygon with holes under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPolygon.\n   */\n  private GeoPolygon convexPolygonWithHoles(PlanetModel planetModel, Constraints constraints) {\n    int vertexCount = random().nextInt(4) + 3;\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      List<GeoPoint> geoPoints = points(vertexCount,planetModel, constraints);\n      List<GeoPoint> orderedGeoPoints = orderPoints(geoPoints);\n      try {\n        GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, orderedGeoPoints);\n        //polygon should comply with all constraints except disjoint as we have holes\n        Constraints polygonConstraints = new Constraints();\n        polygonConstraints.putAll(constraints.getContains());\n        polygonConstraints.putAll(constraints.getWithin());\n        polygonConstraints.putAll(constraints.getDisjoint());\n        if (!polygonConstraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        //hole must overlap with polygon and comply with any CONTAINS constraint.\n        Constraints holeConstraints = new Constraints();\n        holeConstraints.putAll(constraints.getContains());\n        holeConstraints.put(polygon,GeoArea.OVERLAPS);\n        //Points must be with in the polygon and must comply\n        // CONTAINS and DISJOINT constraints\n        Constraints pointsConstraints = new Constraints();\n        pointsConstraints.put(polygon,GeoArea.WITHIN);\n        pointsConstraints.putAll(constraints.getContains());\n        pointsConstraints.putAll(constraints.getDisjoint());\n        List<GeoPolygon> holes = concavePolygonHoles(planetModel, holeConstraints, pointsConstraints);\n        //we should have at least one hole\n        if (holes.size() == 0){\n          continue;\n        }\n        polygon = GeoPolygonFactory.makeGeoPolygon(planetModel,orderedGeoPoints,holes);\n        if (!constraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        return polygon;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fe6c223f93a8e9b72644987025e2057fdd99a76","date":1511522755,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#convexPolygonWithHoles(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#convexPolygonWithHoles(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated a convex GeoPolygon with holes under given constraints. Returns\n   * NULL if it cannot build the GeoPolygon with holes under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPolygon.\n   */\n  private GeoPolygon convexPolygonWithHoles(PlanetModel planetModel, Constraints constraints) {\n    int vertexCount = random().nextInt(4) + 3;\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      List<GeoPoint> geoPoints = points(vertexCount,planetModel, constraints);\n      if (geoPoints.size() < 3){\n        continue;\n      }\n      List<GeoPoint> orderedGeoPoints = orderPoints(geoPoints);\n      try {\n        GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, orderedGeoPoints);\n        //polygon should comply with all constraints except disjoint as we have holes\n        Constraints polygonConstraints = new Constraints();\n        polygonConstraints.putAll(constraints.getContains());\n        polygonConstraints.putAll(constraints.getWithin());\n        polygonConstraints.putAll(constraints.getDisjoint());\n        if (!polygonConstraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        //hole must overlap with polygon and comply with any CONTAINS constraint.\n        Constraints holeConstraints = new Constraints();\n        holeConstraints.putAll(constraints.getContains());\n        holeConstraints.put(polygon,GeoArea.OVERLAPS);\n        //Points must be with in the polygon and must comply\n        // CONTAINS and DISJOINT constraints\n        Constraints pointsConstraints = new Constraints();\n        pointsConstraints.put(polygon,GeoArea.WITHIN);\n        pointsConstraints.putAll(constraints.getContains());\n        pointsConstraints.putAll(constraints.getDisjoint());\n        List<GeoPolygon> holes = concavePolygonHoles(planetModel, polygon, holeConstraints, pointsConstraints);\n        //we should have at least one hole\n        if (holes.size() == 0){\n          continue;\n        }\n        polygon = GeoPolygonFactory.makeGeoPolygon(planetModel,orderedGeoPoints,holes);\n        if (!constraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        return polygon;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated a convex GeoPolygon with holes under given constraints. Returns\n   * NULL if it cannot build the GeoPolygon with holes under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPolygon.\n   */\n  private GeoPolygon convexPolygonWithHoles(PlanetModel planetModel, Constraints constraints) {\n    int vertexCount = random().nextInt(4) + 3;\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      List<GeoPoint> geoPoints = points(vertexCount,planetModel, constraints);\n      List<GeoPoint> orderedGeoPoints = orderPoints(geoPoints);\n      try {\n        GeoPolygon polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, orderedGeoPoints);\n        //polygon should comply with all constraints except disjoint as we have holes\n        Constraints polygonConstraints = new Constraints();\n        polygonConstraints.putAll(constraints.getContains());\n        polygonConstraints.putAll(constraints.getWithin());\n        polygonConstraints.putAll(constraints.getDisjoint());\n        if (!polygonConstraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        //hole must overlap with polygon and comply with any CONTAINS constraint.\n        Constraints holeConstraints = new Constraints();\n        holeConstraints.putAll(constraints.getContains());\n        holeConstraints.put(polygon,GeoArea.OVERLAPS);\n        //Points must be with in the polygon and must comply\n        // CONTAINS and DISJOINT constraints\n        Constraints pointsConstraints = new Constraints();\n        pointsConstraints.put(polygon,GeoArea.WITHIN);\n        pointsConstraints.putAll(constraints.getContains());\n        pointsConstraints.putAll(constraints.getDisjoint());\n        List<GeoPolygon> holes = concavePolygonHoles(planetModel, holeConstraints, pointsConstraints);\n        //we should have at least one hole\n        if (holes.size() == 0){\n          continue;\n        }\n        polygon = GeoPolygonFactory.makeGeoPolygon(planetModel,orderedGeoPoints,holes);\n        if (!constraints.valid(polygon) || isConcave(planetModel, polygon)){\n          continue;\n        }\n        return polygon;\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return null;\n  }\n\n","bugFix":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fe6c223f93a8e9b72644987025e2057fdd99a76":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fe6c223f93a8e9b72644987025e2057fdd99a76"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"1fe6c223f93a8e9b72644987025e2057fdd99a76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","1fe6c223f93a8e9b72644987025e2057fdd99a76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}