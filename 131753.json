{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4708e7bf7695781d702d204d178627b4faddc03f","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}