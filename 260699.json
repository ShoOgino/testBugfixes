{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testWhitespaceWithFolding().mjava","commits":[{"id":"150b2fdbce4a521aa43abb6402c9b878786e4bd6","date":1421245951,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testWhitespaceWithFolding().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhitespaceWithFolding() throws Exception {\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"asciifolding\", \"preserveOriginal\", \"true\")\n        .addTokenFilter(\"lowercase\")\n        .build();\n    \n    assertSame(WhitespaceTokenizerFactory.class, a.getTokenizerFactory().getClass());\n    assertEquals(Collections.emptyList(), a.getCharFilterFactories());\n    List<TokenFilterFactory> tokenFilters = a.getTokenFilterFactories();\n    assertEquals(2, tokenFilters.size());\n    assertSame(ASCIIFoldingFilterFactory.class, tokenFilters.get(0).getClass());\n    assertSame(LowerCaseFilterFactory.class, tokenFilters.get(1).getClass());\n    assertEquals(0, a.getPositionIncrementGap(\"dummy\"));\n    assertEquals(1, a.getOffsetGap(\"dummy\"));\n    assertSame(Version.LATEST, a.getVersion());\n\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n        new String[] { \"foo\", \"bar\", \"foo\", \"bar\" },\n        new int[]    { 1,     1,     1,     1});\n    assertAnalyzesTo(a, \"föó bär FÖÖ BAR\", \n        new String[] { \"foo\", \"föó\", \"bar\", \"bär\", \"foo\", \"föö\", \"bar\" },\n        new int[]    { 1,     0,     1,     0,     1,     0,     1});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testWhitespaceWithFolding().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testWhitespaceWithFolding().mjava","sourceNew":"  public void testWhitespaceWithFolding() throws Exception {\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"asciifolding\", \"preserveOriginal\", \"true\")\n        .addTokenFilter(\"lowercase\")\n        .build();\n    \n    assertSame(WhitespaceTokenizerFactory.class, a.getTokenizerFactory().getClass());\n    assertEquals(Collections.emptyList(), a.getCharFilterFactories());\n    List<TokenFilterFactory> tokenFilters = a.getTokenFilterFactories();\n    assertEquals(2, tokenFilters.size());\n    assertSame(ASCIIFoldingFilterFactory.class, tokenFilters.get(0).getClass());\n    assertSame(LowerCaseFilterFactory.class, tokenFilters.get(1).getClass());\n    assertEquals(0, a.getPositionIncrementGap(\"dummy\"));\n    assertEquals(1, a.getOffsetGap(\"dummy\"));\n    assertSame(Version.LATEST, a.getVersion());\n\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n        new String[] { \"foo\", \"bar\", \"foo\", \"bar\" },\n        new int[]    { 1,     1,     1,     1});\n    assertAnalyzesTo(a, \"föó bär FÖÖ BAR\", \n        new String[] { \"foo\", \"föó\", \"bar\", \"bär\", \"foo\", \"föö\", \"bar\" },\n        new int[]    { 1,     0,     1,     0,     1,     0,     1});\n    a.close();\n  }\n\n","sourceOld":"  public void testWhitespaceWithFolding() throws Exception {\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"asciifolding\", \"preserveOriginal\", \"true\")\n        .addTokenFilter(\"lowercase\")\n        .build();\n    \n    assertSame(WhitespaceTokenizerFactory.class, a.getTokenizerFactory().getClass());\n    assertEquals(Collections.emptyList(), a.getCharFilterFactories());\n    List<TokenFilterFactory> tokenFilters = a.getTokenFilterFactories();\n    assertEquals(2, tokenFilters.size());\n    assertSame(ASCIIFoldingFilterFactory.class, tokenFilters.get(0).getClass());\n    assertSame(LowerCaseFilterFactory.class, tokenFilters.get(1).getClass());\n    assertEquals(0, a.getPositionIncrementGap(\"dummy\"));\n    assertEquals(1, a.getOffsetGap(\"dummy\"));\n    assertSame(Version.LATEST, a.getVersion());\n\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n        new String[] { \"foo\", \"bar\", \"foo\", \"bar\" },\n        new int[]    { 1,     1,     1,     1});\n    assertAnalyzesTo(a, \"föó bär FÖÖ BAR\", \n        new String[] { \"foo\", \"föó\", \"bar\", \"bär\", \"foo\", \"föö\", \"bar\" },\n        new int[]    { 1,     0,     1,     0,     1,     0,     1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testWhitespaceWithFolding().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testWhitespaceWithFolding().mjava","sourceNew":"  public void testWhitespaceWithFolding() throws Exception {\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"asciifolding\", \"preserveOriginal\", \"true\")\n        .addTokenFilter(\"lowercase\")\n        .build();\n    \n    assertSame(WhitespaceTokenizerFactory.class, a.getTokenizerFactory().getClass());\n    assertEquals(Collections.emptyList(), a.getCharFilterFactories());\n    List<TokenFilterFactory> tokenFilters = a.getTokenFilterFactories();\n    assertEquals(2, tokenFilters.size());\n    assertSame(ASCIIFoldingFilterFactory.class, tokenFilters.get(0).getClass());\n    assertSame(LowerCaseFilterFactory.class, tokenFilters.get(1).getClass());\n    assertEquals(0, a.getPositionIncrementGap(\"dummy\"));\n    assertEquals(1, a.getOffsetGap(\"dummy\"));\n    assertSame(Version.LATEST, a.getVersion());\n\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n        new String[] { \"foo\", \"bar\", \"foo\", \"bar\" },\n        new int[]    { 1,     1,     1,     1});\n    assertAnalyzesTo(a, \"föó bär FÖÖ BAR\", \n        new String[] { \"foo\", \"föó\", \"bar\", \"bär\", \"foo\", \"föö\", \"bar\" },\n        new int[]    { 1,     0,     1,     0,     1,     0,     1});\n    a.close();\n  }\n\n","sourceOld":"  public void testWhitespaceWithFolding() throws Exception {\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"asciifolding\", \"preserveOriginal\", \"true\")\n        .addTokenFilter(\"lowercase\")\n        .build();\n    \n    assertSame(WhitespaceTokenizerFactory.class, a.getTokenizerFactory().getClass());\n    assertEquals(Collections.emptyList(), a.getCharFilterFactories());\n    List<TokenFilterFactory> tokenFilters = a.getTokenFilterFactories();\n    assertEquals(2, tokenFilters.size());\n    assertSame(ASCIIFoldingFilterFactory.class, tokenFilters.get(0).getClass());\n    assertSame(LowerCaseFilterFactory.class, tokenFilters.get(1).getClass());\n    assertEquals(0, a.getPositionIncrementGap(\"dummy\"));\n    assertEquals(1, a.getOffsetGap(\"dummy\"));\n    assertSame(Version.LATEST, a.getVersion());\n\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n        new String[] { \"foo\", \"bar\", \"foo\", \"bar\" },\n        new int[]    { 1,     1,     1,     1});\n    assertAnalyzesTo(a, \"föó bär FÖÖ BAR\", \n        new String[] { \"foo\", \"föó\", \"bar\", \"bär\", \"foo\", \"föö\", \"bar\" },\n        new int[]    { 1,     0,     1,     0,     1,     0,     1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["150b2fdbce4a521aa43abb6402c9b878786e4bd6","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"150b2fdbce4a521aa43abb6402c9b878786e4bd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["150b2fdbce4a521aa43abb6402c9b878786e4bd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["150b2fdbce4a521aa43abb6402c9b878786e4bd6"],"150b2fdbce4a521aa43abb6402c9b878786e4bd6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}