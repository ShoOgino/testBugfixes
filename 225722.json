{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter#nextIterationMarkSpanSize().mjava","commits":[{"id":"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2","date":1341920769,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter#nextIterationMarkSpanSize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds the number of subsequent next iteration marks\n   *\n   * @return number of iteration marks starting at the current buffer position\n   * @throws IOException\n   */\n  private int nextIterationMarkSpanSize() throws IOException {\n    int spanSize = 0;\n    for (int i = bufferPosition; buffer.get(i) != -1 && isIterationMark((char) (buffer.get(i))); i++) {\n      spanSize++;\n    }\n    // Restrict span size so that we don't go past the previous end position\n    if (bufferPosition - spanSize < iterationMarkSpanEndPosition) {\n      spanSize = bufferPosition - iterationMarkSpanEndPosition;\n    }\n    return spanSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter#nextIterationMarkSpanSize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds the number of subsequent next iteration marks\n   *\n   * @return number of iteration marks starting at the current buffer position\n   * @throws IOException\n   */\n  private int nextIterationMarkSpanSize() throws IOException {\n    int spanSize = 0;\n    for (int i = bufferPosition; buffer.get(i) != -1 && isIterationMark((char) (buffer.get(i))); i++) {\n      spanSize++;\n    }\n    // Restrict span size so that we don't go past the previous end position\n    if (bufferPosition - spanSize < iterationMarkSpanEndPosition) {\n      spanSize = bufferPosition - iterationMarkSpanEndPosition;\n    }\n    return spanSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter#nextIterationMarkSpanSize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds the number of subsequent next iteration marks\n   *\n   * @return number of iteration marks starting at the current buffer position\n   * @throws IOException\n   */\n  private int nextIterationMarkSpanSize() throws IOException {\n    int spanSize = 0;\n    for (int i = bufferPosition; buffer.get(i) != -1 && isIterationMark((char) (buffer.get(i))); i++) {\n      spanSize++;\n    }\n    // Restrict span size so that we don't go past the previous end position\n    if (bufferPosition - spanSize < iterationMarkSpanEndPosition) {\n      spanSize = bufferPosition - iterationMarkSpanEndPosition;\n    }\n    return spanSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter#nextIterationMarkSpanSize().mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter#nextIterationMarkSpanSize().mjava","sourceNew":"  /**\n   * Finds the number of subsequent next iteration marks\n   *\n   * @return number of iteration marks starting at the current buffer position\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private int nextIterationMarkSpanSize() throws IOException {\n    int spanSize = 0;\n    for (int i = bufferPosition; buffer.get(i) != -1 && isIterationMark((char) (buffer.get(i))); i++) {\n      spanSize++;\n    }\n    // Restrict span size so that we don't go past the previous end position\n    if (bufferPosition - spanSize < iterationMarkSpanEndPosition) {\n      spanSize = bufferPosition - iterationMarkSpanEndPosition;\n    }\n    return spanSize;\n  }\n\n","sourceOld":"  /**\n   * Finds the number of subsequent next iteration marks\n   *\n   * @return number of iteration marks starting at the current buffer position\n   * @throws IOException\n   */\n  private int nextIterationMarkSpanSize() throws IOException {\n    int spanSize = 0;\n    for (int i = bufferPosition; buffer.get(i) != -1 && isIterationMark((char) (buffer.get(i))); i++) {\n      spanSize++;\n    }\n    // Restrict span size so that we don't go past the previous end position\n    if (bufferPosition - spanSize < iterationMarkSpanEndPosition) {\n      spanSize = bufferPosition - iterationMarkSpanEndPosition;\n    }\n    return spanSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}