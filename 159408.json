{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62dce719f7b1e83e0b4020f146a516e5cf618884","date":1286643323,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa380b0ac7fa6c578259afbb8eaa19927570010d","date":1333998347,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        // nocommit is this right!?  i'm just guessing...\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":["bce5c9637fdd284e5990e2e810bc9faafa336bc5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4089655a6be488550b10938a51b3d8649f7e2564","date":1334000716,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        // nocommit is this right!?  i'm just guessing...\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"62dce719f7b1e83e0b4020f146a516e5cf618884":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["62dce719f7b1e83e0b4020f146a516e5cf618884","4089655a6be488550b10938a51b3d8649f7e2564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4089655a6be488550b10938a51b3d8649f7e2564":["aa380b0ac7fa6c578259afbb8eaa19927570010d"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","62dce719f7b1e83e0b4020f146a516e5cf618884"],"aa380b0ac7fa6c578259afbb8eaa19927570010d":["62dce719f7b1e83e0b4020f146a516e5cf618884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62dce719f7b1e83e0b4020f146a516e5cf618884":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","aa380b0ac7fa6c578259afbb8eaa19927570010d"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4089655a6be488550b10938a51b3d8649f7e2564":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["62dce719f7b1e83e0b4020f146a516e5cf618884","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"aa380b0ac7fa6c578259afbb8eaa19927570010d":["4089655a6be488550b10938a51b3d8649f7e2564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}