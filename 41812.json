{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","commits":[{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","date":1412358952,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(this.context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, this.context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(this.context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, this.context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","sourceNew":null,"sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(this.context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, this.context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["989d940c4bf402188f4f0ae13736836885227383"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}