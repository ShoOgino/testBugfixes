{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      if (isConf) {\n        //set cf instead of file for config file\n        params.set(CONF_FILE_SHORT, fileName);\n      } else {\n        params.set(FILE, fileName);\n      }\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c","date":1442604740,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternal) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternal) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(60000);\n        client.setConnectionTimeout(15000);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient, null)) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, \"/replication\");\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .withConnectionTimeout(connTimeout)\n          .withSocketTimeout(soTimeout)\n          .build()) {\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .withConnectionTimeout(connTimeout)\n          .withSocketTimeout(soTimeout)\n          .build()) {\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .build()) {\n        client.setSoTimeout(soTimeout);\n        client.setConnectionTimeout(connTimeout);\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .withConnectionTimeout(connTimeout)\n          .withSocketTimeout(soTimeout)\n          .build()) {\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .withConnectionTimeout(connTimeout)\n          .withSocketTimeout(soTimeout)\n          .build()) {\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(leaderUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .withConnectionTimeout(connTimeout)\n          .withSocketTimeout(soTimeout)\n          .build()) {\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    private FastInputStream getStream() throws IOException {\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n//    //the method is command=filecontent\n      params.set(COMMAND, CMD_GET_FILE);\n      params.set(GENERATION, Long.toString(indexGen));\n      params.set(CommonParams.QT, ReplicationHandler.PATH);\n      //add the version to download. This is used to reserve the download\n      params.set(solrParamOutput, fileName);\n      if (useInternalCompression) {\n        params.set(COMPRESSION, \"true\");\n      }\n      //use checksum\n      if (this.includeChecksum) {\n        params.set(CHECKSUM, true);\n      }\n      //wt=filestream this is a custom protocol\n      params.set(CommonParams.WT, FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        params.set(OFFSET, Long.toString(bytesDownloaded));\n      }\n\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response;\n      InputStream is = null;\n\n      // TODO use shardhandler\n      try (HttpSolrClient client = new Builder(masterUrl)\n          .withHttpClient(myHttpClient)\n          .withResponseParser(null)\n          .withConnectionTimeout(connTimeout)\n          .withSocketTimeout(soTimeout)\n          .build()) {\n        QueryRequest req = new QueryRequest(params);\n        response = client.request(req);\n        is = (InputStream) response.get(\"stream\");\n        if(useInternalCompression) {\n          is = new InflaterInputStream(is);\n        }\n        return new FastInputStream(is);\n      } catch (Exception e) {\n        //close stream on error\n        org.apache.commons.io.IOUtils.closeQuietly(is);\n        throw new IOException(\"Could not download file '\" + fileName + \"'\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"43d1e498704edd2bba13548a189eed4dfccff11b":["ad28156288ac00b91352582904d97e6653205757"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"859081acf00749f5dd462772c571d611d4a4d2db":["1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["ad28156288ac00b91352582904d97e6653205757","43d1e498704edd2bba13548a189eed4dfccff11b"],"1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"1fcfe48dbe89ecd0d0b76f5933dc7f962e10554c":["859081acf00749f5dd462772c571d611d4a4d2db"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["ad28156288ac00b91352582904d97e6653205757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}