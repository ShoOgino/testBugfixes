{"path":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","commits":[{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","pathOld":"/dev/null","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","pathOld":"/dev/null","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (ZkStateReader.ACTIVE.equals(r.getStr(ZkStateReader.STATE_PROP))) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["a219f1dcad1700e84807666bdbd2b573e8de7021","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}