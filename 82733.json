{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":null,"sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}