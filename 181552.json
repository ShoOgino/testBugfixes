{"path":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","commits":[{"id":"7ecad62a91d16f94e09186098207ad6865137c58","date":1174933286,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handlers must be initalized before calling this function.  As soon as this is\n   * called, the handler can immediatly accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    if( handler == null ) {\n      return handlers.remove( handlerName );\n    }\n    SolrRequestHandler old = handlers.put(handlerName, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        SolrInfoRegistry.getRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ba3156f496141978807efa860e41dbc1005c040","date":1177655553,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initalized before calling this function.  As soon as this is\n   * called, the handler can immediatly accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        SolrInfoRegistry.getRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initalized before calling this function.  As soon as this is\n   * called, the handler can immediatly accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    if( handler == null ) {\n      return handlers.remove( handlerName );\n    }\n    SolrRequestHandler old = handlers.put(handlerName, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        SolrInfoRegistry.getRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4cc0532e82274748c1910318b92089c5604e48a","date":1183443010,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        SolrInfoRegistry.getRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initalized before calling this function.  As soon as this is\n   * called, the handler can immediatly accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        SolrInfoRegistry.getRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        core.getInfoRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        SolrInfoRegistry.getRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f84bbba5f51b88ff0d565e8c37f35dc8fe564d93","date":1229519447,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        core.getInfoRegistry().put(handlerName, handler);\n      }\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        core.getInfoRegistry().put(handlerName, (SolrInfoMBean)handler);\n      }\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dbb193e1674e022fe0f7df04a444307bff223b7","date":1229519560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    if(handlerName == null) return null;\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        core.getInfoRegistry().put(handlerName, handler);\n      }\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        core.getInfoRegistry().put(handlerName, handler);\n      }\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c3d139498ad7782493f3d97626ffc4ecd7dcaa1","date":1229667177,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    if(handlerName == null) return null;\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (handlerName != null && handlerName != \"\") {\n      if (handler instanceof SolrInfoMBean) {\n        core.getInfoRegistry().put(handlerName, handler);\n      }\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["a4cc0532e82274748c1910318b92089c5604e48a"],"a4cc0532e82274748c1910318b92089c5604e48a":["2ba3156f496141978807efa860e41dbc1005c040"],"2ba3156f496141978807efa860e41dbc1005c040":["7ecad62a91d16f94e09186098207ad6865137c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9c3d139498ad7782493f3d97626ffc4ecd7dcaa1":["2dbb193e1674e022fe0f7df04a444307bff223b7"],"ad94625fb8d088209f46650c8097196fec67f00c":["9c3d139498ad7782493f3d97626ffc4ecd7dcaa1"],"7ecad62a91d16f94e09186098207ad6865137c58":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2dbb193e1674e022fe0f7df04a444307bff223b7":["f84bbba5f51b88ff0d565e8c37f35dc8fe564d93"],"f84bbba5f51b88ff0d565e8c37f35dc8fe564d93":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["f84bbba5f51b88ff0d565e8c37f35dc8fe564d93"],"a4cc0532e82274748c1910318b92089c5604e48a":["6d6338c87060be5f66757a94945975f3bbd377a9"],"2ba3156f496141978807efa860e41dbc1005c040":["a4cc0532e82274748c1910318b92089c5604e48a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7ecad62a91d16f94e09186098207ad6865137c58"],"9c3d139498ad7782493f3d97626ffc4ecd7dcaa1":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7ecad62a91d16f94e09186098207ad6865137c58":["2ba3156f496141978807efa860e41dbc1005c040"],"2dbb193e1674e022fe0f7df04a444307bff223b7":["9c3d139498ad7782493f3d97626ffc4ecd7dcaa1"],"f84bbba5f51b88ff0d565e8c37f35dc8fe564d93":["2dbb193e1674e022fe0f7df04a444307bff223b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}