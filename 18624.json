{"path":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"0ee777f940c2d15973e2ef162012a94e09648ffa","date":1249272382,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}