{"path":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testUseDocValuesAsStored().mjava","commits":[{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testUseDocValuesAsStored().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test how various permutations of useDocValuesAsStored and maxCharsForDocValues interact\n   */\n  public void testUseDocValuesAsStored() throws Exception {\n    ignoreException(\"when useDocValuesAsStored=true \\\\(length=\");\n    \n    // first things first...\n    // unlike most field types, SortableTextField should default to useDocValuesAsStored==false\n    // (check a handful that should have the default behavior)\n    for (String n : Arrays.asList(\"keyword_stxt\", \"whitespace_max0_stxt\", \"whitespace_max6_stxt\")) {\n      {\n        FieldType ft = h.getCore().getLatestSchema().getFieldTypeByName(n);\n        assertEquals(\"type \" + ft.getTypeName() + \" should not default to useDocValuesAsStored\",\n                     false, ft.useDocValuesAsStored()) ;\n      }\n      {\n        SchemaField sf = h.getCore().getLatestSchema().getField(n);\n        assertEquals(\"field \" + sf.getName() + \" should not default to useDocValuesAsStored\",\n                     false, sf.useDocValuesAsStored()) ;\n      }\n    }\n    \n    // but it should be possible to set useDocValuesAsStored=true explicitly on types...\n    int num_types_found = 0;\n    for (Map.Entry<String,FieldType> entry : h.getCore().getLatestSchema().getFieldTypes().entrySet()) {\n      if (entry.getKey().endsWith(\"_has_usedvs\")) {\n        num_types_found++;\n        FieldType ft = entry.getValue();\n        assertEquals(\"type \" + ft.getTypeName() + \" has unexpected useDocValuesAsStored value\",\n                     true, ft.useDocValuesAsStored()) ;\n      }\n    }\n    assertEquals(\"sanity check: wrong number of *_has_usedvs types found -- schema changed?\",\n                 2, num_types_found);\n\n    \n    // ...and it should be possible to set/override useDocValuesAsStored=true on fields...\n    int num_fields_found = 0;\n    List<String> xpaths = new ArrayList<>(42);\n    for (Map.Entry<String,SchemaField> entry : h.getCore().getLatestSchema().getFields().entrySet()) {\n      if (entry.getKey().endsWith(\"_usedvs\")) {\n        num_fields_found++;\n        final SchemaField sf = entry.getValue();\n        final String name = sf.getName();\n        \n        // some sanity check before we move on with the rest of our testing...\n        assertFalse(\"schema change? field should not be stored=true: \" + name, sf.stored());\n        final boolean usedvs = name.endsWith(\"_has_usedvs\");\n        assertTrue(\"schema change broke assumptions: field must be '*_has_usedvs' or '*_negates_usedvs': \" +\n                   name, usedvs ^ name.endsWith(\"_negates_usedvs\"));\n        final boolean max6 = name.startsWith(\"max6_\");\n        assertTrue(\"schema change broke assumptions: field must be 'max6_*' or 'max0_*': \" +\n                   name, max6 ^ name.startsWith(\"max0_\"));\n        \n        assertEquals(\"Unexpected useDocValuesAsStored value for field: \" + name,\n                     usedvs, sf.useDocValuesAsStored()) ;\n        \n        final String docid = \"\"+num_fields_found;\n        if (usedvs && max6) {\n          // if useDocValuesAsStored==true and maxCharsForDocValues=N then longer values should fail\n          \n          final String doc = adoc(\"id\", docid, name, \"apple pear orange\");\n          SolrException ex = expectThrows(SolrException.class, () -> { assertU(doc); });\n          for (String expect : Arrays.asList(\"field \" + name,\n                                             \"length=17\",\n                                             \"useDocValuesAsStored=true\",\n                                             \"maxCharsForDocValues=6\")) {\n            assertTrue(\"exception must mention \" + expect + \": \" + ex.getMessage(),\n                       ex.getMessage().contains(expect));\n          }\n        } else {\n          // otherwise (useDocValuesAsStored==false *OR* maxCharsForDocValues=0) any value\n          // should be fine when adding a doc and we should be able to search for it later...\n          final String val = docid + \" apple pear orange \" + BIG_CONST;\n          assertU(adoc(\"id\", docid, name, val));\n          String doc_xpath = \"//result/doc[str[@name='id'][.='\"+docid+\"']]\";\n            \n          if (usedvs) {\n            // ...and if it *does* usedvs, then we should defnitely see our value when searching...\n            doc_xpath = doc_xpath + \"[str[@name='\"+name+\"'][.='\"+val+\"']]\";\n          } else {\n            // ...but if not, then we should definitely not see any value for our field...\n            doc_xpath = doc_xpath + \"[not(str[@name='\"+name+\"'])]\";\n          }\n          xpaths.add(doc_xpath);\n        }\n      }\n    }\n    assertEquals(\"sanity check: wrong number of *_usedvs fields found -- schema changed?\",\n                 6, num_fields_found);\n    \n    // check all our expected docs can be found (with the expected values)\n    assertU(commit());\n    xpaths.add(\"//*[@numFound='\"+xpaths.size()+\"']\");\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"*\"), xpaths.toArray(new String[xpaths.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09db84b25dda87b73022d145a68f14c86a3a552d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09db84b25dda87b73022d145a68f14c86a3a552d"]},"commit2Childs":{"09db84b25dda87b73022d145a68f14c86a3a552d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09db84b25dda87b73022d145a68f14c86a3a552d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}