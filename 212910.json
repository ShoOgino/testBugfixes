{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) {\n      result = compareWithTolerance((Double) o1, (Double) o2, useApprox ? 1 : 1);\n    } else if (!o1.getClass().getName().equals(o2.getClass().getName())) {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ?\n        (next == null ? 0 :\n            next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34dd1818ff2313f17cf59834695ab7ee0c7853d7","date":1527089210,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) {\n      result = compareWithTolerance((Double) o1, (Double) o2, useApprox ? 1 : 1);\n    } else if (!o1.getClass().getName().equals(o2.getClass().getName())) {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ?\n        (next == null ? 0 :\n            next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) {\n      result = compareWithTolerance((Double) o1, (Double) o2, useApprox ? 1 : 1);\n    } else if (!o1.getClass().getName().equals(o2.getClass().getName())) {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ?\n        (next == null ? 0 :\n            next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) {\n      result = compareWithTolerance((Double) o1, (Double) o2, useApprox ? 1f : 0.01f);\n    } else if (!o1.getClass().getName().equals(o2.getClass().getName())) {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ?\n        (next == null ? 0 :\n            next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) {\n      result = compareWithTolerance((Double) o1, (Double) o2, useApprox ? 1 : 1);\n    } else if (!o1.getClass().getName().equals(o2.getClass().getName())) {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ?\n        (next == null ? 0 :\n            next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":null,"sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) {\n      result = compareWithTolerance((Double) o1, (Double) o2, useApprox ? 1f : 0.01f);\n    } else if (!o1.getClass().getName().equals(o2.getClass().getName())) {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ?\n        (next == null ? 0 :\n            next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"34dd1818ff2313f17cf59834695ab7ee0c7853d7":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["3f504512a03d978990cbff30db0522b354e846db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"34dd1818ff2313f17cf59834695ab7ee0c7853d7":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}