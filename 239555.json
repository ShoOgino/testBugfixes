{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(GeneralField).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(GeneralField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(GeneralField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(IndexableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(GeneralField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(GeneralField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7e4907084808af8fdb14b9809e6dceaccf6867b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["409324b31a1419d7c05a38211168cf317e39be77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["409324b31a1419d7c05a38211168cf317e39be77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}