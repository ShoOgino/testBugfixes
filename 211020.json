{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","commits":[{"id":"a1d7886f5b663e876f02df6f9d56b2f5528c4ea1","date":1229762709,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n    \n    long t0 = System.currentTimeMillis();\n    Benchmark benchmark = execBenchmark(algLines);\n    long t1 = System.currentTimeMillis();\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = t1-t0;\n    assertTrue(elapsed > 1500 && elapsed < 2000);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"797515f0b99c8847588fedb2e3e62b39feca9a94","date":1229857648,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","sourceNew":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    Benchmark benchmark = execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.lastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed < 2000);\n  }\n\n","sourceOld":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n    \n    long t0 = System.currentTimeMillis();\n    Benchmark benchmark = execBenchmark(algLines);\n    long t1 = System.currentTimeMillis();\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = t1-t0;\n    assertTrue(elapsed > 1500 && elapsed < 2000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a05cb0d93ffab2f3bfbfada7746896b373ed38d","date":1241087576,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","sourceNew":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    Benchmark benchmark = execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","sourceOld":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    Benchmark benchmark = execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.lastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed < 2000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","sourceNew":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","sourceOld":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    Benchmark benchmark = execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","sourceNew":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"log.step=100000\",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : .5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","sourceOld":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 1.5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testTimedSearchTask().mjava","sourceNew":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"log.step=100000\",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : .5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","sourceOld":"  /**\n   * Test timed sequence task.\n   */\n  public void testTimedSearchTask() throws Exception {\n    String algLines[] = {\n        \"log.step=100000\",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : .5s\",\n        \"CloseReader\",\n    };\n\n    CountingSearchTestTask.numSearches = 0;\n    execBenchmark(algLines);\n    assertTrue(CountingSearchTestTask.numSearches > 0);\n    long elapsed = CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;\n    assertTrue(\"elapsed time was \" + elapsed + \" msec\", elapsed <= 1500);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"797515f0b99c8847588fedb2e3e62b39feca9a94":["a1d7886f5b663e876f02df6f9d56b2f5528c4ea1"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["6a05cb0d93ffab2f3bfbfada7746896b373ed38d"],"a1d7886f5b663e876f02df6f9d56b2f5528c4ea1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a05cb0d93ffab2f3bfbfada7746896b373ed38d":["797515f0b99c8847588fedb2e3e62b39feca9a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"797515f0b99c8847588fedb2e3e62b39feca9a94":["6a05cb0d93ffab2f3bfbfada7746896b373ed38d"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"a1d7886f5b663e876f02df6f9d56b2f5528c4ea1":["797515f0b99c8847588fedb2e3e62b39feca9a94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1d7886f5b663e876f02df6f9d56b2f5528c4ea1"],"6a05cb0d93ffab2f3bfbfada7746896b373ed38d":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}