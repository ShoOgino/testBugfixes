{"path":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","sourceNew":null,"sourceOld":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","sourceNew":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","sourceOld":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#getReplaceBlock(char[],int,int).mjava","sourceNew":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","sourceOld":"  String getReplaceBlock( char block[], int offset, int length ){\n    StringBuffer replaceBlock = new StringBuffer();\n    String sourceBlock = new String( block, offset, length );\n    Matcher m = pattern.matcher( sourceBlock );\n    int lastMatchOffset = 0, lastDiff = 0;\n    while( m.find() ){\n      m.appendReplacement( replaceBlock, replacement );\n      // record cumulative diff for the offset correction\n      int diff = replaceBlock.length() - lastMatchOffset - lastDiff - ( m.end( 0 ) - lastMatchOffset );\n      if (diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (diff > 0) {\n          for(int i = 0; i < diff; i++){\n            addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + i - prevCumulativeDiff,\n                prevCumulativeDiff - 1 - i);\n          }\n        } else {\n          addOffCorrectMap(nextCharCounter - length + m.end( 0 ) + diff - prevCumulativeDiff,\n              prevCumulativeDiff - diff);\n        }\n      }\n      // save last offsets\n      lastMatchOffset = m.end( 0 );\n      lastDiff = diff;\n    }\n    // copy remaining of the part of source block\n    m.appendTail( replaceBlock );\n    return replaceBlock.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}