{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanRequiredEqualScores().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanRequiredEqualScores().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanRequiredEqualScores().mjava","sourceNew":"    public void testBooleanRequiredEqualScores() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.0f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1,BooleanClause.Occur.MUST);//true,false);\n            QueryUtils.check(q1,s);\n\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.0f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.MUST);//true,false);\n           QueryUtils.check(q2,s);\n        }\n\n        QueryUtils.check(q,s);\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n            assertEquals(\"3 docs should match \" + q.toString(),\n                         3, h.length);\n            float score = h[0].score;\n            for (int i = 1; i < h.length; i++) {\n                assertEquals(\"score #\" + i + \" is not the same\",\n                             score, h[i].score, SCORE_COMP_THRESH);\n            }\n        } catch (Error e) {\n            printHits(\"testBooleanRequiredEqualScores1\",h, s);\n            throw e;\n        }\n    }\n\n","sourceOld":"    public void testBooleanRequiredEqualScores() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.0f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1,BooleanClause.Occur.MUST);//true,false);\n            QueryUtils.check(q1,s);\n\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.0f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.MUST);//true,false);\n           QueryUtils.check(q2,s);\n        }\n\n        QueryUtils.check(q,s);\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n            assertEquals(\"3 docs should match \" + q.toString(),\n                         3, h.length);\n            float score = h[0].score;\n            for (int i = 1; i < h.length; i++) {\n                assertEquals(\"score #\" + i + \" is not the same\",\n                             score, h[i].score, SCORE_COMP_THRESH);\n            }\n        } catch (Error e) {\n            printHits(\"testBooleanRequiredEqualScores1\",h, s);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanRequiredEqualScores().mjava","sourceNew":null,"sourceOld":"    public void testBooleanRequiredEqualScores() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.0f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1,BooleanClause.Occur.MUST);//true,false);\n            QueryUtils.check(q1,s);\n\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.0f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.MUST);//true,false);\n           QueryUtils.check(q2,s);\n        }\n\n        QueryUtils.check(q,s);\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n            assertEquals(\"3 docs should match \" + q.toString(),\n                         3, h.length);\n            float score = h[0].score;\n            for (int i = 1; i < h.length; i++) {\n                assertEquals(\"score #\" + i + \" is not the same\",\n                             score, h[i].score, SCORE_COMP_THRESH);\n            }\n        } catch (Error e) {\n            printHits(\"testBooleanRequiredEqualScores1\",h, s);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}