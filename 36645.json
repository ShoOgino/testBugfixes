{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer,Map[String,Float]).mjava","commits":[{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer,Map[String,Float]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(Version,String[],Analyzer,Map[String,Float]).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(Version matchVersion, String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(matchVersion, fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(Version,String[],Analyzer,Map[String,Float]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer,Map[String,Float]).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(Version matchVersion, String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(matchVersion, fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer,Map[String,Float]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(Version,String[],Analyzer,Map[String,Float]).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(Version matchVersion, String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(matchVersion, fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer,Map[String,Float]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer,Map[String,Float]).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=&gt;5 body=&gt;10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser. \n   * Allows passing of a map with term to Boost, and the boost to apply to each term.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>When you pass a boost (title=>5 body=>10) you can get </p>\n   * \n   * <code>\n   * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n   * </code>\n   *\n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer, Map<String,Float> boosts) {\n    this(fields, analyzer);\n    this.boosts = boosts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}