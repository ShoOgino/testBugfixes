{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the\n   * provided outputFile, making them available for a later call to\n   * {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}. If\n   * these {@link TotalFacetCounts} are available in the cache, they are used.\n   * But if they are not in the cache, this call will first compute them (which\n   * will also add them to the cache).\n   * \n   * @param outputFile\n   *          file to store in.\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the\n   * provided outputFile, making them available for a later call to\n   * {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}. If\n   * these {@link TotalFacetCounts} are available in the cache, they are used.\n   * But if they are not in the cache, this call will first compute them (which\n   * will also add them to the cache).\n   * \n   * @param outputFile\n   *          file to store in.\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the\n   * provided outputFile, making them available for a later call to\n   * {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}. If\n   * these {@link TotalFacetCounts} are available in the cache, they are used.\n   * But if they are not in the cache, this call will first compute them (which\n   * will also add them to the cache).\n   * \n   * @param outputFile\n   *          file to store in.\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the\n   * provided outputFile, making them available for a later call to\n   * {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}. If\n   * these {@link TotalFacetCounts} are available in the cache, they are used.\n   * But if they are not in the cache, this call will first compute them (which\n   * will also add them to the cache).\n   * \n   * @param outputFile\n   *          file to store in.\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}