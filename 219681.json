{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","commits":[{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","pathOld":"/dev/null","sourceNew":"  private void initSorter() {\n    sorter = new Sorter() {\n\n        @Override\n        public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n          final NumericDocValues weights = reader.getNumericDocValues(\"weight\");\n          final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n              @Override\n              public int compare(int docID1, int docID2) {\n                final long v1 = weights.get(docID1);\n                final long v2 = weights.get(docID2);\n                // Reverse sort (highest weight first);\n                // java7 only:\n                //return Long.compare(v2, v1);\n                if (v1 > v2) {\n                  return -1;\n                } else if (v1 < v2) {\n                  return 1;\n                } else {\n                  return 0;\n                }\n              }\n            };\n          return Sorter.sort(reader.maxDoc(), comparator);\n        }\n\n        @Override\n        public String getID() {\n          return \"BySuggestWeight\";\n        }\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbe87c1ed50e47c3704b5fb2b690461bfc158aba","date":1394111115,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","sourceNew":"  private void initSorter() {\n    sorter = new SortSorter(new Sort(new SortField(\"weight\", SortField.Type.LONG, true)));\n  }\n\n","sourceOld":"  private void initSorter() {\n    sorter = new Sorter() {\n\n        @Override\n        public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n          final NumericDocValues weights = reader.getNumericDocValues(\"weight\");\n          final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n              @Override\n              public int compare(int docID1, int docID2) {\n                final long v1 = weights.get(docID1);\n                final long v2 = weights.get(docID2);\n                // Reverse sort (highest weight first);\n                // java7 only:\n                //return Long.compare(v2, v1);\n                if (v1 > v2) {\n                  return -1;\n                } else if (v1 < v2) {\n                  return 1;\n                } else {\n                  return 0;\n                }\n              }\n            };\n          return Sorter.sort(reader.maxDoc(), comparator);\n        }\n\n        @Override\n        public String getID() {\n          return \"BySuggestWeight\";\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","sourceNew":"  private void initSorter() {\n    sorter = new Sort(new SortField(\"weight\", SortField.Type.LONG, true));\n  }\n\n","sourceOld":"  private void initSorter() {\n    sorter = new SortSorter(new Sort(new SortField(\"weight\", SortField.Type.LONG, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b638f37b6d00b06fa8d6875cea1df4b274d6e87a","date":1394120449,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","sourceNew":null,"sourceOld":"  private void initSorter() {\n    sorter = new Sort(new SortField(\"weight\", SortField.Type.LONG, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","sourceNew":null,"sourceOld":"  private void initSorter() {\n    sorter = new Sorter() {\n\n        @Override\n        public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n          final NumericDocValues weights = reader.getNumericDocValues(\"weight\");\n          final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n              @Override\n              public int compare(int docID1, int docID2) {\n                final long v1 = weights.get(docID1);\n                final long v2 = weights.get(docID2);\n                // Reverse sort (highest weight first);\n                // java7 only:\n                //return Long.compare(v2, v1);\n                if (v1 > v2) {\n                  return -1;\n                } else if (v1 < v2) {\n                  return 1;\n                } else {\n                  return 0;\n                }\n              }\n            };\n          return Sorter.sort(reader.maxDoc(), comparator);\n        }\n\n        @Override\n        public String getID() {\n          return \"BySuggestWeight\";\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#initSorter().mjava","sourceNew":null,"sourceOld":"  private void initSorter() {\n    sorter = new Sorter() {\n\n        @Override\n        public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n          final NumericDocValues weights = reader.getNumericDocValues(\"weight\");\n          final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n              @Override\n              public int compare(int docID1, int docID2) {\n                final long v1 = weights.get(docID1);\n                final long v2 = weights.get(docID2);\n                // Reverse sort (highest weight first);\n                // java7 only:\n                //return Long.compare(v2, v1);\n                if (v1 > v2) {\n                  return -1;\n                } else if (v1 < v2) {\n                  return 1;\n                } else {\n                  return 0;\n                }\n              }\n            };\n          return Sorter.sort(reader.maxDoc(), comparator);\n        }\n\n        @Override\n        public String getID() {\n          return \"BySuggestWeight\";\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a371aa649cc243e82cb8677ca960a1e0232ecedf","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["cbe87c1ed50e47c3704b5fb2b690461bfc158aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b638f37b6d00b06fa8d6875cea1df4b274d6e87a":["b060a9c887ff2c6f4280953afc6fb6000934dae5"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["a371aa649cc243e82cb8677ca960a1e0232ecedf","b638f37b6d00b06fa8d6875cea1df4b274d6e87a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4637747f71df783fc2014ef1f1e0418466e3bed6"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["b638f37b6d00b06fa8d6875cea1df4b274d6e87a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"b638f37b6d00b06fa8d6875cea1df4b274d6e87a":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["b060a9c887ff2c6f4280953afc6fb6000934dae5"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cbe87c1ed50e47c3704b5fb2b690461bfc158aba","4637747f71df783fc2014ef1f1e0418466e3bed6"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}