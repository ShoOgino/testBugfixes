{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    \n    \n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n    \n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n    \n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n    \n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n    \n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    \n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n    \n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n    \n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n    \n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n    \n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e7b27a300329af820c16fc531452a07a2833681","date":1445883459,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    HttpSolrClient client = new HttpSolrClient(((HttpSolrClient)clients.get(0)).getBaseURL());\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    \n    \n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n    \n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n    \n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n    \n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n    \n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n  }\n\n","bugFix":["e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    HttpSolrClient client = new HttpSolrClient(((HttpSolrClient)clients.get(0)).getBaseURL());\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    HttpSolrClient client = new HttpSolrClient(((HttpSolrClient)clients.get(0)).getBaseURL());\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    HttpSolrClient client = new HttpSolrClient(((HttpSolrClient)clients.get(0)).getBaseURL());\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    HttpSolrClient client = new HttpSolrClient(((HttpSolrClient)clients.get(0)).getBaseURL());\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(\"6\", document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(\"6\", document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(\"6\", document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(\"6\", document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryElevationComponentTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(\"6\", document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(\"6\", document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n\n    del(\"*:*\");\n    indexr(id,\"1\", \"int_i\", \"1\", \"text\", \"XXXX XXXX\", \"field_t\", \"anything\");\n    indexr(id,\"2\", \"int_i\", \"2\", \"text\", \"YYYY YYYY\", \"plow_t\", \"rake\");\n    indexr(id,\"3\", \"int_i\", \"3\", \"text\", \"ZZZZ ZZZZ\");\n    indexr(id,\"4\", \"int_i\", \"4\", \"text\", \"XXXX XXXX\");\n    indexr(id,\"5\", \"int_i\", \"5\", \"text\", \"ZZZZ ZZZZ ZZZZ\");\n    indexr(id,\"6\", \"int_i\", \"6\", \"text\", \"ZZZZ\");\n\n    index_specific(2, id, \"7\", \"int_i\", \"7\", \"text\", \"solr\");\n    commit();\n\n    handle.put(\"explain\", SKIPVAL);\n    handle.put(\"debug\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"score\", SKIPVAL);\n    handle.put(\"wt\", SKIP);\n    handle.put(\"distrib\", SKIP);\n    handle.put(\"shards.qt\", SKIP);\n    handle.put(\"shards\", SKIP);\n    handle.put(\"q\", SKIP);\n    handle.put(\"qt\", SKIP);\n    query(\"q\", \"*:*\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", \"sort\", \"id desc\", CommonParams.FL, \"id, score, [elevated]\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i desc\");\n\n    query(\"q\", \"solr\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"int_i asc\");\n\n    query(\"q\", \"ZZZZ\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"*, [elevated]\", \"forceElevation\", \"true\", \"sort\", \"id desc\");\n\n    // See SOLR-4854 for background on following test code\n\n    // Uses XML response format by default\n    QueryResponse response = query(\"q\", \"XXXX\", \"qt\", \"/elevate\", \"shards.qt\", \"/elevate\", \"rows\", \"500\", CommonParams.FL, \"id, [elevated]\", \"enableElevation\", \"true\",\n        \"forceElevation\", \"true\", \"elevateIds\", \"6\", \"sort\", \"id desc\");\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    SolrDocument document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n\n    // Force javabin format\n    final String clientUrl = ((HttpSolrClient)clients.get(0)).getBaseURL();\n    HttpSolrClient client = getHttpSolrClient(clientUrl);\n    client.setParser(new BinaryResponseParser());\n    SolrQuery solrQuery = new SolrQuery(\"XXXX\").setParam(\"qt\", \"/elevate\").setParam(\"shards.qt\", \"/elevate\").setRows(500).setFields(\"id,[elevated]\")\n        .setParam(\"enableElevation\", \"true\").setParam(\"forceElevation\", \"true\").setParam(\"elevateIds\", \"6\", \"wt\", \"javabin\")\n        .setSort(\"id\", SolrQuery.ORDER.desc);\n    setDistributedParams(solrQuery);\n    response = client.query(solrQuery);\n    client.close();\n\n    assertTrue(response.getResults().getNumFound() > 0);\n    document = response.getResults().get(0);\n    assertEquals(6.0f, document.getFieldValue(\"id\"));\n    assertEquals(true, document.getFieldValue(\"[elevated]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["3e7b27a300329af820c16fc531452a07a2833681"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"3e7b27a300329af820c16fc531452a07a2833681":["abb23fcc2461782ab204e61213240feb77d355aa"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"abb23fcc2461782ab204e61213240feb77d355aa":["3e7b27a300329af820c16fc531452a07a2833681"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3e7b27a300329af820c16fc531452a07a2833681":["859081acf00749f5dd462772c571d611d4a4d2db"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}