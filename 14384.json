{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#any_decendent_of_a_child2().mjava","commits":[{"id":"7f2a93a28913071a0b713be1d4b8a1181388d550","date":1254814948,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#any_decendent_of_a_child2().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void any_decendent_of_a_child2() {\n    XPathRecordReader rr = new XPathRecordReader(\"/anycd\");\n    rr.addField(\"descdend\", \"/anycd/contenido//boo\",         true);\n\n    // same test string as above but checking to see if *some* //boo's are collected\n    String xml=\"<anycd>\\n\"\n             + \"  this <boo>top level</boo> is ignored because it is external to the forEach\\n\"\n             + \"  <status>as is <boo>this element</boo></status>\\n\"\n             + \"  <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    This one is <boo>not ignored as its</boo> inside a forEach\\n\"\n             + \"    <antetitulo><i> big <boo>antler</boo></i></antetitulo>\\n\"\n             + \"    <titulo>  My <i>flattened <boo>title</boo></i> </titulo>\\n\"\n             + \"    <resumen> My summary <i>skip this!</i>  </resumen>\\n\"\n             + \"    <texto>   <boo>Within the body of</boo>My text</texto>\\n\"\n             + \"    <p>Access <boo>inner <i>sub clauses</i> as well</boo></p>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</anycd>\";\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"not ignored as its\",((List) m.get(\"descdend\")).get(0) );\n    Assert.assertEquals(\"antler\"            ,((List) m.get(\"descdend\")).get(1) );\n    Assert.assertEquals(\"title\"             ,((List) m.get(\"descdend\")).get(2) );\n    Assert.assertEquals(\"Within the body of\",((List) m.get(\"descdend\")).get(3) );\n    Assert.assertEquals(\"inner  as well\"    ,((List) m.get(\"descdend\")).get(4) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#any_decendent_of_a_child2().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#any_decendent_of_a_child2().mjava","sourceNew":"  @Test\n  public void any_decendent_of_a_child2() {\n    XPathRecordReader rr = new XPathRecordReader(\"/anycd\");\n    rr.addField(\"descdend\", \"/anycd/contenido//boo\",         true);\n\n    // same test string as above but checking to see if *some* //boo's are collected\n    String xml=\"<anycd>\\n\"\n             + \"  this <boo>top level</boo> is ignored because it is external to the forEach\\n\"\n             + \"  <status>as is <boo>this element</boo></status>\\n\"\n             + \"  <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    This one is <boo>not ignored as its</boo> inside a forEach\\n\"\n             + \"    <antetitulo><i> big <boo>antler</boo></i></antetitulo>\\n\"\n             + \"    <titulo>  My <i>flattened <boo>title</boo></i> </titulo>\\n\"\n             + \"    <resumen> My summary <i>skip this!</i>  </resumen>\\n\"\n             + \"    <texto>   <boo>Within the body of</boo>My text</texto>\\n\"\n             + \"    <p>Access <boo>inner <i>sub clauses</i> as well</boo></p>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</anycd>\";\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"not ignored as its\",((List) m.get(\"descdend\")).get(0) );\n    Assert.assertEquals(\"antler\"            ,((List) m.get(\"descdend\")).get(1) );\n    Assert.assertEquals(\"title\"             ,((List) m.get(\"descdend\")).get(2) );\n    Assert.assertEquals(\"Within the body of\",((List) m.get(\"descdend\")).get(3) );\n    Assert.assertEquals(\"inner  as well\"    ,((List) m.get(\"descdend\")).get(4) );\n  }\n\n","sourceOld":"  @Test\n  public void any_decendent_of_a_child2() {\n    XPathRecordReader rr = new XPathRecordReader(\"/anycd\");\n    rr.addField(\"descdend\", \"/anycd/contenido//boo\",         true);\n\n    // same test string as above but checking to see if *some* //boo's are collected\n    String xml=\"<anycd>\\n\"\n             + \"  this <boo>top level</boo> is ignored because it is external to the forEach\\n\"\n             + \"  <status>as is <boo>this element</boo></status>\\n\"\n             + \"  <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    This one is <boo>not ignored as its</boo> inside a forEach\\n\"\n             + \"    <antetitulo><i> big <boo>antler</boo></i></antetitulo>\\n\"\n             + \"    <titulo>  My <i>flattened <boo>title</boo></i> </titulo>\\n\"\n             + \"    <resumen> My summary <i>skip this!</i>  </resumen>\\n\"\n             + \"    <texto>   <boo>Within the body of</boo>My text</texto>\\n\"\n             + \"    <p>Access <boo>inner <i>sub clauses</i> as well</boo></p>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</anycd>\";\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"not ignored as its\",((List) m.get(\"descdend\")).get(0) );\n    Assert.assertEquals(\"antler\"            ,((List) m.get(\"descdend\")).get(1) );\n    Assert.assertEquals(\"title\"             ,((List) m.get(\"descdend\")).get(2) );\n    Assert.assertEquals(\"Within the body of\",((List) m.get(\"descdend\")).get(3) );\n    Assert.assertEquals(\"inner  as well\"    ,((List) m.get(\"descdend\")).get(4) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7f2a93a28913071a0b713be1d4b8a1181388d550":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}