{"path":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    try {\n      assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n    } catch(Exception e) {\n      fail(\"Shouldn't get an exception for this batch: \" + e.getMessage());\n    }\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\")\n            ,\"//result[@numFound='10']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","sourceNew":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\"),\"//result[@numFound='10']\");\n  }\n\n","sourceOld":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    try {\n      assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n    } catch(Exception e) {\n      fail(\"Shouldn't get an exception for this batch: \" + e.getMessage());\n    }\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\")\n            ,\"//result[@numFound='10']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","sourceNew":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\"),\"//result[@numFound='10']\");\n  }\n\n","sourceOld":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    try {\n      assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n    } catch(Exception e) {\n      fail(\"Shouldn't get an exception for this batch: \" + e.getMessage());\n    }\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\")\n            ,\"//result[@numFound='10']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testMaxErrorsInfinite().mjava","sourceNew":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\"),\"//result[@numFound='10']\");\n  }\n\n","sourceOld":"  @Test\n  public void testMaxErrorsInfinite() throws IOException {\n    ModifiableSolrParams requestParams = new ModifiableSolrParams();\n    requestParams.add(\"maxErrors\", \"-1\");\n    try {\n      assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-not-set\", docs, null, badIds);\n    } catch(Exception e) {\n      fail(\"Shouldn't get an exception for this batch: \" + e.getMessage());\n    }\n    assertU(commit());\n    assertQ(req(\"q\",\"*:*\")\n            ,\"//result[@numFound='10']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}