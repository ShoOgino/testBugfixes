{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.equals(\"/\")) {\n      return root;\n    }\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#traverse(String,boolean,CreateMode).mjava","sourceNew":null,"sourceOld":"  // this method should always be invoked under lock\n  private Node traverse(String path, boolean create, CreateMode mode) throws IOException {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    throttleOrError(path);\n    if (path.equals(\"/\")) {\n      return root;\n    }\n    if (path.charAt(0) == '/') {\n      path = path.substring(1);\n    }\n    StringBuilder currentPath = new StringBuilder();\n    String[] elements = path.split(\"/\");\n    Node parentNode = root;\n    Node n = null;\n    for (int i = 0; i < elements.length; i++) {\n      String currentName = elements[i];\n      currentPath.append('/');\n      n = parentNode.children != null ? parentNode.children.get(currentName) : null;\n      if (n == null) {\n        if (create) {\n          n = createNode(parentNode, mode, currentPath, currentName,null, true);\n        } else {\n          break;\n        }\n      } else {\n        currentPath.append(currentName);\n      }\n      parentNode = n;\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["3f504512a03d978990cbff30db0522b354e846db"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}