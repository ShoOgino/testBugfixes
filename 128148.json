{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","commits":[{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    if (inputWindow.size() > 0) {\n      inputWindow.removeFirst();\n    }\n    while (getNextToken()) {\n      inputWindow.add(captureState());\n      if (inputWindow.size() == maxShingleSize) {\n        break;\n      }\n    }\n    gramSize.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    if (inputWindow.size() > 0) {\n      inputWindow.removeFirst();\n    }\n    while (getNextToken()) {\n      inputWindow.add(captureState());\n      if (inputWindow.size() == maxShingleSize) {\n        break;\n      }\n    }\n    gramSize.reset();\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    if (inputWindow.size() > 0) {\n      inputWindow.removeFirst();\n    }\n    while (getNextToken()) {\n      inputWindow.add(captureState());\n      if (inputWindow.size() == maxShingleSize) {\n        break;\n      }\n    }\n    gramSize.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}