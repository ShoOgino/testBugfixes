{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","commits":[{"id":"bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9","date":1454264470,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"/dev/null","sourceNew":"  private void testNulls() throws Exception {\n\n    indexr(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"/dev/null","sourceNew":"  private void testNulls() throws Exception {\n\n    indexr(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  private void testNulls() throws Exception {\n\n    indexr(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  private void testNulls() throws Exception {\n\n    indexr(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  private void testNulls() throws Exception {\n\n    indexr(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  private void testNulls() throws Exception {\n\n    indexr(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b","date":1479136768,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertEquals(0L, (long)tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39e68504a385449bfdc498cfda2909b581df36f1","date":1492032414,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\",                  \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 0, 1, 2, 3);\n\n    tuple = tuples.get(0);\n    assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n    assertNull(tuple.get(\"s_multi\"));\n    assertNull(tuple.get(\"i_multi\"));\n    assertNull(tuple.getLong(\"a_i\"));\n\n\n    tuple = tuples.get(1);\n    assertNull(tuple.get(\"a_s\"));\n    List<String> strings = tuple.getStrings(\"s_multi\");\n    assertNotNull(strings);\n    assertEquals(\"aaa\", strings.get(0));\n    assertEquals(\"bbb\", strings.get(1));\n    List<Long> longs = tuple.getLongs(\"i_multi\");\n    assertNotNull(longs);\n\n    //test sort (asc) with null string field. Null should sort to the top.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    //test sort(desc) with null string field.  Null should sort to the bottom.\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"807005c99d2f1db14e67f84c60b9a5be2ce93974","date":1494295491,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNulls().mjava","sourceNew":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNulls() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_i\", \"1\", \"a_f\", \"0\", \"s_multi\", \"aaa\", \"s_multi\", \"bbb\", \"i_multi\", \"100\", \"i_multi\", \"200\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"3\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\",             \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"2\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple tuple;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 0, 1, 2, 3);\n\n      tuple = tuples.get(0);\n      assertTrue(\"hello4\".equals(tuple.getString(\"a_s\")));\n      assertNull(tuple.get(\"s_multi\"));\n      assertNull(tuple.get(\"i_multi\"));\n      assertNull(tuple.getLong(\"a_i\"));\n\n\n      tuple = tuples.get(1);\n      assertNull(tuple.get(\"a_s\"));\n      List<String> strings = tuple.getStrings(\"s_multi\");\n      assertNotNull(strings);\n      assertEquals(\"aaa\", strings.get(0));\n      assertEquals(\"bbb\", strings.get(1));\n      List<Long> longs = tuple.getLongs(\"i_multi\");\n      assertNotNull(longs);\n\n      //test sort (asc) with null string field. Null should sort to the top.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //test sort(desc) with null string field.  Null should sort to the bottom.\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f, s_multi, i_multi\\\", qt=\\\"/export\\\", sort=\\\"a_s desc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"39e68504a385449bfdc498cfda2909b581df36f1":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"73450c0955930295d34703e7ddbfc6973b7a121a":["bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9","b940572a59da1b42b6c20ab5278155b12816807a"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["73450c0955930295d34703e7ddbfc6973b7a121a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"807005c99d2f1db14e67f84c60b9a5be2ce93974":["39e68504a385449bfdc498cfda2909b581df36f1"],"b940572a59da1b42b6c20ab5278155b12816807a":["bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9"],"bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","807005c99d2f1db14e67f84c60b9a5be2ce93974"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9","b940572a59da1b42b6c20ab5278155b12816807a"],"c8243e301531f97de264740d6afa71de6781dd64":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["807005c99d2f1db14e67f84c60b9a5be2ce93974"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"39e68504a385449bfdc498cfda2909b581df36f1":["807005c99d2f1db14e67f84c60b9a5be2ce93974"],"73450c0955930295d34703e7ddbfc6973b7a121a":["f8c0e05ed2dea5beb7c0246a2a6e68f28595357b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["39e68504a385449bfdc498cfda2909b581df36f1"],"807005c99d2f1db14e67f84c60b9a5be2ce93974":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9":["73450c0955930295d34703e7ddbfc6973b7a121a","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["c8243e301531f97de264740d6afa71de6781dd64"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","bf0d17d4afd2792a63ee45b11039e70a4e4bb4a9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","e9017cf144952056066919f1ebc7897ff9bd71b1","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}