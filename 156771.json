{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.shutdown();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.shutdown();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.shutdown();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.shutdown();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.shutdown();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.shutdown();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.shutdown();\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.shutdown();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.shutdown();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.shutdown();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.shutdown();\n\n    writer = newWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.shutdown();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.shutdown();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.shutdown();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.shutdown();\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.shutdown();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    // cannot add self\n    IndexWriter writer2 = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer2.addIndexes(aux, dir);\n    });\n    assertEquals(100, writer2.maxDoc());\n    writer2.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexes(aux, dir);\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":["d0ef034a4f10871667ae75181537775ddcf8ade4","0eab5479eeaba1914f4cd6b6bca566976c31075c","54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","4e8cc373c801e54cec75daf9f52792cb4b17f536","560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.getDocStats().maxDoc);\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    // cannot add self\n    IndexWriter writer2 = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer2.addIndexes(aux, dir);\n    });\n    assertEquals(100, writer2.getDocStats().maxDoc);\n    writer2.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = newDirectory();\n    // auxiliary directory\n    Directory aux = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(\n        aux,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(1000).\n            setMergePolicy(newLogMergePolicy(false))\n    );\n    addDocs(writer, 100);\n    writer.close();\n\n    // cannot add self\n    IndexWriter writer2 = newWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer2.addIndexes(aux, dir);\n    });\n    assertEquals(100, writer2.maxDoc());\n    writer2.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["05fe562aa248790944d43cdd478f512572835ba0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}