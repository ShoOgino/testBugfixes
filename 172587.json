{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpClientTimeout#getNew(URL).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpClientTimeout#getNew(URL).mjava","pathOld":"/dev/null","sourceNew":"\t/*\n\t * public void SetTimeout(int i) throws SocketException {\n\t * serverSocket.setSoTimeout(i);\n\t * }\n\t */\n\t/*\n\t * This class has no public constructor for HTTP.  This method is used to\n\t * get an HttpClient to the specifed URL.  If there's currently an\n\t * active HttpClient to that server/port, you'll get that one.\n\t *\n\t * no longer syncrhonized -- it slows things down too much\n\t * synchronize at a higher level\n\t */\n\t/**\n\t *  Gets the New attribute of the HttpClientTimeout class\n\t *\n\t *@param  url              Description of Parameter\n\t *@return                  The New value\n\t *@exception  IOException  Description of Exception\n\t */\n\tpublic static HttpClientTimeout getNew(URL url) throws IOException {\n\t\t/*\n\t\t * see if one's already around\n\t\t */\n\t\tHttpClientTimeout ret = (HttpClientTimeout) kac.get(url);\n\t\tif (ret == null) {\n\t\t\tret = new HttpClientTimeout(url);\n\t\t\t// CTOR called openServer()\n\t\t}\n\t\telse {\n\t\t\tret.url = url;\n\t\t}\n\t\t// don't know if we're keeping alive until we parse the headers\n\t\t// for now, keepingAlive is false\n\t\treturn ret;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpClientTimeout#getNew(URL).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpClientTimeout#getNew(URL).mjava","sourceNew":"    /*\n     * public void SetTimeout(int i) throws SocketException {\n     * serverSocket.setSoTimeout(i);\n     * }\n     */\n    /*\n     * This class has no public constructor for HTTP.  This method is used to\n     * get an HttpClient to the specifed URL.  If there's currently an\n     * active HttpClient to that server/port, you'll get that one.\n     *\n     * no longer syncrhonized -- it slows things down too much\n     * synchronize at a higher level\n     */\n    /**\n     *  Gets the New attribute of the HttpClientTimeout class\n     *\n     *@param  url              Description of Parameter\n     *@return                  The New value\n     *@exception  IOException  Description of Exception\n     */\n    public static HttpClientTimeout getNew(URL url) throws IOException {\n        /*\n         * see if one's already around\n         */\n        HttpClientTimeout ret = (HttpClientTimeout) kac.get(url);\n        if (ret == null) {\n            ret = new HttpClientTimeout(url);\n            // CTOR called openServer()\n        }\n        else {\n            ret.url = url;\n        }\n        // don't know if we're keeping alive until we parse the headers\n        // for now, keepingAlive is false\n        return ret;\n    }\n\n","sourceOld":"\t/*\n\t * public void SetTimeout(int i) throws SocketException {\n\t * serverSocket.setSoTimeout(i);\n\t * }\n\t */\n\t/*\n\t * This class has no public constructor for HTTP.  This method is used to\n\t * get an HttpClient to the specifed URL.  If there's currently an\n\t * active HttpClient to that server/port, you'll get that one.\n\t *\n\t * no longer syncrhonized -- it slows things down too much\n\t * synchronize at a higher level\n\t */\n\t/**\n\t *  Gets the New attribute of the HttpClientTimeout class\n\t *\n\t *@param  url              Description of Parameter\n\t *@return                  The New value\n\t *@exception  IOException  Description of Exception\n\t */\n\tpublic static HttpClientTimeout getNew(URL url) throws IOException {\n\t\t/*\n\t\t * see if one's already around\n\t\t */\n\t\tHttpClientTimeout ret = (HttpClientTimeout) kac.get(url);\n\t\tif (ret == null) {\n\t\t\tret = new HttpClientTimeout(url);\n\t\t\t// CTOR called openServer()\n\t\t}\n\t\telse {\n\t\t\tret.url = url;\n\t\t}\n\t\t// don't know if we're keeping alive until we parse the headers\n\t\t// for now, keepingAlive is false\n\t\treturn ret;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/net/HttpClientTimeout#getNew(URL).mjava","sourceNew":null,"sourceOld":"    /*\n     * public void SetTimeout(int i) throws SocketException {\n     * serverSocket.setSoTimeout(i);\n     * }\n     */\n    /*\n     * This class has no public constructor for HTTP.  This method is used to\n     * get an HttpClient to the specifed URL.  If there's currently an\n     * active HttpClient to that server/port, you'll get that one.\n     *\n     * no longer syncrhonized -- it slows things down too much\n     * synchronize at a higher level\n     */\n    /**\n     *  Gets the New attribute of the HttpClientTimeout class\n     *\n     *@param  url              Description of Parameter\n     *@return                  The New value\n     *@exception  IOException  Description of Exception\n     */\n    public static HttpClientTimeout getNew(URL url) throws IOException {\n        /*\n         * see if one's already around\n         */\n        HttpClientTimeout ret = (HttpClientTimeout) kac.get(url);\n        if (ret == null) {\n            ret = new HttpClientTimeout(url);\n            // CTOR called openServer()\n        }\n        else {\n            ret.url = url;\n        }\n        // don't know if we're keeping alive until we parse the headers\n        // for now, keepingAlive is false\n        return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}