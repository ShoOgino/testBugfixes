{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx);\n    assertNotNull(s.twoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx);\n    assertNotNull(s.twoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":null,"sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx);\n    assertNotNull(s.twoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx);\n    assertNotNull(s.twoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":null,"sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx);\n    assertNotNull(s.twoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx);\n    assertNotNull(s.twoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a412a7808b2815566cb17117ebe6638112b9a31":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["7dd748bb245633a8195281556bb0e68a6ea97d18","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a412a7808b2815566cb17117ebe6638112b9a31"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"5a412a7808b2815566cb17117ebe6638112b9a31":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}