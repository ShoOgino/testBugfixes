{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\"));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\"));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\"));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\"));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n      StorableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      StorableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n      StorableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      StorableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      Document doc2 = reader.document(reader.maxDoc() - 1);\n      IndexableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      IndexableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n      StorableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      StorableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n      Directory dir = newDirectory();\n      byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n      for (int i = 0; i < 10; i++) {\n        addDoc(writer, \"document number \" + (i + 1));\n        addDocumentWithFields(writer);\n        addDocumentWithDifferentFields(writer);\n        addDocumentWithTermVectorFields(writer);\n      }\n      writer.close();\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(new StoredField(\"bin1\", bin));\n      doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n      writer.addDocument(doc);\n      writer.close();\n      DirectoryReader reader = DirectoryReader.open(dir);\n      StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n      StorableField[] fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      StorableField b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      BytesRef bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      // force merge\n\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      writer.forceMerge(1);\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      doc2 = reader.document(reader.maxDoc() - 1);\n      fields = doc2.getFields(\"bin1\");\n      assertNotNull(fields);\n      assertEquals(1, fields.length);\n      b1 = fields[0];\n      assertTrue(b1.binaryValue() != null);\n      bytesRef = b1.binaryValue();\n      assertEquals(bin.length, bytesRef.length);\n      for (int i = 0; i < bin.length; i++) {\n        assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n      }\n      reader.close();\n      dir.close();\n  }\n\n","bugFix":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","629c38c4ae4e303d0617e05fbfe508140b32f0a3","04f07771a2a7dd3a395700665ed839c3dae2def2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.shutdown();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.shutdown();\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.shutdown();\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.shutdown();\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.shutdown();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testBinaryFields().mjava","sourceNew":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    Document doc2 = reader.document(reader.maxDoc() - 1);\n    IndexableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    IndexableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBinaryFields() throws IOException {\n    Directory dir = newDirectory();\n    byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n      \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMergePolicy(newLogMergePolicy()));\n      \n    for (int i = 0; i < 10; i++) {\n      addDoc(writer, \"document number \" + (i + 1));\n      addDocumentWithFields(writer);\n      addDocumentWithDifferentFields(writer);\n      addDocumentWithTermVectorFields(writer);\n    }\n    writer.close();\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(new StoredField(\"bin1\", bin));\n    doc.add(new TextField(\"junk\", \"junk text\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    StoredDocument doc2 = reader.document(reader.maxDoc() - 1);\n    StorableField[] fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    StorableField b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    BytesRef bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    // force merge\n\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    doc2 = reader.document(reader.maxDoc() - 1);\n    fields = doc2.getFields(\"bin1\");\n    assertNotNull(fields);\n    assertEquals(1, fields.length);\n    b1 = fields[0];\n    assertTrue(b1.binaryValue() != null);\n    bytesRef = b1.binaryValue();\n    assertEquals(bin.length, bytesRef.length);\n    for (int i = 0; i < bin.length; i++) {\n      assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55eeb2534cd53d2a985669829df942468ebf5314":["1d028314cced5858683a1bb4741423d0f934257b"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","55eeb2534cd53d2a985669829df942468ebf5314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"55eeb2534cd53d2a985669829df942468ebf5314":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["55eeb2534cd53d2a985669829df942468ebf5314","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}