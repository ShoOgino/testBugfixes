{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      char nextChar = utf16.result[position - 1];\n      // if a character is U+FFFF its a dead-end too,\n      // because there is no higher character in UTF-16 sort order.\n      if (nextChar != '\\uFFFF') {\n        nextChar++;\n        utf16.result[position - 1] = nextChar;\n        utf16.setLength(position);\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xef its a dead-end too,\n      // because there is no higher character in UTF-16 sort order.\n      nextChar = incrementUTF16(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      char nextChar = utf16.result[position - 1];\n      // if a character is U+FFFF its a dead-end too,\n      // because there is no higher character in UTF-16 sort order.\n      if (nextChar != '\\uFFFF') {\n        nextChar++;\n        utf16.result[position - 1] = nextChar;\n        utf16.setLength(position);\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in UTF-8 sort order.\n      nextChar = incrementUTF8(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xef its a dead-end too,\n      // because there is no higher character in UTF-16 sort order.\n      nextChar = incrementUTF16(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in UTF-8 sort order.\n      nextChar = incrementUTF8(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xef its a dead-end too,\n      // because there is no higher character in UTF-16 sort order.\n      nextChar = incrementUTF16(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"780a676adba1080a3bb08ca427a08ff996227ecd","date":1285561731,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in UTF-8 sort order.\n      nextChar = incrementUTF8(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"705cdca081fbf23193d7ff6db22fedef9dd7c54f","date":1285601541,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean backtrack(int position) {\n    while (position > 0) {\n      int nextChar = seekBytesRef.bytes[position - 1] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in UTF-8 sort order.\n      nextChar = incrementUTF8(nextChar);\n      if (nextChar != -1) {\n        seekBytesRef.bytes[position - 1] = (byte) nextChar;\n        seekBytesRef.length = position;\n        return true;\n      }\n      position--;\n    }\n    return false; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["705cdca081fbf23193d7ff6db22fedef9dd7c54f"],"705cdca081fbf23193d7ff6db22fedef9dd7c54f":["780a676adba1080a3bb08ca427a08ff996227ecd"],"08932c793647a36953d1816b1060121f48820d3f":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","08932c793647a36953d1816b1060121f48820d3f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","705cdca081fbf23193d7ff6db22fedef9dd7c54f"],"780a676adba1080a3bb08ca427a08ff996227ecd":["08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"705cdca081fbf23193d7ff6db22fedef9dd7c54f":["60ba444201d2570214b6fcf1d15600dc1a01f548","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","780a676adba1080a3bb08ca427a08ff996227ecd"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"780a676adba1080a3bb08ca427a08ff996227ecd":["705cdca081fbf23193d7ff6db22fedef9dd7c54f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}