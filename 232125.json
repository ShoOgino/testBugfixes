{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(Path,String).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(Path,String).mjava","pathOld":"/dev/null","sourceNew":"  private static Directory openDirectory(Path path, String dirImpl) throws IOException {\n    if (!Files.exists(Objects.requireNonNull(path))) {\n      throw new IllegalArgumentException(\"Index directory doesn't exist.\");\n    }\n\n    Directory dir;\n    if (dirImpl == null || dirImpl.equalsIgnoreCase(\"org.apache.lucene.store.FSDirectory\")) {\n      dir = FSDirectory.open(path);\n    } else {\n      try {\n        Class<?> implClazz = Class.forName(dirImpl);\n        Constructor<?> constr = implClazz.getConstructor(Path.class);\n        if (constr != null) {\n          dir = (Directory) constr.newInstance(path);\n        } else {\n          constr = implClazz.getConstructor(Path.class, LockFactory.class);\n          dir = (Directory) constr.newInstance(path, null);\n        }\n      } catch (Exception e) {\n        log.warn(e.getMessage(), e);\n        throw new IllegalArgumentException(\"Invalid directory implementation class: \" + dirImpl);\n      }\n    }\n    return dir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"265216658b9b02ae56c6ccd3def38eacedbea7d3","date":1593139450,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(Path,String).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openDirectory(Path,String).mjava","sourceNew":"  private static Directory openDirectory(Path path, String dirImpl) throws IOException {\n    if (!Files.exists(Objects.requireNonNull(path))) {\n      throw new IllegalArgumentException(\"Index directory doesn't exist.\");\n    }\n\n    Directory dir;\n    if (dirImpl == null || dirImpl.equalsIgnoreCase(\"org.apache.lucene.store.FSDirectory\")) {\n      dir = FSDirectory.open(path);\n    } else {\n      try {\n        Class<?> implClazz = Class.forName(dirImpl);\n        Constructor<?> constr = implClazz.getConstructor(Path.class);\n        if (constr != null) {\n          dir = (Directory) constr.newInstance(path);\n        } else {\n          constr = implClazz.getConstructor(Path.class, LockFactory.class);\n          dir = (Directory) constr.newInstance(path, null);\n        }\n      } catch (Exception e) {\n        log.warn(\"Invalid directory implementation class: {}\", dirImpl, e);\n        throw new IllegalArgumentException(\"Invalid directory implementation class: \" + dirImpl);\n      }\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory openDirectory(Path path, String dirImpl) throws IOException {\n    if (!Files.exists(Objects.requireNonNull(path))) {\n      throw new IllegalArgumentException(\"Index directory doesn't exist.\");\n    }\n\n    Directory dir;\n    if (dirImpl == null || dirImpl.equalsIgnoreCase(\"org.apache.lucene.store.FSDirectory\")) {\n      dir = FSDirectory.open(path);\n    } else {\n      try {\n        Class<?> implClazz = Class.forName(dirImpl);\n        Constructor<?> constr = implClazz.getConstructor(Path.class);\n        if (constr != null) {\n          dir = (Directory) constr.newInstance(path);\n        } else {\n          constr = implClazz.getConstructor(Path.class, LockFactory.class);\n          dir = (Directory) constr.newInstance(path, null);\n        }\n      } catch (Exception e) {\n        log.warn(e.getMessage(), e);\n        throw new IllegalArgumentException(\"Invalid directory implementation class: \" + dirImpl);\n      }\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"265216658b9b02ae56c6ccd3def38eacedbea7d3":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["265216658b9b02ae56c6ccd3def38eacedbea7d3"]},"commit2Childs":{"265216658b9b02ae56c6ccd3def38eacedbea7d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["265216658b9b02ae56c6ccd3def38eacedbea7d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}