{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayloadCheckQuery() throws Exception {\n    try {\n      assertQueryEquals\n          (\"payload_check\"\n              , \"{!payload_check f=foo_dpf payloads=2}one\"\n              , \"{!payload_check f=foo_dpf payloads=2}two\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayloadCheckQuery() throws Exception {\n    try {\n      assertQueryEquals\n          (\"payload_check\"\n              , \"{!payload_check f=foo_dpf payloads=2}one\"\n              , \"{!payload_check f=foo_dpf payloads=2}two\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","sourceNew":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testPayloadCheckQuery() throws Exception {\n    try {\n      assertQueryEquals\n          (\"payload_check\"\n              , \"{!payload_check f=foo_dpf payloads=2}one\"\n              , \"{!payload_check f=foo_dpf payloads=2}two\"\n          );\n      fail(\"queries should not have been equal\");\n    } catch(AssertionFailedError e) {\n      assertTrue(\"queries were not equal, as expected\", true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","sourceNew":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","sourceNew":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testPayloadCheckQuery().mjava","sourceNew":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","sourceOld":"  public void testPayloadCheckQuery() throws Exception {\n    expectThrows(AssertionFailedError.class, \"queries should not have been equal\",\n        () -> assertQueryEquals\n            (\"payload_check\"\n                , \"{!payload_check f=foo_dpf payloads=2}one\"\n                , \"{!payload_check f=foo_dpf payloads=2}two\"\n            )\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["e9017cf144952056066919f1ebc7897ff9bd71b1","464e7336798bc8a1281d5cf610c649c5a0784e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}