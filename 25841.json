{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(String,String,String...).mjava","sourceNew":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name);\n  }\n\n","sourceOld":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(String registry, String metricName, String... metricPath) {\n    return registry(registry).histogram(mkName(metricName, metricPath));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","sourceNew":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name, histogramSupplier);\n  }\n\n","sourceOld":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","sourceNew":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name, histogramSupplier);\n  }\n\n","sourceOld":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","sourceNew":"  /**\n   * Create or get an existing named {@link Histogram}\n   *\n   * @param registry   registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name, histogramSupplier);\n  }\n\n","sourceOld":"  /**\n   * Create or get an existing named {@link Histogram}\n   * @param registry registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name, histogramSupplier);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrMetricsContext,String,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#histogram(SolrInfoBean,String,String,String...).mjava","sourceNew":"  /**\n   * Create or get an existing named {@link Histogram}\n   *\n   * @param registry   registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrMetricsContext context, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(name);\n    }\n    return registry(registry).histogram(name, histogramSupplier);\n  }\n\n","sourceOld":"  /**\n   * Create or get an existing named {@link Histogram}\n   *\n   * @param registry   registry name\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @return existing or a newly created {@link Histogram}\n   */\n  public Histogram histogram(SolrInfoBean info, String registry, String metricName, String... metricPath) {\n    final String name = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(name);\n    }\n    return registry(registry).histogram(name, histogramSupplier);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}