{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testLRUEviction().mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testLRUEviction().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUFilterCache filterCache = new LRUFilterCache(2, 100000);\n\n    final Filter blue = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    final Filter red = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter green = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"green\")));\n\n    assertEquals(Collections.emptySet(), filterCache.cachedFilters());\n\n    // the filter is not cached on any segment: no changes\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, NEVER_CACHE)), 1);\n    assertEquals(Collections.emptySet(), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Collections.singleton(red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, green)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, green)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, blue)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, blue)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(green, blue)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, NEVER_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(green, blue)), filterCache.cachedFilters());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6ade6517735e5fca21539f4ff32151bf0a89b8","date":1418291454,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testLRUEviction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testLRUEviction().mjava","sourceNew":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUFilterCache filterCache = new LRUFilterCache(2, 100000);\n\n    final Filter blue = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    final Filter red = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter green = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"green\")));\n\n    assertEquals(Collections.emptyList(), filterCache.cachedFilters());\n\n    // the filter is not cached on any segment: no changes\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, NEVER_CACHE)), 1);\n    assertEquals(Collections.emptyList(), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Collections.singletonList(red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, green), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(green, red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, blue), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, blue), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(blue, green), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, NEVER_CACHE)), 1);\n    assertEquals(Arrays.asList(blue, green), filterCache.cachedFilters());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUFilterCache filterCache = new LRUFilterCache(2, 100000);\n\n    final Filter blue = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    final Filter red = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter green = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"green\")));\n\n    assertEquals(Collections.emptySet(), filterCache.cachedFilters());\n\n    // the filter is not cached on any segment: no changes\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, NEVER_CACHE)), 1);\n    assertEquals(Collections.emptySet(), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Collections.singleton(red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, green)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, green)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, blue)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(red, blue)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(green, blue)), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, NEVER_CACHE)), 1);\n    assertEquals(new HashSet<>(Arrays.asList(green, blue)), filterCache.cachedFilters());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testLRUEviction().mjava","sourceNew":null,"sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUFilterCache filterCache = new LRUFilterCache(2, 100000);\n\n    final Filter blue = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    final Filter red = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter green = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"green\")));\n\n    assertEquals(Collections.emptyList(), filterCache.cachedFilters());\n\n    // the filter is not cached on any segment: no changes\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, NEVER_CACHE)), 1);\n    assertEquals(Collections.emptyList(), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Collections.singletonList(red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, green), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(green, red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, blue), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, blue), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(blue, green), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, NEVER_CACHE)), 1);\n    assertEquals(Arrays.asList(blue, green), filterCache.cachedFilters());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testLRUEviction().mjava","sourceNew":null,"sourceOld":"  public void testLRUEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final LRUFilterCache filterCache = new LRUFilterCache(2, 100000);\n\n    final Filter blue = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    final Filter red = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"red\")));\n    final Filter green = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"green\")));\n\n    assertEquals(Collections.emptyList(), filterCache.cachedFilters());\n\n    // the filter is not cached on any segment: no changes\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, NEVER_CACHE)), 1);\n    assertEquals(Collections.emptyList(), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Collections.singletonList(red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, green), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(green, red), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, blue), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(blue, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(red, blue), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(green, FilterCachingPolicy.ALWAYS_CACHE)), 1);\n    assertEquals(Arrays.asList(blue, green), filterCache.cachedFilters());\n\n    searcher.search(new ConstantScoreQuery(filterCache.doCache(red, NEVER_CACHE)), 1);\n    assertEquals(Arrays.asList(blue, green), filterCache.cachedFilters());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9d6ade6517735e5fca21539f4ff32151bf0a89b8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}