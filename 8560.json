{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seek(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir, true);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3cc749c053615f5871f3b95715fe292f34e70a53":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"2553b00f699380c64959ccb27991289aae87be2e":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","fd9cc9d77712aba3662f24632df7539ab75e3667"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","5f4e87790277826a2aea119328600dfb07761f32"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["3cc749c053615f5871f3b95715fe292f34e70a53","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}