{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR, null);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","sourceNew":null,"sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","sourceNew":null,"sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean).mjava","sourceNew":null,"sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7b91922b55d15444d554721b352861d028eb8278"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}