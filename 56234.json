{"path":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba3a184cc785359756dd0a77bbdb0e4f06bf727b","date":1344450045,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["c26f00b574427b55127e869b935845554afde1fa"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c26f00b574427b55127e869b935845554afde1fa","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b"]},"commit2Childs":{"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}