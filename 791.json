{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","bugFix":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#printStats(PrintStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","sourceNew":"  public void printStats(PrintStream out) {\n    out.println(\"Number of keys = \" + Integer.toString(length));\n    out.println(\"Node count = \" + Integer.toString(freenode));\n    // System.out.println(\"Array length = \" + Integer.toString(eq.length));\n    out.println(\"Key Array length = \" + Integer.toString(kv.length()));\n\n    /*\n     * for(int i=0; i<kv.length(); i++) if ( kv.get(i) != 0 )\n     * System.out.print(kv.get(i)); else System.out.println(\"\");\n     * System.out.println(\"Keys:\"); for(Enumeration enum = keys();\n     * enum.hasMoreElements(); ) System.out.println(enum.nextElement());\n     */\n\n  }\n/*\n  public static void main(String[] args) {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats(System.out);\n  }\n  */\n\n","sourceOld":"  public static void main(String[] args) {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws Exception {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) {\n    TernaryTree tt = new TernaryTree();\n    tt.insert(\"Carlos\", 'C');\n    tt.insert(\"Car\", 'r');\n    tt.insert(\"palos\", 'l');\n    tt.insert(\"pa\", 'p');\n    tt.trimToSize();\n    System.out.println((char) tt.find(\"Car\"));\n    System.out.println((char) tt.find(\"Carlos\"));\n    System.out.println((char) tt.find(\"alto\"));\n    tt.printStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}