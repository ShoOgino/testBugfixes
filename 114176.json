{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"/dev/null","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c850a9faa7f2268d78aa6e8a611d281658781a99","date":1329403874,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException, TimeoutException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9583322dbc8650e3cd32d936c0b3e31eefadba","date":1344482424,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. Core:\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. Core:\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. Core:\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. Core:\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40c478fcb4e093ac431407a8db2896ac9c867f33","date":1344540116,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. Core:\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. Core:\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed\");\n    } else {\n      log.info(\"Replaying buffered documents\");\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. Core:\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. Core:\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      future.get();\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c52ad29218ee436d52c57bf0829b98acad9de379","date":1383401544,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#replay(UpdateLog).mjava","sourceNew":"  private Future<RecoveryInfo> replay(SolrCore core)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = core.getUpdateHandler().getUpdateLog().applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n    }\n    \n    // solrcloud_debug\n    if (Boolean.getBoolean(\"solr.cloud.debug\")) {\n      try {\n        RefCounted<SolrIndexSearcher> searchHolder = core\n            .getNewestSearcher(false);\n        SolrIndexSearcher searcher = searchHolder.get();\n        try {\n          System.out.println(core.getCoreDescriptor().getCoreContainer()\n              .getZkController().getNodeName()\n              + \" replayed \"\n              + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n        } finally {\n          searchHolder.decref();\n        }\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n      }\n    }\n    \n    return future;\n  }\n\n","sourceOld":"  private Future<RecoveryInfo> replay(UpdateLog ulog)\n      throws InterruptedException, ExecutionException {\n    Future<RecoveryInfo> future = ulog.applyBufferedUpdates();\n    if (future == null) {\n      // no replay needed\\\n      log.info(\"No replay needed. core=\" + coreName);\n    } else {\n      log.info(\"Replaying buffered documents. core=\" + coreName);\n      // wait for replay\n      RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n    }\n    \n    // solrcloud_debug\n//    try {\n//      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n//      SolrIndexSearcher searcher = searchHolder.get();\n//      try {\n//        System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName() + \" replayed \"\n//            + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//      } finally {\n//        searchHolder.decref();\n//      }\n//    } catch (Exception e) {\n//      \n//    }\n    \n    return future;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c850a9faa7f2268d78aa6e8a611d281658781a99":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ef9583322dbc8650e3cd32d936c0b3e31eefadba":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["40c478fcb4e093ac431407a8db2896ac9c867f33"],"40c478fcb4e093ac431407a8db2896ac9c867f33":["ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","40c478fcb4e093ac431407a8db2896ac9c867f33"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c850a9faa7f2268d78aa6e8a611d281658781a99","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"c52ad29218ee436d52c57bf0829b98acad9de379":["a6378064655e76cd7b908b1cab4ce425b384b508"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c850a9faa7f2268d78aa6e8a611d281658781a99"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","40c478fcb4e093ac431407a8db2896ac9c867f33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c52ad29218ee436d52c57bf0829b98acad9de379"]},"commit2Childs":{"c850a9faa7f2268d78aa6e8a611d281658781a99":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ef9583322dbc8650e3cd32d936c0b3e31eefadba":["40c478fcb4e093ac431407a8db2896ac9c867f33","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["c52ad29218ee436d52c57bf0829b98acad9de379"],"40c478fcb4e093ac431407a8db2896ac9c867f33":["a6378064655e76cd7b908b1cab4ce425b384b508","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c850a9faa7f2268d78aa6e8a611d281658781a99","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"c52ad29218ee436d52c57bf0829b98acad9de379":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["ef9583322dbc8650e3cd32d936c0b3e31eefadba","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}