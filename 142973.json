{"path":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setup(Http2SolrClient).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setup(Http2SolrClient).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        if (cores.getAuthenticationPlugin() == null) {\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c92ac83d1c2f8811300bb0df797465cca0aa8e92","date":1579710745,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setup(Http2SolrClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setup(Http2SolrClient).mjava","sourceNew":"  @Override\n  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        log.trace(\"onQueued: {}\", request);\n        if (cores.getAuthenticationPlugin() == null) {\n          log.trace(\"no authentication plugin, skipping\");\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n\n","sourceOld":"  @Override\n  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        if (cores.getAuthenticationPlugin() == null) {\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setup(Http2SolrClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#setup(Http2SolrClient).mjava","sourceNew":"  @Override\n  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        log.trace(\"onQueued: {}\", request);\n        if (cores.getAuthenticationPlugin() == null) {\n          log.trace(\"no authentication plugin, skipping\");\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          }\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n          }\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n\n","sourceOld":"  @Override\n  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        log.trace(\"onQueued: {}\", request);\n        if (cores.getAuthenticationPlugin() == null) {\n          log.trace(\"no authentication plugin, skipping\");\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c92ac83d1c2f8811300bb0df797465cca0aa8e92":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"c92ac83d1c2f8811300bb0df797465cca0aa8e92":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}