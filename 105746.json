{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","sourceNew":"  public void testRangeQuery() throws ParseException {\n    for (int i = 0; i < rangeInput.length; i++) {\n      assertEquals(\"Testing ranges with analyzer \" + a.getClass() + \", input string: \"\n          + rangeInput[i], rangeExpected[i], parseWithAnalyzingQueryParser(rangeInput[i], a));\n    }\n  }\n\n","sourceOld":"  public void testRangeQuery() throws ParseException {\n    for (int i = 0; i < rangeInput.length; i++) {\n      assertEquals(\"Testing ranges with analyzer \" + a.getClass() + \", input string: \"\n          + rangeInput[i], rangeExpected[i], parseWithAnalyzingQueryParser(rangeInput[i], a));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","sourceNew":"  public void testRangeQuery() throws ParseException {\n    for (int i = 0; i < rangeInput.length; i++) {\n      assertEquals(\"Testing ranges with analyzer \" + a.getClass() + \", input string: \"\n          + rangeInput[i], rangeExpected[i], parseWithAnalyzingQueryParser(rangeInput[i], a, false));\n    }\n  }\n\n","sourceOld":"  public void testRangeQuery() throws ParseException {\n    for (int i = 0; i < rangeInput.length; i++) {\n      assertEquals(\"Testing ranges with analyzer \" + a.getClass() + \", input string: \"\n          + rangeInput[i], rangeExpected[i], parseWithAnalyzingQueryParser(rangeInput[i], a));\n    }\n  }\n\n","bugFix":["874880417e0b2612f777ecd0afe39e0d90486752"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","sourceNew":null,"sourceOld":"  public void testRangeQuery() throws ParseException {\n    for (int i = 0; i < rangeInput.length; i++) {\n      assertEquals(\"Testing ranges with analyzer \" + a.getClass() + \", input string: \"\n          + rangeInput[i], rangeExpected[i], parseWithAnalyzingQueryParser(rangeInput[i], a, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testRangeQuery().mjava","sourceNew":null,"sourceOld":"  public void testRangeQuery() throws ParseException {\n    for (int i = 0; i < rangeInput.length; i++) {\n      assertEquals(\"Testing ranges with analyzer \" + a.getClass() + \", input string: \"\n          + rangeInput[i], rangeExpected[i], parseWithAnalyzingQueryParser(rangeInput[i], a, false));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["046829b17e246624c179b94d5a20cb53fa945e87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["046829b17e246624c179b94d5a20cb53fa945e87","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["046829b17e246624c179b94d5a20cb53fa945e87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}