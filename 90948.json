{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testFilterRamBytesUsed().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testFilterRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testFilterRamBytesUsed().mjava","sourceNew":"  public void testFilterRamBytesUsed() {\n    final Query simpleQuery = new TermQuery(new Term(\"some_field\", \"some_term\"));\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(simpleQuery);\n    final long ramBytesUsed = LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n    // we cannot assert exactly that the constant is correct since actual\n    // memory usage depends on JVM implementations and settings (eg. UseCompressedOops)\n    assertEquals(actualRamBytesUsed, ramBytesUsed, actualRamBytesUsed / 2);\n  }\n\n","sourceOld":"  public void testFilterRamBytesUsed() {\n    final Filter simpleFilter = new QueryWrapperFilter(new TermQuery(new Term(\"some_field\", \"some_term\")));\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(simpleFilter);\n    final long ramBytesUsed = LRUFilterCache.FILTER_DEFAULT_RAM_BYTES_USED;\n    // we cannot assert exactly that the constant is correct since actual\n    // memory usage depends on JVM implementations and settings (eg. UseCompressedOops)\n    assertEquals(actualRamBytesUsed, ramBytesUsed, actualRamBytesUsed / 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testFilterRamBytesUsed().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterRamBytesUsed() {\n    final Query simpleQuery = new TermQuery(new Term(\"some_field\", \"some_term\"));\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(simpleQuery);\n    final long ramBytesUsed = LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n    // we cannot assert exactly that the constant is correct since actual\n    // memory usage depends on JVM implementations and settings (eg. UseCompressedOops)\n    assertEquals(actualRamBytesUsed, ramBytesUsed, actualRamBytesUsed / 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31781f87f2e572b5c28caf2f83400abe6c05fe7","date":1511944192,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testFilterRamBytesUsed().mjava","sourceNew":null,"sourceOld":"  public void testFilterRamBytesUsed() {\n    final Query simpleQuery = new TermQuery(new Term(\"some_field\", \"some_term\"));\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(simpleQuery);\n    final long ramBytesUsed = LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n    // we cannot assert exactly that the constant is correct since actual\n    // memory usage depends on JVM implementations and settings (eg. UseCompressedOops)\n    assertEquals(actualRamBytesUsed, ramBytesUsed, actualRamBytesUsed / 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testFilterRamBytesUsed().mjava","sourceNew":null,"sourceOld":"  public void testFilterRamBytesUsed() {\n    final Query simpleQuery = new TermQuery(new Term(\"some_field\", \"some_term\"));\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(simpleQuery);\n    final long ramBytesUsed = LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n    // we cannot assert exactly that the constant is correct since actual\n    // memory usage depends on JVM implementations and settings (eg. UseCompressedOops)\n    assertEquals(actualRamBytesUsed, ramBytesUsed, actualRamBytesUsed / 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","b31781f87f2e572b5c28caf2f83400abe6c05fe7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1aad05eeff7818b0833c02ac6b743aa72054963b"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["1aad05eeff7818b0833c02ac6b743aa72054963b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b31781f87f2e572b5c28caf2f83400abe6c05fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}