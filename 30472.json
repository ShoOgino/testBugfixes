{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List clauses = new ArrayList();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}