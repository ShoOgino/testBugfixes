{"path":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSampling() throws Exception {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        // complements return counts for all ordinals, so force ALL_PARENTS indexing\n        // so that it's easier to compare\n        FacetIndexingParams fip = getFacetIndexingParams(partitionSize, true);\n        initIndex(fip);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, fip); \n        FacetsCollector fc = FacetsCollector.create(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, fc);\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, fip); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial = 0; nTrial < RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (AssertionError e) {\n            if (nTrial >= RETRIES - 1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSampling() throws Exception {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        // complements return counts for all ordinals, so force ALL_PARENTS indexing\n        // so that it's easier to compare\n        FacetIndexingParams fip = getFacetIndexingParams(partitionSize, true);\n        initIndex(fip);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, fip); \n        FacetsCollector fc = FacetsCollector.create(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, fc);\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, fip); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial = 0; nTrial < RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (AssertionError e) {\n            if (nTrial >= RETRIES - 1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b31c82c6df2339d0c31b592f919be77383dac10","date":1369815843,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSampling() throws Exception {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        // complements return counts for all ordinals, so force ALL_PARENTS indexing\n        // so that it's easier to compare\n        FacetIndexingParams fip = getFacetIndexingParams(partitionSize, true);\n        initIndex(fip);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, fip); \n        FacetsCollector fc = FacetsCollector.create(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, fc);\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, fip); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial = 0; nTrial < RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, useRandomSampler, samplingSearchParams);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (AssertionError e) {\n            if (nTrial >= RETRIES - 1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSampling() throws Exception {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        // complements return counts for all ordinals, so force ALL_PARENTS indexing\n        // so that it's easier to compare\n        FacetIndexingParams fip = getFacetIndexingParams(partitionSize, true);\n        initIndex(fip);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, fip); \n        FacetsCollector fc = FacetsCollector.create(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, fc);\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, fip); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial = 0; nTrial < RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (AssertionError e) {\n            if (nTrial >= RETRIES - 1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","sourceNew":null,"sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSampling() throws Exception {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        // complements return counts for all ordinals, so force ALL_PARENTS indexing\n        // so that it's easier to compare\n        FacetIndexingParams fip = getFacetIndexingParams(partitionSize, true);\n        initIndex(fip);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, fip); \n        FacetsCollector fc = FacetsCollector.create(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, fc);\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, fip); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial = 0; nTrial < RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, useRandomSampler, samplingSearchParams);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (AssertionError e) {\n            if (nTrial >= RETRIES - 1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#testCountUsingSampling().mjava","sourceNew":null,"sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSampling() throws Exception {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        // complements return counts for all ordinals, so force ALL_PARENTS indexing\n        // so that it's easier to compare\n        FacetIndexingParams fip = getFacetIndexingParams(partitionSize, true);\n        initIndex(fip);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, fip); \n        FacetsCollector fc = FacetsCollector.create(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, fc);\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, fip); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial = 0; nTrial < RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, useRandomSampler, samplingSearchParams);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (AssertionError e) {\n            if (nTrial >= RETRIES - 1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["4b31c82c6df2339d0c31b592f919be77383dac10"],"4b31c82c6df2339d0c31b592f919be77383dac10":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["4b31c82c6df2339d0c31b592f919be77383dac10","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["4b31c82c6df2339d0c31b592f919be77383dac10"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"4b31c82c6df2339d0c31b592f919be77383dac10":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}