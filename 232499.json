{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFields().get(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    addDataSource(e);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93","29df09ecb6b96d58f34447be89f88a0c067fb3a9","33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e46bf22400b9cd12540418cd46bfa17c100f983a","date":1225303526,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFields().get(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    addDataSource(e);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.setParentEntity(e);\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFields().get(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    addDataSource(e);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29df09ecb6b96d58f34447be89f88a0c067fb3a9","date":1225344078,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFieldOrNull(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    addDataSource(e);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFields().get(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    addDataSource(e);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.setParentEntity(e);\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","e46bf22400b9cd12540418cd46bfa17c100f983a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33c5df47ecbf734182bdfec8f59154a8dbecc2e3","date":1226037101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFieldOrNull(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFieldOrNull(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    addDataSource(e);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e886fb6afe33a296f3d21a4c18694ecb64545fab","date":1226485789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        if (schema != null) {\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean\n                    .toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n\n            try {\n              f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                      .getTypeName());\n              f.allAttributes.put(MULTI_VALUED, \"true\");\n              f.multiValued = true;\n            } catch (RuntimeException e2) {\n              LOG.info(\"Field in data-config.xml - \" + f.getName()\n                      + \" not found in schema.xml\");\n              f.toWrite = false;\n            }\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        SchemaField schemaField = schema.getFieldOrNull(f.getName());\n        if (schemaField != null) {\n          f.multiValued = schemaField.multiValued();\n          f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                  .multiValued()));\n          f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n          f.allAttributes.put(\"indexed\", Boolean\n                  .toString(schemaField.indexed()));\n          f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n          f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n        } else {\n\n          try {\n            f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                    .getTypeName());\n            f.allAttributes.put(MULTI_VALUED, \"true\");\n            f.multiValued = true;\n          } catch (RuntimeException e2) {\n            LOG.info(\"Field in data-config.xml - \" + f.getName()\n                    + \" not found in schema.xml\");\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78ba4a4cc84cf69e69a7a156d7180ff65606ca93","date":1227165581,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null)  {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if(schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        f.nameOrColName = f.getName();\n        if (schema != null) {\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean\n                    .toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n\n            try {\n              f.allAttributes.put(TYPE, schema.getDynamicFieldType(f.getName())\n                      .getTypeName());\n              f.allAttributes.put(MULTI_VALUED, \"true\");\n              f.multiValued = true;\n            } catch (RuntimeException e2) {\n              LOG.info(\"Field in data-config.xml - \" + f.getName()\n                      + \" not found in schema.xml\");\n              f.toWrite = false;\n            }\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":["e886fb6afe33a296f3d21a4c18694ecb64545fab","4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd42c8ecc9f8a8e590c5526544a77258089ca23f","date":1229189880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null)  {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if(schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0691086ff7220752f6abac58cff6e81eeb1ba68","date":1241004208,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65f4e997b946a4eadce22b758749046a63ba2eff","date":1263282580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2857ac5efc2451a3aa3f897fe792ae935a7e9bab","date":1263283234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    if (e.pk != null)\n      e.primaryKeys = e.pk.split(\",\");\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#initEntity(DataConfig.Entity,Map[String,DataConfig.Field],boolean).mjava","sourceNew":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","sourceOld":"  private void initEntity(DataConfig.Entity e,\n                          Map<String, DataConfig.Field> fields, boolean docRootFound) {\n    e.allAttributes.put(DATA_SRC, e.dataSource);\n\n    if (!docRootFound && !\"false\".equals(e.docRoot)) {\n      // if in this chain no document root is found()\n      e.isDocRoot = true;\n    }\n    if (e.allAttributes.get(\"threads\") != null) {\n      if(docRootFound) throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"'threads' not allowed below rootEntity \");\n      config.isMultiThreaded = true;      \n    }\n\n    if (e.fields != null) {\n      for (DataConfig.Field f : e.fields) {\n        if (schema != null) {\n          if(f.name != null && f.name.contains(\"${\")){\n            f.dynamicName = true;\n            continue;\n          }\n          SchemaField schemaField = schema.getFieldOrNull(f.getName());\n          if (schemaField == null) {\n            schemaField = config.lowerNameVsSchemaField.get(f.getName().toLowerCase());\n            if (schemaField != null) f.name = schemaField.getName();\n          }\n          if (schemaField != null) {\n            f.multiValued = schemaField.multiValued();\n            f.allAttributes.put(MULTI_VALUED, Boolean.toString(schemaField\n                    .multiValued()));\n            f.allAttributes.put(TYPE, schemaField.getType().getTypeName());\n            f.allAttributes.put(\"indexed\", Boolean.toString(schemaField.indexed()));\n            f.allAttributes.put(\"stored\", Boolean.toString(schemaField.stored()));\n            f.allAttributes.put(\"defaultValue\", schemaField.getDefaultValue());\n          } else {\n            f.toWrite = false;\n          }\n        }\n        fields.put(f.getName(), f);\n        f.entity = e;\n        f.allAttributes.put(\"boost\", f.boost.toString());\n        f.allAttributes.put(\"toWrite\", Boolean.toString(f.toWrite));\n        e.allFieldsList.add(Collections.unmodifiableMap(f.allAttributes));\n      }\n    }\n    e.allFieldsList = Collections.unmodifiableList(e.allFieldsList);\n    e.allAttributes = Collections.unmodifiableMap(e.allAttributes);\n\n    if (e.entities == null)\n      return;\n    for (DataConfig.Entity e1 : e.entities) {\n      e1.parentEntity = e;\n      initEntity(e1, fields, e.isDocRoot || docRootFound);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"78ba4a4cc84cf69e69a7a156d7180ff65606ca93":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"65f4e997b946a4eadce22b758749046a63ba2eff":["e0691086ff7220752f6abac58cff6e81eeb1ba68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"e46bf22400b9cd12540418cd46bfa17c100f983a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"ad94625fb8d088209f46650c8097196fec67f00c":["2857ac5efc2451a3aa3f897fe792ae935a7e9bab"],"e0691086ff7220752f6abac58cff6e81eeb1ba68":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"2857ac5efc2451a3aa3f897fe792ae935a7e9bab":["65f4e997b946a4eadce22b758749046a63ba2eff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["e0691086ff7220752f6abac58cff6e81eeb1ba68"],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"78ba4a4cc84cf69e69a7a156d7180ff65606ca93":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"65f4e997b946a4eadce22b758749046a63ba2eff":["2857ac5efc2451a3aa3f897fe792ae935a7e9bab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3"],"e46bf22400b9cd12540418cd46bfa17c100f983a":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"33c5df47ecbf734182bdfec8f59154a8dbecc2e3":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"e0691086ff7220752f6abac58cff6e81eeb1ba68":["65f4e997b946a4eadce22b758749046a63ba2eff"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2857ac5efc2451a3aa3f897fe792ae935a7e9bab":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}