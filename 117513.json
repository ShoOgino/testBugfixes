{"path":"src/java/org/apache/lucene/search/regex/RegexTermEnum#RegexTermEnum(IndexReader,Term).mjava","commits":[{"id":"c35c5c6cdce2b681af3103a391f066040c1ef6c4","date":1131786206,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/regex/RegexTermEnum#RegexTermEnum(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  public RegexTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    field = term.field();\n    String text = term.text();\n\n    pattern = Pattern.compile(text);\n\n    // Find the first regex character position, to find the\n    // maximum prefix to use for term enumeration\n    int index = 0;\n    while (index < text.length()) {\n      char c = text.charAt(index);\n\n      // TODO: improve the logic here.  There are other types of patterns\n      // that could break this, such as \"\\d*\" and \"\\*abc\"\n      if (c == '*' || c == '[' || c == '?' || c == '.') break;\n\n      index++;\n    }\n\n    pre = text.substring(0, index);\n\n    setEnum(reader.terms(new Term(term.field(), pre)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a396ad9453d4074487e4b3c7ea19c7697bfdd5","date":1132823388,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/regex/RegexTermEnum#RegexTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/regex/RegexTermEnum#RegexTermEnum(IndexReader,Term).mjava","sourceNew":"  public RegexTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    field = term.field();\n    String text = term.text();\n\n    pattern = Pattern.compile(text);\n\n    // Find the first regex character position, to find the\n    // maximum prefix to use for term enumeration\n    int index = 0;\n    while (index < text.length()) {\n      char c = text.charAt(index);\n\n      if (!Character.isLetterOrDigit(c)) break;\n\n      index++;\n    }\n\n    pre = text.substring(0, index);\n\n    setEnum(reader.terms(new Term(term.field(), pre)));\n  }\n\n","sourceOld":"  public RegexTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    field = term.field();\n    String text = term.text();\n\n    pattern = Pattern.compile(text);\n\n    // Find the first regex character position, to find the\n    // maximum prefix to use for term enumeration\n    int index = 0;\n    while (index < text.length()) {\n      char c = text.charAt(index);\n\n      // TODO: improve the logic here.  There are other types of patterns\n      // that could break this, such as \"\\d*\" and \"\\*abc\"\n      if (c == '*' || c == '[' || c == '?' || c == '.') break;\n\n      index++;\n    }\n\n    pre = text.substring(0, index);\n\n    setEnum(reader.terms(new Term(term.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74be754ec3ab6906922b673bf951696c442123b2","date":1135778260,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/regex/RegexTermEnum#RegexTermEnum(IndexReader,Term).mjava","sourceNew":null,"sourceOld":"  public RegexTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    field = term.field();\n    String text = term.text();\n\n    pattern = Pattern.compile(text);\n\n    // Find the first regex character position, to find the\n    // maximum prefix to use for term enumeration\n    int index = 0;\n    while (index < text.length()) {\n      char c = text.charAt(index);\n\n      if (!Character.isLetterOrDigit(c)) break;\n\n      index++;\n    }\n\n    pre = text.substring(0, index);\n\n    setEnum(reader.terms(new Term(term.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74be754ec3ab6906922b673bf951696c442123b2":["c2a396ad9453d4074487e4b3c7ea19c7697bfdd5"],"c2a396ad9453d4074487e4b3c7ea19c7697bfdd5":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74be754ec3ab6906922b673bf951696c442123b2"]},"commit2Childs":{"74be754ec3ab6906922b673bf951696c442123b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2a396ad9453d4074487e4b3c7ea19c7697bfdd5":["74be754ec3ab6906922b673bf951696c442123b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["c2a396ad9453d4074487e4b3c7ea19c7697bfdd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}