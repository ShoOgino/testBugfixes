{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      String[] altTexts = doc.getValues(alternateField);\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f7e48a66cd0e0ab8ddb827c213e9480e738092d","date":1326635455,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        if( alternateFieldLen <= 0 ){\n          docSummaries.add(fieldName, altTexts);\n        }\n        else{\n          List<String> altList = new ArrayList<String>();\n          int len = 0;\n          for( String altText: altTexts ){\n            altList.add( len + altText.length() > alternateFieldLen ?\n                new String(altText.substring( 0, alternateFieldLen - len )) : altText );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n          docSummaries.add(fieldName, altList);\n        }\n      }\n    }\n  }\n\n","bugFix":["5df1793b9dbc0f17ba1d1dddb8a15748fdc3aaf3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["2f7e48a66cd0e0ab8ddb827c213e9480e738092d","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f7e48a66cd0e0ab8ddb827c213e9480e738092d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["2f7e48a66cd0e0ab8ddb827c213e9480e738092d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2f7e48a66cd0e0ab8ddb827c213e9480e738092d":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2f7e48a66cd0e0ab8ddb827c213e9480e738092d"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}