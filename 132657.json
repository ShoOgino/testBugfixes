{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    Random random = newRandom();\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    Random random = newRandom();\n    int num=100;\n\n    Directory indexA = newDirectory(random);\n    Directory indexB = newDirectory(random);\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    Random random = newRandom();\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    Random random = newRandom();\n    int num=100;\n\n    Directory indexA = newDirectory(random);\n    Directory indexB = newDirectory(random);\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ed5989ef2bc7bbd155dbff1e023ea849003dbf7","date":1292688238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d16aff6229cca84309d03d047cd718946bd4b43","date":1296516600,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","2ed5989ef2bc7bbd155dbff1e023ea849003dbf7"],"7d16aff6229cca84309d03d047cd718946bd4b43":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c19f985e36a65cc969e8e564fe337a0d41512075":["2ed5989ef2bc7bbd155dbff1e023ea849003dbf7"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["7d16aff6229cca84309d03d047cd718946bd4b43"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7d16aff6229cca84309d03d047cd718946bd4b43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7d16aff6229cca84309d03d047cd718946bd4b43"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ed5989ef2bc7bbd155dbff1e023ea849003dbf7":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","2ed5989ef2bc7bbd155dbff1e023ea849003dbf7"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7d16aff6229cca84309d03d047cd718946bd4b43","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7d16aff6229cca84309d03d047cd718946bd4b43":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"c19f985e36a65cc969e8e564fe337a0d41512075":["7d16aff6229cca84309d03d047cd718946bd4b43"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"2ed5989ef2bc7bbd155dbff1e023ea849003dbf7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"962d04139994fce5193143ef35615499a9a96d78":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["2ed5989ef2bc7bbd155dbff1e023ea849003dbf7","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}