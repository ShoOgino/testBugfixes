{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","commits":[{"id":"1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30","date":1327936772,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= Lucene3xStoredFieldsReader.FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30"],"e92a321a2612261e1010a4038c8586e30b081552":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["410e066f093e407222d9681429d209084e783149","296df632fd63421ea20756fa11ad36fbc6f4c8a9","1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","e92a321a2612261e1010a4038c8586e30b081552"],"1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}