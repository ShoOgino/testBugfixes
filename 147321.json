{"path":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    switch (type) {\n      case INTEGER:\n        return NumericUtils.intToPrefixCoded(Integer.parseInt(val));\n      case FLOAT:\n        return NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)));\n      case LONG:\n        return NumericUtils.longToPrefixCoded(Long.parseLong(val));\n      case DOUBLE:\n        return NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)));\n      case DATE:\n        return NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    switch (type) {\n      case INTEGER:\n        return NumericUtils.intToPrefixCoded(Integer.parseInt(val));\n      case FLOAT:\n        return NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)));\n      case LONG:\n        return NumericUtils.longToPrefixCoded(Long.parseLong(val));\n      case DOUBLE:\n        return NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)));\n      case DATE:\n        return NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    switch (type) {\n      case INTEGER:\n        return NumericUtils.intToPrefixCoded(Integer.parseInt(val));\n      case FLOAT:\n        return NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)));\n      case LONG:\n        return NumericUtils.longToPrefixCoded(Long.parseLong(val));\n      case DOUBLE:\n        return NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)));\n      case DATE:\n        return NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    switch (type) {\n      case INTEGER:\n        return NumericUtils.intToPrefixCoded(Integer.parseInt(val));\n      case FLOAT:\n        return NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)));\n      case LONG:\n        return NumericUtils.longToPrefixCoded(Long.parseLong(val));\n      case DOUBLE:\n        return NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)));\n      case DATE:\n        return NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    switch (type) {\n      case INTEGER:\n        return NumericUtils.intToPrefixCoded(Integer.parseInt(val));\n      case FLOAT:\n        return NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)));\n      case LONG:\n        return NumericUtils.longToPrefixCoded(Long.parseLong(val));\n      case DOUBLE:\n        return NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)));\n      case DATE:\n        return NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(val), 0, bytes);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)), 0, bytes);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(val), 0, bytes);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)), 0, bytes);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime(), 0, bytes);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    switch (type) {\n      case INTEGER:\n        return NumericUtils.intToPrefixCoded(Integer.parseInt(val));\n      case FLOAT:\n        return NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)));\n      case LONG:\n        return NumericUtils.longToPrefixCoded(Long.parseLong(val));\n      case DOUBLE:\n        return NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)));\n      case DATE:\n        return NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e03427f33820a2bde791de703292dcdfe2d6bdd6","date":1274819813,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(val), 0, bytes);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(val)), 0, bytes);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(val), 0, bytes);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(val)), 0, bytes);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, val).getTime(), 0, bytes);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(String).mjava","sourceNew":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String readableToIndexed(String val) {\n    // TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    readableToIndexed(val, bytes);\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["1da8d55113b689b06716246649de6f62430f15c0"],"e03427f33820a2bde791de703292dcdfe2d6bdd6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["e03427f33820a2bde791de703292dcdfe2d6bdd6","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["e03427f33820a2bde791de703292dcdfe2d6bdd6","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"e03427f33820a2bde791de703292dcdfe2d6bdd6":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1da8d55113b689b06716246649de6f62430f15c0":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}