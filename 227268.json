{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      this.state = state;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f3cc943a60b558035f629c70cdb0808e126fe3","date":1396340517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fa5babdf54832351c1e9c77942f3d8402acf793","date":1412436540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#MemoryFieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"    private MemoryFieldsConsumer(SegmentWriteState state) throws IOException {\n      final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n      out = state.directory.createOutput(fileName, state.context);\n      boolean success = false;\n      try {\n        CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n      this.state = state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f3cc943a60b558035f629c70cdb0808e126fe3":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"5eb2511ababf862ea11e10761c70ee560cd84510":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","04f3cc943a60b558035f629c70cdb0808e126fe3"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"24f89e8a6aac05753cde4c83d62a74356098200d":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9bb9a29a5e71a90295f175df8919802993142c9a":["04f3cc943a60b558035f629c70cdb0808e126fe3","6fa5babdf54832351c1e9c77942f3d8402acf793"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["6fa5babdf54832351c1e9c77942f3d8402acf793"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"6fa5babdf54832351c1e9c77942f3d8402acf793":["04f3cc943a60b558035f629c70cdb0808e126fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"04f3cc943a60b558035f629c70cdb0808e126fe3":["5eb2511ababf862ea11e10761c70ee560cd84510","9bb9a29a5e71a90295f175df8919802993142c9a","6fa5babdf54832351c1e9c77942f3d8402acf793"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["04f3cc943a60b558035f629c70cdb0808e126fe3"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["24f89e8a6aac05753cde4c83d62a74356098200d"],"6fa5babdf54832351c1e9c77942f3d8402acf793":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}