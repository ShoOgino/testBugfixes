{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","commits":[{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return buildCollection(clusterState, message);\n          case DELETE:\n            return removeCollection(clusterState, message);\n          case CREATESHARD:\n            return createShard(clusterState, message);\n          case DELETESHARD:\n            return removeShard(clusterState, message);\n          case ADDREPLICA:\n            return createReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return addReplicaProp(clusterState, message);\n          case DELETEREPLICAPROP:\n            return deleteReplicaProp(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return setShardLeader(clusterState, message);\n            case DELETECORE:\n              return removeCore(clusterState, message);\n            case ADDROUTINGRULE:\n              return addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return buildCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return removeCollection(clusterState, message);\n            case REMOVESHARD:\n              return removeShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return buildCollection(clusterState, message);\n          case DELETE:\n            return removeCollection(clusterState, message);\n          case CREATESHARD:\n            return createShard(clusterState, message);\n          case DELETESHARD:\n            return removeShard(clusterState, message);\n          case ADDREPLICA:\n            return createReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return addReplicaProp(clusterState, message);\n          case DELETEREPLICAPROP:\n            return deleteReplicaProp(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return setShardLeader(clusterState, message);\n            case DELETECORE:\n              return removeCore(clusterState, message);\n            case ADDROUTINGRULE:\n              return addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return buildCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return removeCollection(clusterState, message);\n            case REMOVESHARD:\n              return removeShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["584c1ee8712b5af28075d98028ccab111d6eeda2"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}