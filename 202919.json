{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","commits":[{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 300,\" +\n        \"      'totaldisk': 4700,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1651,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'autoscalingJson': {\" +\n        \"     'cluster-preferences': [\" +\n        \"       { 'maximize': 'freedisk'},\" +\n        \"       { 'minimize': 'cores', 'precision': 3}\" +\n        \"     ]\" +\n        \"   }\" +\n        \"}\";\n\n    String clusterState = \"{\\n\" +\n        \"  \\\"c1\\\" : {\\n\" +\n        \"    \\\"router\\\":{\\\"name\\\":\\\"compositeId\\\"},\\n\" +\n        \"    \\\"maxShardsPerNode\\\":-1,\\n\" +\n        \"    \\\"shards\\\" : {\\n\" +\n        \"      \\\"s1\\\" :  {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      },\\n\" +\n        \"      \\\"s2\\\" : {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      }\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    Map m = (Map) Utils.fromJSONString(dataproviderdata);\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState.getBytes(Charset.forName(\"UTF-8\")), getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n\n    ZkNodeProps message = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n        COLLECTION_PROP, \"c1\",\n        SHARD_ID_PROP, \"s1\",\n        REPLICA_TYPE, Replica.Type.NRT.toString()\n    );\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 300,\" +\n        \"      'totaldisk': 4700,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1651,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n    String clusterState = \"{\\n\" +\n        \"  \\\"c1\\\" : {\\n\" +\n        \"    \\\"router\\\":{\\\"name\\\":\\\"compositeId\\\"},\\n\" +\n        \"    \\\"maxShardsPerNode\\\":-1,\\n\" +\n        \"    \\\"shards\\\" : {\\n\" +\n        \"      \\\"s1\\\" :  {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      },\\n\" +\n        \"      \\\"s2\\\" : {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      }\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    Map m = (Map) Utils.fromJSONString(dataproviderdata);\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState.getBytes(Charset.forName(\"UTF-8\")), getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 300,\" +\n        \"      'totaldisk': 4700,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1651,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'autoscalingJson': {\" +\n        \"     'cluster-preferences': [\" +\n        \"       { 'maximize': 'freedisk'},\" +\n        \"       { 'minimize': 'cores', 'precision': 3}\" +\n        \"     ]\" +\n        \"   }\" +\n        \"}\";\n\n    String clusterState = \"{\\n\" +\n        \"  \\\"c1\\\" : {\\n\" +\n        \"    \\\"router\\\":{\\\"name\\\":\\\"compositeId\\\"},\\n\" +\n        \"    \\\"maxShardsPerNode\\\":-1,\\n\" +\n        \"    \\\"shards\\\" : {\\n\" +\n        \"      \\\"s1\\\" :  {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      },\\n\" +\n        \"      \\\"s2\\\" : {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      }\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    Map m = (Map) Utils.fromJSONString(dataproviderdata);\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : null;\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState.getBytes(Charset.forName(\"UTF-8\")), getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n\n    ZkNodeProps message = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n        COLLECTION_PROP, \"c1\",\n        SHARD_ID_PROP, \"s1\",\n        REPLICA_TYPE, Replica.Type.NRT.toString()\n    );\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 300,\" +\n        \"      'totaldisk': 4700,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'totaldisk': 1200,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1651,\" +\n        \"      'totaldisk': 1700,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n    String clusterState = \"{\\n\" +\n        \"  \\\"c1\\\" : {\\n\" +\n        \"    \\\"router\\\":{\\\"name\\\":\\\"compositeId\\\"},\\n\" +\n        \"    \\\"maxShardsPerNode\\\":-1,\\n\" +\n        \"    \\\"shards\\\" : {\\n\" +\n        \"      \\\"s1\\\" :  {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      },\\n\" +\n        \"      \\\"s2\\\" : {\\n\" +\n        \"        \\\"replicas\\\" : {\\n\" +\n        \"          \\\"r1\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\",\\n\" +\n        \"            \\\"leader\\\" : \\\"true\\\"\\n\" +\n        \"          },\\n\" +\n        \"          \\\"r2\\\" : {\\n\" +\n        \"            \\\"type\\\" : \\\"NRT\\\",\\n\" +\n        \"            \\\"node_name\\\" : \\\"node1:8983\\\",\\n\" +\n        \"            \\\"state\\\" : \\\"active\\\"\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"      }\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    Map m = (Map) Utils.fromJSONString(dataproviderdata);\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState.getBytes(Charset.forName(\"UTF-8\")), getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d","date":1550526365,"type":3,"author":"shalinmangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() {\n            return ClusterState.createFromCollectionMap(0, clusterState, getLiveNodes());\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return ClusterState.load(0, clusterState, getLiveNodes(), ZkStateReader.getCollectionPath(\"c1\"));\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":["216382c52eb6bf24fc72851399bb3750e8ad7a97","f5a27e78e3d29dee02bab19ded25336471e96882"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() {\n            return ClusterState.createFromCollectionMap(0, clusterState, getLiveNodes());\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() {\n            return ClusterState.createFromCollectionMap(0, clusterState, getLiveNodes());\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new Replica(name, (String) node, coll.toString(), shard.toString(),\n                name, Replica.State.ACTIVE, type, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() {\n            return ClusterState.createFromCollectionMap(0, clusterState, getLiveNodes());\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> result = (Map<String, Map<String, List<Replica>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name, name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() {\n            return ClusterState.createFromCollectionMap(0, clusterState, getLiveNodes());\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testAutoscalingPreferencesUsedWithNoPolicy().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testAutoscalingPreferencesUsedWithNoPolicy.json\");\n    fixRequiredProps(m);\n    Map clusterState = (Map) m.remove(\"clusterstate\");\n\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new Replica(name, (String) node, coll.toString(), shard.toString(),\n                name, Replica.State.ACTIVE, type, m3));\n          }\n        });\n\n      });\n    });\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig asc = m.containsKey(\"autoscalingJson\") ? new AutoScalingConfig((Map<String, Object>) m.get(\"autoscalingJson\")) : new AutoScalingConfig(Collections.emptyMap());\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return asc;\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n\n          @Override\n          public ClusterState getClusterState() {\n            return ClusterState.createFromCollectionMap(0, clusterState, getLiveNodes());\n          }\n\n          @Override\n          public Map<String, Object> getClusterProperties() {\n            return Collections.singletonMap(\"defaults\", Collections.singletonMap(\"cluster\", Collections.singletonMap(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false)));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> result = (Map<String, Map<String, List<Replica>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? new HashMap<>() : result;\n          }\n        };\n      }\n    };\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"c1\")\n        .forShard(Collections.singletonList(\"s1\"))\n        .assignNrtReplicas(1)\n        .build();\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"c1\");\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n\n    assertEquals(1, replicaPositions.size());\n    ReplicaPosition replicaPosition = replicaPositions.get(0);\n    assertEquals(\"node3:8985\", replicaPosition.node); // only node3:8985 has enough space to handle the new replica\n    assertEquals(\"s1\", replicaPosition.shard); // sanity check\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["f5a27e78e3d29dee02bab19ded25336471e96882"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"f5a27e78e3d29dee02bab19ded25336471e96882":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["f5a27e78e3d29dee02bab19ded25336471e96882"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"f5a27e78e3d29dee02bab19ded25336471e96882":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}