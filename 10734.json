{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/RoutedAlias#createAllRequiredCollections(AddUpdateCommand,CandidateCollection).mjava","commits":[{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RoutedAlias#createAllRequiredCollections(AddUpdateCommand,CandidateCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create as many collections as required. This method loops to allow for the possibility that the route value\n   * requires more than one collection to be created. Since multiple threads may be invoking maintain on separate\n   * requests to the same alias, we must pass in a descriptor that details what collection is to be created.\n   * This assumption is checked when the command is executed in the overseer. When this method\n   * finds that all collections required have been created it returns the (possibly new) destination collection\n   * for the document that caused the creation cycle.\n   *\n   * @param cmd                  the update command being processed\n   * @param targetCollectionDesc the descriptor for the presently selected collection .\n   * @return The destination collection, possibly created during this method's execution\n   */\n  private String createAllRequiredCollections(AddUpdateCommand cmd, CandidateCollection targetCollectionDesc) {\n\n    SolrQueryRequest req = cmd.getReq();\n    SolrCore core = req.getCore();\n    CoreContainer coreContainer = core.getCoreContainer();\n    do {\n      switch (targetCollectionDesc.getCreationType()) {\n        case NONE:\n          return targetCollectionDesc.destinationCollection; // we don't need another collection\n        case SYNCHRONOUS:\n          targetCollectionDesc = doSynchronous( cmd, targetCollectionDesc, coreContainer);\n          break;\n        case ASYNC_PREEMPTIVE:\n          return doPreemptive(targetCollectionDesc, core, coreContainer);\n        default:\n          throw unknownCreateType();\n      }\n    } while (true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}