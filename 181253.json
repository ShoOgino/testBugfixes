{"path":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"c6607c2e2193cd450f258dfc01588ecbb25a75ae","date":1236839053,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *\n   * @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    RangeQuery rangeQuery = new RangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n    rangeQuery.setConstantScoreRewrite(true);\n    return rangeQuery;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"187477cb6c13b4aad8f8b30e1a2a0c18907acce9","date":1236863546,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser\n   *@param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n*      @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(QParser parser, String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    RangeQuery rangeQuery = new RangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n    rangeQuery.setConstantScoreRewrite(true);\n    return rangeQuery;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param field        the name of the field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *\n   * @return a Query instance to perform range search according to given parameters\n   *\n   * @see org.apache.solr.search.SolrQueryParser#getRangeQuery(String, String, String, boolean)\n   */\n  public Query getRangeQuery(String field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    RangeQuery rangeQuery = new RangeQuery(\n            field,\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n    rangeQuery.setConstantScoreRewrite(true);\n    return rangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":["c6607c2e2193cd450f258dfc01588ecbb25a75ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c6607c2e2193cd450f258dfc01588ecbb25a75ae":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"187477cb6c13b4aad8f8b30e1a2a0c18907acce9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c6607c2e2193cd450f258dfc01588ecbb25a75ae"],"c6607c2e2193cd450f258dfc01588ecbb25a75ae":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["187477cb6c13b4aad8f8b30e1a2a0c18907acce9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}