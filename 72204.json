{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getLiveStates() {\n    expandSingleton();\n    return getLiveStates(getStates());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getLiveStates() {\n    expandSingleton();\n    return getLiveStates(getStates());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58cf70570b2db7af0b0b2dcb705a120c2ecb63e3","date":1272954952,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getLiveStates().mjava","sourceNew":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns the set of live states. A state is \"live\" if an accept state is\n   * reachable from it.\n   * \n   * @return set of {@link State} objects\n   */\n  private State[] getLiveStates() {\n    final State[] states = getNumberedStates();\n    Set<State> live = new HashSet<State>();\n    for (State q : states) {\n      if (q.isAccept()) {\n        live.add(q);\n      }\n    }\n    // map<state, set<state>>\n    @SuppressWarnings(\"unchecked\") Set<State> map[] = new Set[states.length];\n    for (int i = 0; i < map.length; i++)\n      map[i] = new HashSet<State>();\n    for (State s : states) {\n      for(int i=0;i<s.numTransitions;i++) {\n        map[s.transitionsArray[i].to.number].add(s);\n      }\n    }\n    LinkedList<State> worklist = new LinkedList<State>(live);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      for (State p : map[s.number])\n        if (!live.contains(p)) {\n          live.add(p);\n          worklist.add(p);\n        }\n    }\n\n    return live.toArray(new State[live.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58cf70570b2db7af0b0b2dcb705a120c2ecb63e3"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58cf70570b2db7af0b0b2dcb705a120c2ecb63e3":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["58cf70570b2db7af0b0b2dcb705a120c2ecb63e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"58cf70570b2db7af0b0b2dcb705a120c2ecb63e3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}