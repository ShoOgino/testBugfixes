{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#getDistance(String,String).mjava","commits":[{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#getDistance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Poached from LuceneLevenshteinDistance.java (from suggest module): it supports transpositions (treats them as ed=1, not ed=2)\n  private static int getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, it's only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and it's inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return d[n][m];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#getDistance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Poached from LuceneLevenshteinDistance.java (from suggest module): it supports transpositions (treats them as ed=1, not ed=2)\n  private static int getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, it's only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and it's inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return d[n][m];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#getDistance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Poached from LuceneLevenshteinDistance.java (from suggest module): it supports transpositions (treats them as ed=1, not ed=2)\n  private static int getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, it's only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and it's inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return d[n][m];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#getDistance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Poached from LuceneLevenshteinDistance.java (from suggest module): it supports transpositions (treats them as ed=1, not ed=2)\n  private static int getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, it's only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and it's inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return d[n][m];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}