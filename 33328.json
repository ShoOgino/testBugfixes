{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadLogWatcherConfig(Config,String,String).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadLogWatcherConfig(Config,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static LogWatcherConfig loadLogWatcherConfig(Config config, String loggingPath, String watcherPath) {\n\n    String loggingClass = null;\n    boolean enabled = true;\n    int watcherQueueSize = 50;\n    String watcherThreshold = null;\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, loggingPath, \"<logging>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"class\":\n          loggingClass = value; break;\n        case \"enabled\":\n          enabled = Boolean.parseBoolean(value); break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, watcherPath, \"<watcher>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"size\":\n          watcherQueueSize = parseInt(name, value); break;\n        case \"threshold\":\n          watcherThreshold = value; break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    return new LogWatcherConfig(enabled, loggingClass, watcherThreshold, watcherQueueSize);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadLogWatcherConfig(Config,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static LogWatcherConfig loadLogWatcherConfig(Config config, String loggingPath, String watcherPath) {\n\n    String loggingClass = null;\n    boolean enabled = true;\n    int watcherQueueSize = 50;\n    String watcherThreshold = null;\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, loggingPath, \"<logging>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"class\":\n          loggingClass = value; break;\n        case \"enabled\":\n          enabled = Boolean.parseBoolean(value); break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, watcherPath, \"<watcher>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"size\":\n          watcherQueueSize = parseInt(name, value); break;\n        case \"threshold\":\n          watcherThreshold = value; break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    return new LogWatcherConfig(enabled, loggingClass, watcherThreshold, watcherQueueSize);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadLogWatcherConfig(XmlConfigFile,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#loadLogWatcherConfig(Config,String,String).mjava","sourceNew":"  private static LogWatcherConfig loadLogWatcherConfig(XmlConfigFile config, String loggingPath, String watcherPath) {\n\n    String loggingClass = null;\n    boolean enabled = true;\n    int watcherQueueSize = 50;\n    String watcherThreshold = null;\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, loggingPath, \"<logging>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"class\":\n          loggingClass = value; break;\n        case \"enabled\":\n          enabled = Boolean.parseBoolean(value); break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, watcherPath, \"<watcher>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"size\":\n          watcherQueueSize = parseInt(name, value); break;\n        case \"threshold\":\n          watcherThreshold = value; break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    return new LogWatcherConfig(enabled, loggingClass, watcherThreshold, watcherQueueSize);\n\n  }\n\n","sourceOld":"  private static LogWatcherConfig loadLogWatcherConfig(Config config, String loggingPath, String watcherPath) {\n\n    String loggingClass = null;\n    boolean enabled = true;\n    int watcherQueueSize = 50;\n    String watcherThreshold = null;\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, loggingPath, \"<logging>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"class\":\n          loggingClass = value; break;\n        case \"enabled\":\n          enabled = Boolean.parseBoolean(value); break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    for (Map.Entry<String, Object> entry : readNodeListAsNamedList(config, watcherPath, \"<watcher>\")) {\n      String name = entry.getKey();\n      String value = entry.getValue().toString();\n      switch (name) {\n        case \"size\":\n          watcherQueueSize = parseInt(name, value); break;\n        case \"threshold\":\n          watcherThreshold = value; break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value in logwatcher config: \" + name);\n      }\n    }\n\n    return new LogWatcherConfig(enabled, loggingClass, watcherThreshold, watcherQueueSize);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["ee622110ba6021d0390037e77574743c1e55348c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}