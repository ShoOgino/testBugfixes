{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","commits":[{"id":"861a8940601b61a2fd5427f7187314d516ef1586","date":1457434409,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","pathOld":"/dev/null","sourceNew":"    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          new DeleteStatus().setRequestId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","date":1457434419,"type":0,"author":"Alan Woodward","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","pathOld":"/dev/null","sourceNew":"    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          new DeleteStatus().setRequestId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","sourceNew":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","sourceOld":"    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          new DeleteStatus().setRequestId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","date":1464965423,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","sourceNew":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.MILLISECONDS.sleep(100);\n      }\n      return state;\n    }\n\n","sourceOld":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650d17e953fb1d54e644f9928e3202e68b88eeb1","date":1465215234,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","sourceNew":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","sourceOld":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.MILLISECONDS.sleep(100);\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.RequestStatus#waitFor(SolrClient,long).mjava","sourceNew":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.SECONDS.sleep(1);\n      }\n      return state;\n    }\n\n","sourceOld":"    /**\n     * Wait until the asynchronous request is either completed or failed, up to a timeout\n     * @param client a SolrClient\n     * @param timeoutSeconds the maximum time to wait in seconds\n     * @return the last seen state of the request\n     */\n    public RequestStatusState waitFor(SolrClient client, long timeoutSeconds)\n        throws IOException, SolrServerException, InterruptedException {\n      long finishTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(timeoutSeconds);\n      RequestStatusState state = RequestStatusState.NOT_FOUND;\n      while (System.nanoTime() < finishTime) {\n        state = this.process(client).getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          deleteAsyncId(requestId).process(client);\n          return state;\n        }\n        TimeUnit.MILLISECONDS.sleep(100);\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"191128ac5b85671b1671e2c857437694283b6ebf":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","650d17e953fb1d54e644f9928e3202e68b88eeb1"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","861a8940601b61a2fd5427f7187314d516ef1586"],"861a8940601b61a2fd5427f7187314d516ef1586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"]},"commit2Childs":{"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["650d17e953fb1d54e644f9928e3202e68b88eeb1","191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","861a8940601b61a2fd5427f7187314d516ef1586"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["191128ac5b85671b1671e2c857437694283b6ebf"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"191128ac5b85671b1671e2c857437694283b6ebf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"861a8940601b61a2fd5427f7187314d516ef1586":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}