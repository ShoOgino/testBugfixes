{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testHashRollupStream().mjava","commits":[{"id":"1ecdfb266e7c129f6740243b70a053b96b0a1346","date":1551363608,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testHashRollupStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ecdfb266e7c129f6740243b70a053b96b0a1346":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ecdfb266e7c129f6740243b70a053b96b0a1346"]},"commit2Childs":{"1ecdfb266e7c129f6740243b70a053b96b0a1346":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ecdfb266e7c129f6740243b70a053b96b0a1346"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}