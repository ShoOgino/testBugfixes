{"path":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","commits":[{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,IndexSearcher,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final IndexSearcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(docFreq, searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @param docFreq externally computed docFreq for this term\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher, int docFreq) throws IOException {\n    final int df = docFreq;\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}