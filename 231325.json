{"path":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight originalWeight = originalQuery.createWeight(searcher, needsScores);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return originalWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        originalWeight.normalize(norm, boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}