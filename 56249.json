{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames.size(), result.size());\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames.size(), result.size());\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0509730ae61bc3e3cf168e6ea74600163f67a3eb","date":1510654599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames.size(), result.size());\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames.size(), result.size());\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames.size(), result.size());\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"0509730ae61bc3e3cf168e6ea74600163f67a3eb":["61c45e99cf6676da48f19d7511c73712ad39402b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["bcf9886c8ff537aafde14de48ebf744f5673f08b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["0509730ae61bc3e3cf168e6ea74600163f67a3eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0509730ae61bc3e3cf168e6ea74600163f67a3eb":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"61c45e99cf6676da48f19d7511c73712ad39402b":["0509730ae61bc3e3cf168e6ea74600163f67a3eb","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}