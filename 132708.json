{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(IndexDocument).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(IndexDocument doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws CorruptIndexException, IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(IndexDocument).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(IndexDocument doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than 16383 characters, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    addDocument(doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(IndexDocument).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(IndexDocument doc) throws IOException {\n    updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument((DocumentsWriterDeleteQueue.Node<?>) null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142f99d1da3d720b5094f5b47b0e57f8ef6ab03c","date":1584127995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField]).mjava","sourceNew":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument(null, doc);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index.\n   *\n   * <p> Note that if an Exception is hit (for example disk full)\n   * then the index will be consistent, but this document\n   * may not have been added.  Furthermore, it's possible\n   * the index will have one segment in non-compound format\n   * even when using compound files (when a merge has\n   * partially succeeded).</p>\n   *\n   * <p> This method periodically flushes pending documents\n   * to the Directory (see <a href=\"#flush\">above</a>), and\n   * also periodically triggers segment merges in the index\n   * according to the {@link MergePolicy} in use.</p>\n   *\n   * <p>Merges temporarily consume space in the\n   * directory. The amount of space required is up to 1X the\n   * size of all segments being merged, when no\n   * readers/searchers are open against the index, and up to\n   * 2X the size of all segments being merged when\n   * readers/searchers are open against the index (see\n   * {@link #forceMerge(int)} for details). The sequence of\n   * primitive merge operations performed is governed by the\n   * merge policy.\n   *\n   * <p>Note that each term in the document can be no longer\n   * than {@link #MAX_TERM_LENGTH} in bytes, otherwise an\n   * IllegalArgumentException will be thrown.</p>\n   *\n   * <p>Note that it's possible to create an invalid Unicode\n   * string in java if a UTF16 surrogate pair is malformed.\n   * In this case, the invalid characters are silently\n   * replaced with the Unicode replacement character\n   * U+FFFD.</p>\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Iterable<? extends IndexableField> doc) throws IOException {\n    return updateDocument((DocumentsWriterDeleteQueue.Node<?>) null, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6483e4260c08168709c02238ae083a51519a28dd":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","16ebfabc294f23b88b6a39722a02c9d39b353195"],"191128ac5b85671b1671e2c857437694283b6ebf":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["191128ac5b85671b1671e2c857437694283b6ebf"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["f492fe129985750df09c8dac738aecc503158bb3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","191128ac5b85671b1671e2c857437694283b6ebf"],"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"142f99d1da3d720b5094f5b47b0e57f8ef6ab03c":["110125c995236a7f61057dd04b039ed2d267f3a1"],"f492fe129985750df09c8dac738aecc503158bb3":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["142f99d1da3d720b5094f5b47b0e57f8ef6ab03c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["110125c995236a7f61057dd04b039ed2d267f3a1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["142f99d1da3d720b5094f5b47b0e57f8ef6ab03c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"142f99d1da3d720b5094f5b47b0e57f8ef6ab03c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}