{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","commits":[{"id":"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1","date":1380909825,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in ivy-versions.properties\n   * are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCentralizedVersionsFile() {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + centralizedVersionsFile, verboseLevel);\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(centralizedVersionsFile);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Centralized versions file does not exist: \"\n          + centralizedVersionsFile.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, Charset.forName(\"ISO-8859-1\"));\n    final BufferedReader bufferedReader = new BufferedReader(reader);\n    \n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.matches()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          }\n        }\n        referencedCoordinateKeys.put(currentKey, false);\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading centralized versions file: \" \n          + centralizedVersionsFile.getPath(), e);\n    } finally {\n      try { reader.close(); } catch (IOException e) { }\n    }\n    return ! failures;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","sourceNew":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in ivy-versions.properties\n   * are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCentralizedVersionsFile() {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + centralizedVersionsFile, verboseLevel);\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(centralizedVersionsFile);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Centralized versions file does not exist: \"\n          + centralizedVersionsFile.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n    final BufferedReader bufferedReader = new BufferedReader(reader);\n    \n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.matches()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          }\n        }\n        referencedCoordinateKeys.put(currentKey, false);\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading centralized versions file: \" \n          + centralizedVersionsFile.getPath(), e);\n    } finally {\n      try { reader.close(); } catch (IOException e) { }\n    }\n    return ! failures;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in ivy-versions.properties\n   * are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCentralizedVersionsFile() {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + centralizedVersionsFile, verboseLevel);\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(centralizedVersionsFile);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Centralized versions file does not exist: \"\n          + centralizedVersionsFile.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, Charset.forName(\"ISO-8859-1\"));\n    final BufferedReader bufferedReader = new BufferedReader(reader);\n    \n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.matches()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          }\n        }\n        referencedCoordinateKeys.put(currentKey, false);\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading centralized versions file: \" \n          + centralizedVersionsFile.getPath(), e);\n    } finally {\n      try { reader.close(); } catch (IOException e) { }\n    }\n    return ! failures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","sourceNew":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in ivy-versions.properties\n   * are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCentralizedVersionsFile() {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + centralizedVersionsFile, verboseLevel);\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(centralizedVersionsFile);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Centralized versions file does not exist: \"\n          + centralizedVersionsFile.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n    final BufferedReader bufferedReader = new BufferedReader(reader);\n    \n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.matches()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          }\n        }\n        referencedCoordinateKeys.put(currentKey, false);\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading centralized versions file: \" \n          + centralizedVersionsFile.getPath(), e);\n    } finally {\n      try { reader.close(); } catch (IOException e) { }\n    }\n    return ! failures;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in ivy-versions.properties\n   * are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCentralizedVersionsFile() {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + centralizedVersionsFile, verboseLevel);\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(centralizedVersionsFile);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Centralized versions file does not exist: \"\n          + centralizedVersionsFile.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, Charset.forName(\"ISO-8859-1\"));\n    final BufferedReader bufferedReader = new BufferedReader(reader);\n    \n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.matches()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          }\n        }\n        referencedCoordinateKeys.put(currentKey, false);\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading centralized versions file: \" \n          + centralizedVersionsFile.getPath(), e);\n    } finally {\n      try { reader.close(); } catch (IOException e) { }\n    }\n    return ! failures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCoordinatesPropertiesFile(File).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#verifySortedCentralizedVersionsFile().mjava","sourceNew":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in the given\n   * properties file are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCoordinatesPropertiesFile(File coordinatePropertiesFile) {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + coordinatePropertiesFile, verboseLevel);\n    boolean success = true;\n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try (InputStream stream = new FileInputStream(coordinatePropertiesFile);\n         Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n         BufferedReader bufferedReader = new BufferedReader(reader)) {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.lookingAt()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + coordinatePropertiesFile.getName(),\n                Project.MSG_ERR);\n            success = false;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + coordinatePropertiesFile.getName(),\n                Project.MSG_ERR);\n            success = false;\n          }\n        }\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading \" + coordinatePropertiesFile.getPath() + \": \" + e.toString(), e);\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the \"/org/name\" coordinate keys in ivy-versions.properties\n   * are lexically sorted and are not duplicates.\n   */\n  private boolean verifySortedCentralizedVersionsFile() {\n    log(\"Checking for lexically sorted non-duplicated '/org/name' keys in: \" + centralizedVersionsFile, verboseLevel);\n    final InputStream stream;\n    try {\n      stream = new FileInputStream(centralizedVersionsFile);\n    } catch (FileNotFoundException e) {\n      throw new BuildException(\"Centralized versions file does not exist: \"\n          + centralizedVersionsFile.getPath());\n    }\n    // Properties files are encoded as Latin-1\n    final Reader reader = new InputStreamReader(stream, StandardCharsets.ISO_8859_1);\n    final BufferedReader bufferedReader = new BufferedReader(reader);\n    \n    String line = null;\n    String currentKey = null;\n    String previousKey = null;\n    try {\n      while (null != (line = readLogicalPropertiesLine(bufferedReader))) {\n        final Matcher keyMatcher = COORDINATE_KEY_PATTERN.matcher(line);\n        if ( ! keyMatcher.matches()) {\n          continue; // Ignore keys that don't look like \"/org/name\"\n        }\n        currentKey = keyMatcher.group(1);\n        if (null != previousKey) {\n          int comparison = currentKey.compareTo(previousKey);\n          if (0 == comparison) {\n            log(\"DUPLICATE coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          } else if (comparison < 0) {\n            log(\"OUT-OF-ORDER coordinate key '\" + currentKey + \"' in \" + centralizedVersionsFile.getName(),\n                Project.MSG_ERR);\n            failures = true;\n          }\n        }\n        referencedCoordinateKeys.put(currentKey, false);\n        previousKey = currentKey;\n      }\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading centralized versions file: \" \n          + centralizedVersionsFile.getPath(), e);\n    } finally {\n      try { reader.close(); } catch (IOException e) { }\n    }\n    return ! failures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1","7d89d7e4e5101347833eea558851bf4209218619"],"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}