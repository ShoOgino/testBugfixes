{"path":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#compareFingerprint(IndexFingerprint).mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#compareFingerprint(IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  private boolean compareFingerprint(IndexFingerprint leaderFingerprint) {\n    if (leaderFingerprint == null) {\n      log.warn(\"Replica did not return a fingerprint - possibly an older Solr version or exception\");\n      return false;\n    }\n\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(leaderFingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", leaderFingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch (IOException e) {\n      log.warn(\"Could not confirm if we are already in sync. Continue with PeerSync\");\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#compareFingerprint(IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  private boolean compareFingerprint(IndexFingerprint leaderFingerprint) {\n    if (leaderFingerprint == null) {\n      log.warn(\"Replica did not return a fingerprint - possibly an older Solr version or exception\");\n      return false;\n    }\n\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(leaderFingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", leaderFingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch (IOException e) {\n      log.warn(\"Could not confirm if we are already in sync. Continue with PeerSync\");\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#compareFingerprint(IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  private boolean compareFingerprint(IndexFingerprint leaderFingerprint) {\n    if (leaderFingerprint == null) {\n      log.warn(\"Replica did not return a fingerprint - possibly an older Solr version or exception\");\n      return false;\n    }\n\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(leaderFingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", leaderFingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch (IOException e) {\n      log.warn(\"Could not confirm if we are already in sync. Continue with PeerSync\");\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"425c2986e128f9e4aadd629cdf3b04e7aacb7c80","date":1536202585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#compareFingerprint(IndexFingerprint).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#compareFingerprint(IndexFingerprint).mjava","sourceNew":"  private boolean compareFingerprint(IndexFingerprint leaderFingerprint) {\n    if (leaderFingerprint == null) {\n      log.warn(\"Replica did not return a fingerprint - possibly an older Solr version or exception\");\n      return false;\n    }\n\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(leaderFingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison result: {}\" , cmp);\n      if (cmp != 0) {\n        log.info(\"Leader fingerprint: {}, Our fingerprint: {}\", leaderFingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch (IOException e) {\n      log.warn(\"Could not confirm if we are already in sync. Continue with PeerSync\");\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean compareFingerprint(IndexFingerprint leaderFingerprint) {\n    if (leaderFingerprint == null) {\n      log.warn(\"Replica did not return a fingerprint - possibly an older Solr version or exception\");\n      return false;\n    }\n\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(leaderFingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", leaderFingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch (IOException e) {\n      log.warn(\"Could not confirm if we are already in sync. Continue with PeerSync\");\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"425c2986e128f9e4aadd629cdf3b04e7aacb7c80":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["425c2986e128f9e4aadd629cdf3b04e7aacb7c80"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"425c2986e128f9e4aadd629cdf3b04e7aacb7c80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["425c2986e128f9e4aadd629cdf3b04e7aacb7c80","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}