{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCJoin() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","sourceNew":"  @Test\n  public void testJDBCJoin() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","sourceOld":"  private void testJDBCJoin() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","sourceNew":"  @Test\n  public void testJDBCJoin() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","sourceOld":"  private void testJDBCJoin() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","sourceNew":"  @Test\n  public void testJDBCJoin() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","sourceOld":"  private void testJDBCJoin() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCJoin().mjava","sourceNew":"  @Test\n  public void testJDBCJoin() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","sourceOld":"  private void testJDBCJoin() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    statement.close();\n    connection.close();\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Simple 1\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["c533b201163bd7b15aa8881f922f9289a7668187","73450c0955930295d34703e7ddbfc6973b7a121a"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b940572a59da1b42b6c20ab5278155b12816807a":["c533b201163bd7b15aa8881f922f9289a7668187"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73450c0955930295d34703e7ddbfc6973b7a121a"]},"commit2Childs":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"c533b201163bd7b15aa8881f922f9289a7668187":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}