{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","commits":[{"id":"326990249d982376dfa2e6fd97c28f4580df4e7c","date":1323042771,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized CompositeIndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (CompositeIndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized CompositeIndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (CompositeIndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","326990249d982376dfa2e6fd97c28f4580df4e7c"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","326990249d982376dfa2e6fd97c28f4580df4e7c"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}