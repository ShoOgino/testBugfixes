{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(TermsEnum,BytesRef,float).mjava","commits":[{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(TermsEnum,BytesRef,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef,float).mjava","sourceNew":"      public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        docVisitCount += termsEnum.docFreq();\n        return true;\n      }\n\n","sourceOld":"      public boolean collect(BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        // Loading the TermInfo from the terms dict here\n        // should not be costly, because 1) the\n        // query/filter will load the TermInfo when it\n        // runs, and 2) the terms dict has a cache:\n        docVisitCount += reader.docFreq(field, bytes);\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(TermsEnum,BytesRef,float).mjava","sourceNew":"      @Override\n      public boolean collect(BytesRef bytes) throws IOException {\n        if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.add(bytes);\n        docVisitCount += termsEnum.docFreq();\n        return true;\n      }\n\n","sourceOld":"      public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        docVisitCount += termsEnum.docFreq();\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(TermsEnum,BytesRef,float).mjava","sourceNew":"      @Override\n      public boolean collect(BytesRef bytes) throws IOException {\n        if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.add(bytes);\n        docVisitCount += termsEnum.docFreq();\n        return true;\n      }\n\n","sourceOld":"      public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        docVisitCount += termsEnum.docFreq();\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33a8b1f99104f4144f210f5d068411c297cd7163"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}