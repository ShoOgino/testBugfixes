{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","sourceNew":"  /**\n   * <p>Get the next token from the input stream.\n   * <p>If the next token has <code>positionIncrement > 1</code>,\n   * <code>positionIncrement - 1</code> {@link #FILLER_TOKEN}s are\n   * inserted first.\n   * @return false for end of stream; true otherwise\n   * @throws IOException if the input stream has a problem\n   */\n  private boolean getNextToken() throws IOException {\n    boolean success = false;\n    if (numFillerTokensToInsert > 0) {\n      insertFillerToken();\n      success = true;\n    } else if (null != nextInputStreamToken) {\n      restoreState(nextInputStreamToken);\n      nextInputStreamToken = null;\n      success = true;\n    } else if (input.incrementToken()) {\n      if (posIncrAtt.getPositionIncrement() > 1) {\n        numFillerTokensToInsert = posIncrAtt.getPositionIncrement() - 1;\n        insertFillerToken();\n      }\n      success = true;\n    }\n    return success;\n\t}\n\n","sourceOld":"  /**\n   * <p>Get the next token from the input stream.\n   * <p>If the next token has <code>positionIncrement > 1</code>,\n   * <code>positionIncrement - 1</code> {@link #FILLER_TOKEN}s are\n   * inserted first.\n   * @return false for end of stream; true otherwise\n   * @throws IOException if the input stream has a problem\n   */\n  private boolean getNextToken() throws IOException {\n    boolean success = false;\n    if (numFillerTokensToInsert > 0) {\n      insertFillerToken();\n      success = true;\n    } else if (null != nextInputStreamToken) {\n      restoreState(nextInputStreamToken);\n      nextInputStreamToken = null;\n      success = true;\n    } else if (input.incrementToken()) {\n      if (posIncrAtt.getPositionIncrement() > 1) {\n        numFillerTokensToInsert = posIncrAtt.getPositionIncrement() - 1;\n        insertFillerToken();\n      }\n      success = true;\n    }\n    return success;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f79c103683b18eae3b9f62a8c61e675d8984b092","date":1272893294,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Get the next token from the input stream.\n   * <p>If the next token has <code>positionIncrement > 1</code>,\n   * <code>positionIncrement - 1</code> {@link #FILLER_TOKEN}s are\n   * inserted first.\n   * @return false for end of stream; true otherwise\n   * @throws IOException if the input stream has a problem\n   */\n  private boolean getNextToken() throws IOException {\n    boolean success = false;\n    if (numFillerTokensToInsert > 0) {\n      insertFillerToken();\n      success = true;\n    } else if (null != nextInputStreamToken) {\n      restoreState(nextInputStreamToken);\n      nextInputStreamToken = null;\n      success = true;\n    } else if (input.incrementToken()) {\n      if (posIncrAtt.getPositionIncrement() > 1) {\n        numFillerTokensToInsert = posIncrAtt.getPositionIncrement() - 1;\n        insertFillerToken();\n      }\n      success = true;\n    }\n    return success;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f79c103683b18eae3b9f62a8c61e675d8984b092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}