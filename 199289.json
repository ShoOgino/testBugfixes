{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","commits":[{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    try (CloudSolrClient createdClient = new Builder()\n        .withZkHost(ANY_ZK_HOST)\n        .withZkHost(ANY_OTHER_ZK_HOST)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    try (CloudSolrClient createdClient = new Builder()\n        .withZkHost(ANY_ZK_HOST)\n        .withZkHost(ANY_OTHER_ZK_HOST)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","sourceNew":"  @Test\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    final List<String> zkHostList = new ArrayList<>();\n    zkHostList.add(ANY_ZK_HOST); zkHostList.add(ANY_OTHER_ZK_HOST);\n    try (CloudSolrClient createdClient = new Builder(zkHostList, Optional.of(ANY_CHROOT))\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    try (CloudSolrClient createdClient = new Builder()\n        .withZkHost(ANY_ZK_HOST)\n        .withZkHost(ANY_OTHER_ZK_HOST)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    final List<String> zkHostList = new ArrayList<>();\n    zkHostList.add(ANY_ZK_HOST); zkHostList.add(ANY_OTHER_ZK_HOST);\n    try (CloudSolrClient createdClient = new Builder(zkHostList, Optional.of(ANY_CHROOT))\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    final List<String> zkHostList = new ArrayList<>();\n    zkHostList.add(ANY_ZK_HOST); zkHostList.add(ANY_OTHER_ZK_HOST);\n    try (CloudSolrClient createdClient = new Builder(zkHostList, Optional.of(ANY_CHROOT))\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest#testSeveralZkHostsSpecifiedSingly().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    final List<String> zkHostList = new ArrayList<>();\n    zkHostList.add(ANY_ZK_HOST); zkHostList.add(ANY_OTHER_ZK_HOST);\n    try (CloudSolrClient createdClient = new Builder(zkHostList, Optional.of(ANY_CHROOT))\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    final List<String> zkHostList = new ArrayList<>();\n    zkHostList.add(ANY_ZK_HOST); zkHostList.add(ANY_OTHER_ZK_HOST);\n    try (CloudSolrClient createdClient = new Builder(zkHostList, Optional.of(ANY_CHROOT))\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["4cba13865da71de3b9b0937fcbc66d726089356d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}