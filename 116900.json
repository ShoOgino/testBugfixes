{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path  The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path  The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd61945b522c69b4bdd1a107f06659c8fee30c3","date":1464716529,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6adb86d9da32d63035dfb272a93c694d1fe7f6e7","date":1472649463,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     *               This map is mutable. DO NOT alter the map or store it for later use.\n     *               If it must be stored, make a deep copy before doing so\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     *               This map is mutable. DO NOT alter the map or store it for later use.\n     *               If it must be stored, make a deep copy before doing so\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     *               This map is mutable. DO NOT alter the map or store it for later use.\n     *               If it must be stored, make a deep copy before doing so\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Handler#handle(Map[String,Object],String).mjava","sourceNew":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     *               This map is mutable. DO NOT alter the map or store it for later use.\n     *               If it must be stored, make a deep copy before doing so\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    void handle(Map<String, Object> record, String path);\n\n","sourceOld":"    /**\n     * @param record The record map. The key is the field name as provided in\n     *               the addField() methods. The value can be a single String (for single\n     *               valued fields) or a List&lt;String&gt; (for multiValued).\n     * @param path   The forEach path for which this record is being emitted\n     *               If there is any change all parsing will be aborted and the Exception\n     *               is propagated up\n     */\n    public void handle(Map<String, Object> record, String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","6adb86d9da32d63035dfb272a93c694d1fe7f6e7"],"bc8f206328a706450934717bec7ccc22ad166fc0":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","6adb86d9da32d63035dfb272a93c694d1fe7f6e7"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["2330174b38007b9942205a2679db9ddffe35af89","9fd61945b522c69b4bdd1a107f06659c8fee30c3"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6adb86d9da32d63035dfb272a93c694d1fe7f6e7":["9fd61945b522c69b4bdd1a107f06659c8fee30c3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2330174b38007b9942205a2679db9ddffe35af89","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["2330174b38007b9942205a2679db9ddffe35af89","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","5b8ee93140fd0efef7e101786e3ed5160a700b5f","6adb86d9da32d63035dfb272a93c694d1fe7f6e7"],"2330174b38007b9942205a2679db9ddffe35af89":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["2330174b38007b9942205a2679db9ddffe35af89"],"6adb86d9da32d63035dfb272a93c694d1fe7f6e7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}