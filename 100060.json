{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","commits":[{"id":"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","date":1399316048,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompareWithNonDistributedRequest() throws SolrServerException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_qieries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_qieries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["40c88d06830ae65115c369581e89922b18ab0647"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40c88d06830ae65115c369581e89922b18ab0647","date":1420228965,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","sourceNew":"  public void testCompareWithNonDistributedRequest() throws SolrServerException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":"  public void testCompareWithNonDistributedRequest() throws SolrServerException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_qieries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_qieries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","bugFix":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","sourceNew":"  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":"  public void testCompareWithNonDistributedRequest() throws SolrServerException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","sourceNew":"  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":"  public void testCompareWithNonDistributedRequest() throws SolrServerException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fbf043f7a109d13b86b6fc6fee3953b0c103c24","date":1450713625,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","sourceNew":"  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1 OR id:2\");\n    query.setFilterQueries(\"id:[0 TO 10]\", \"id:[0 TO 5]\");\n    query.setRows(1);\n    query.setSort(\"id\", SolrQuery.ORDER.asc); // thus only return id:1 since rows 1\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\");\n    if (random().nextBoolean()) { // can affect rb.onePassDistributedQuery\n      query.addField(\"text\");\n    }\n    query.set(ShardParams.DISTRIB_SINGLE_PASS, random().nextBoolean());\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":"  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1\");\n    query.setFilterQueries(\"id:[0 TO 10]\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1 OR id:2\");\n    query.setFilterQueries(\"id:[0 TO 10]\", \"id:[0 TO 5]\");\n    query.setRows(1);\n    query.setSort(\"id\", SolrQuery.ORDER.asc); // thus only return id:1 since rows 1\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\");\n    if (random().nextBoolean()) { // can affect rb.onePassDistributedQuery\n      query.addField(\"text\");\n    }\n    query.set(ShardParams.DISTRIB_SINGLE_PASS, random().nextBoolean());\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":"  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1 OR id:2\");\n    query.setFilterQueries(\"id:[0 TO 10]\", \"id:[0 TO 5]\");\n    query.setRows(1);\n    query.setSort(\"id\", SolrQuery.ORDER.asc); // thus only return id:1 since rows 1\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\");\n    if (random().nextBoolean()) { // can affect rb.onePassDistributedQuery\n      query.addField(\"text\");\n    }\n    query.set(ShardParams.DISTRIB_SINGLE_PASS, random().nextBoolean());\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testCompareWithNonDistributedRequest().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1 OR id:2\");\n    query.setFilterQueries(\"id:[0 TO 10]\", \"id:[0 TO 5]\");\n    query.setRows(1);\n    query.setSort(\"id\", SolrQuery.ORDER.asc); // thus only return id:1 since rows 1\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\");\n    if (random().nextBoolean()) { // can affect rb.onePassDistributedQuery\n      query.addField(\"text\");\n    }\n    query.set(ShardParams.DISTRIB_SINGLE_PASS, random().nextBoolean());\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testCompareWithNonDistributedRequest() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:1 OR id:2\");\n    query.setFilterQueries(\"id:[0 TO 10]\", \"id:[0 TO 5]\");\n    query.setRows(1);\n    query.setSort(\"id\", SolrQuery.ORDER.asc); // thus only return id:1 since rows 1\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\");\n    if (random().nextBoolean()) { // can affect rb.onePassDistributedQuery\n      query.addField(\"text\");\n    }\n    query.set(ShardParams.DISTRIB_SINGLE_PASS, random().nextBoolean());\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse distribResponse = collection1.query(query);\n    \n    // same query but not distributed\n    query.set(\"distrib\", \"false\");\n    query.remove(\"shards\");\n    QueryResponse nonDistribResponse = collection1.query(query);\n    \n    assertNotNull(distribResponse.getDebugMap().get(\"track\"));\n    assertNull(nonDistribResponse.getDebugMap().get(\"track\"));\n    assertEquals(distribResponse.getDebugMap().size() - 1, nonDistribResponse.getDebugMap().size());\n    \n    assertSectionEquals(distribResponse, nonDistribResponse, \"explain\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"rawquerystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"querystring\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsedquery_toString\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"QParser\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"filter_queries\");\n    assertSectionEquals(distribResponse, nonDistribResponse, \"parsed_filter_queries\");\n    \n    // timing should have the same sections:\n    assertSameKeys((NamedList<?>)nonDistribResponse.getDebugMap().get(\"timing\"), (NamedList<?>)distribResponse.getDebugMap().get(\"timing\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["40c88d06830ae65115c369581e89922b18ab0647","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["40c88d06830ae65115c369581e89922b18ab0647"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"40c88d06830ae65115c369581e89922b18ab0647":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"40c88d06830ae65115c369581e89922b18ab0647":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["40c88d06830ae65115c369581e89922b18ab0647"],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["4cba13865da71de3b9b0937fcbc66d726089356d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}