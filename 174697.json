{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"01f63edf15d2e3dbb3355d974f733b263098cb46","date":1533724999,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    NamedList values = rsp.getValues();\n    values.add(\"zkStatus\", getZkStatus(cores.getZkController().getZkServerAddress()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa","date":1547565430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList values = rsp.getValues();\n    if (cores.isZooKeeperAware()) {\n      values.add(\"zkStatus\", getZkStatus(cores.getZkController().getZkServerAddress()));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The Zookeeper status API is only available in Cloud mode\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    final SolrParams params = req.getParams();\n    Map<String, String> map = new HashMap<>(1);\n    NamedList values = rsp.getValues();\n    values.add(\"zkStatus\", getZkStatus(cores.getZkController().getZkServerAddress()));\n  }\n\n","bugFix":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"bugIntro":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList values = rsp.getValues();\n    if (cores.isZooKeeperAware()) {\n      String zkHost = cores.getZkController().getZkServerAddress();\n      SolrZkClient zkClient = cores.getZkController().getZkClient();\n      final ZkDynamicConfig dynConfig = ZkDynamicConfig.parseLines(zkClient.getConfig());\n      values.add(\"zkStatus\", getZkStatus(zkHost, dynConfig));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The Zookeeper status API is only available in Cloud mode\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList values = rsp.getValues();\n    if (cores.isZooKeeperAware()) {\n      values.add(\"zkStatus\", getZkStatus(cores.getZkController().getZkServerAddress()));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The Zookeeper status API is only available in Cloud mode\");\n    }\n  }\n\n","bugFix":["0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList values = rsp.getValues();\n    if (cores.isZooKeeperAware()) {\n      String zkHost = cores.getZkController().getZkServerAddress();\n      SolrZkClient zkClient = cores.getZkController().getZkClient();\n      final ZkDynamicConfig dynConfig = ZkDynamicConfig.parseLines(zkClient.getConfig());\n      values.add(\"zkStatus\", getZkStatus(zkHost, dynConfig));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The Zookeeper status API is only available in Cloud mode\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList values = rsp.getValues();\n    if (cores.isZooKeeperAware()) {\n      String zkHost = cores.getZkController().getZkServerAddress();\n      SolrZkClient zkClient = cores.getZkController().getZkClient();\n      final ZkDynamicConfig dynConfig = ZkDynamicConfig.parseLines(zkClient.getConfig());\n      values.add(\"zkStatus\", getZkStatus(zkHost, dynConfig));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The Zookeeper status API is only available in Cloud mode\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba055e19afc289adcb5bedaf68513793a7254012":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["ba055e19afc289adcb5bedaf68513793a7254012"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["0d64ccb282af39934aa3ae9ce6242eb24dcb7cfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}