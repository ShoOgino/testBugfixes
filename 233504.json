{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","commits":[{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","sourceNew":"  /**\n   * Convert a {@link Counter}\n   * @param counter counter instance\n   * @param compact if true then only return {@link Counter#getCount()}. If false\n   *                then return a map with a \"count\" field.\n   * @return map or object\n   */\n  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","sourceOld":"  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(String,Counter,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","sourceNew":"  /**\n   * Convert a {@link Counter}\n   * @param counter counter instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param compact if true then only return {@link Counter#getCount()}. If false\n   *                then return a map with a \"count\" field.\n   */\n  static void convertCounter(String name, Counter counter, PropertyFilter propertyFilter, boolean compact, BiConsumer<String, Object> consumer) {\n    if (compact) {\n      consumer.accept(name, counter.getCount());\n    } else {\n      if (propertyFilter.accept(\"count\")) {\n        Map<String, Object> response = new LinkedHashMap<>();\n        response.put(\"count\", counter.getCount());\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Counter}\n   * @param counter counter instance\n   * @param compact if true then only return {@link Counter#getCount()}. If false\n   *                then return a map with a \"count\" field.\n   * @return map or object\n   */\n  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertCounter(Counter,boolean).mjava","sourceNew":null,"sourceOld":"  static Object convertCounter(Counter counter, boolean compact) {\n    if (compact) {\n      return counter.getCount();\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", counter.getCount());\n      return response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}