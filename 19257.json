{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","commits":[{"id":"3e5922fb6b9f0e49b31ce0436420a7f4392031c4","date":1489025486,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#getShardUrls().mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  private List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    return getShards(zkHost, collection, streamContext, new ModifiableSolrParams());\n  }\n\n","sourceOld":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    return getShards(zkHost, collection, streamContext, new ModifiableSolrParams());\n  }\n\n","sourceOld":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n    Object core = streamContext.get(\"core\");\n    if (streamContext != null && streamContext.isLocal() && core != null) {\n      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));\n    }\n\n    return shards;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":["70d9c44f68e848648da304352cf7c045c33148f4","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["70d9c44f68e848648da304352cf7c045c33148f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"70d9c44f68e848648da304352cf7c045c33148f4":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["70d9c44f68e848648da304352cf7c045c33148f4"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70d9c44f68e848648da304352cf7c045c33148f4":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}