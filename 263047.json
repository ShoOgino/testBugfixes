{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d374631bb6f5665bd5907a6186a9bb283a315f7d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}