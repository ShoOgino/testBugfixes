{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = IndexReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = IndexReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = IndexReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = IndexReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = IndexReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = IndexReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    dir.setPreventDoubleWrite(false);\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = new IndexSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.shutdown();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.shutdown();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.shutdown();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.shutdown();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test uses IW unref'ed check which is unaware of retries\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","d19974432be9aed28ee7dca73bdf01d139e763a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseAbort().mjava","sourceNew":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test for \"commit on close\": open writer, then\n   * add a bunch of docs, making sure reader does not see\n   * them until writer has closed.  Then instead of\n   * closing the writer, call abort and verify reader sees\n   * nothing was added.  Then verify we can open the index\n   * and add docs to it.\n   */\n  public void testCommitOnCloseAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(10));\n    for (int i = 0; i < 14; i++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"first number of hits\", 14, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDoc(writer);\n    }\n    // Delete all docs:\n    writer.deleteDocuments(searchTerm);\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n    reader.close();\n\n    // Now, close the writer:\n    writer.rollback();\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n    reader.close();\n\n    // Now make sure we can re-open the index, add docs,\n    // and all is good:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMaxBufferedDocs(10));\n\n    // On abort, writer in fact may write to the same\n    // segments_N file:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n    }\n\n    for(int i=0;i<12;i++) {\n      for(int j=0;j<17;j++) {\n        TestIndexWriter.addDoc(writer);\n      }\n      IndexReader r = DirectoryReader.open(dir);\n      searcher = newSearcher(r);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      r.close();\n    }\n\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    searcher = newSearcher(r);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(\"didn't see changes after close\", 218, hits.length);\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}