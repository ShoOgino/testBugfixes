{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636c73dfa97dd282a3089d4239620475f2633519","date":1499025533,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","date":1499066739,"type":5,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdatesForMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","sourceNew":"    void writeDocValuesUpdatesForMerge(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n          rld.setIsMerging();\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","sourceOld":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#writeDocValuesUpdates(List[SegmentCommitInfo]).mjava","sourceNew":null,"sourceOld":"    void writeDocValuesUpdates(List<SegmentCommitInfo> infos) throws IOException {\n      boolean any = false;\n      for (SegmentCommitInfo info : infos) {\n        ReadersAndUpdates rld = get(info, false);\n        if (rld != null) {\n          any |= rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);\n        }\n      }\n      if (any) {\n        checkpoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636c73dfa97dd282a3089d4239620475f2633519":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","636c73dfa97dd282a3089d4239620475f2633519"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":["28288370235ed02234a64753cdbf0c6ec096304a","636c73dfa97dd282a3089d4239620475f2633519"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636c73dfa97dd282a3089d4239620475f2633519"]},"commit2Childs":{"636c73dfa97dd282a3089d4239620475f2633519":["30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["636c73dfa97dd282a3089d4239620475f2633519","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}