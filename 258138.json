{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new MultiThreadedHttpConnectionManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new HttpClient(connManager));\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new MultiThreadedHttpConnectionManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new HttpClient(connManager));\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new MultiThreadedHttpConnectionManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new HttpClient(connManager));\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this(zkHost, new LBHttpSolrServer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new ThreadSafeClientConnManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new DefaultHttpClient(connManager));\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new MultiThreadedHttpConnectionManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new HttpClient(connManager));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d4e28423cb9e38084a1bf50f3192b2877871f7a","date":1334664200,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new ThreadSafeClientConnManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new DefaultHttpClient(connManager));\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The address of the zookeeper quorum containing the cloud state\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new ThreadSafeClientConnManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new DefaultHttpClient(connManager));\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      connManager = new ThreadSafeClientConnManager();\n      this.zkHost = zkHost;\n      this.lbServer = new LBHttpSolrServer(new DefaultHttpClient(connManager));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9b79570dbb7dde96e0d8bf42339245b30df35b","date":1344117822,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.updatesToLeaders = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.updatesToLeaders = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.updatesToLeaders = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fb788ea821fd2677915770f1cada8122fce2cce","date":1379008291,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.updatesToLeaders = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53764ade528df7aa0563b47409995911a869be79","date":1382153048,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91fff4401b95144ad1b9863473e65208c1fbff7a","date":1386964026,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) throws MalformedURLException {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n    this(zkHost, true, 60);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n    this(zkHost, true, 60);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52209f74dc33b64e2e3576fe15b8c2d312809d7","date":1408896505,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this(zkHost, true);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost The client endpoint of the zookeeper quorum containing the cloud state,\n   * in the form HOST:PORT.\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this(zkHost, true);\n  }\n\n","bugFix":null,"bugIntro":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403b6d8b3e6cec80048e9cfc481bbffdd57517bb","date":1410598299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbServer.addQueryParams(STATE_VERSION);\n\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      setupStateVerParamOnQueryString(lbServer);\n\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791652abeeebb8642f54a7b42ca914c55805479a","date":1413382171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbServer.addQueryParams(STATE_VERSION);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbServer.addQueryParams(STATE_VERSION);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":"  public CloudSolrServer(String zkHost) {\n    super(zkHost);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object that connects to Zookeeper and is always aware\n   * of the SolrCloud state. If there is a fully redundant Zookeeper quorum and\n   * SolrCloud has enough replicas for every shard in a collection, there is no\n   * single point of failure. Updates will be sent to shard leaders by default.\n   * \n   * @param zkHost\n   *          The client endpoint of the zookeeper quorum containing the cloud\n   *          state. The full specification for this string is one or more comma\n   *          separated HOST:PORT values, followed by an optional chroot value\n   *          that starts with a forward slash. Using a chroot allows multiple\n   *          applications to coexist in one ensemble. For full details, see the\n   *          Zookeeper documentation. Some examples:\n   *          <p/>\n   *          \"host1:2181\"\n   *          <p/>\n   *          \"host1:2181,host2:2181,host3:2181/mysolrchroot\"\n   *          <p/>\n   *          \"zoo1.example.com:2181,zoo2.example.com:2181,zoo3.example.com:2181\"\n   */\n  public CloudSolrServer(String zkHost) {\n      this.zkHost = zkHost;\n      this.clientIsInternal = true;\n      this.myClient = HttpClientUtil.createClient(null);\n      this.lbServer = new LBHttpSolrServer(myClient);\n      this.lbServer.setRequestWriter(new BinaryRequestWriter());\n      this.lbServer.setParser(new BinaryResponseParser());\n      this.updatesToLeaders = true;\n      shutdownLBHttpSolrServer = true;\n      lbServer.addQueryParams(STATE_VERSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0080a8fdc299a09124dea014ed206981c1b8c54","date":1420037360,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(String).mjava","sourceNew":null,"sourceOld":"  public CloudSolrServer(String zkHost) {\n    super(zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["791652abeeebb8642f54a7b42ca914c55805479a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["eb99886ff640d94edb43e0d36112a2b7023379ba","fd9b79570dbb7dde96e0d8bf42339245b30df35b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53764ade528df7aa0563b47409995911a869be79":["4fb788ea821fd2677915770f1cada8122fce2cce"],"791652abeeebb8642f54a7b42ca914c55805479a":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"c0080a8fdc299a09124dea014ed206981c1b8c54":["bafca15d8e408346a67f4282ad1143b88023893b"],"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["9279b175e5e66258442d2123a50f052219a9cc1b"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb","791652abeeebb8642f54a7b42ca914c55805479a"],"91fff4401b95144ad1b9863473e65208c1fbff7a":["53764ade528df7aa0563b47409995911a869be79"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"9d4e28423cb9e38084a1bf50f3192b2877871f7a":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"fd9b79570dbb7dde96e0d8bf42339245b30df35b":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["9d4e28423cb9e38084a1bf50f3192b2877871f7a"],"9279b175e5e66258442d2123a50f052219a9cc1b":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"4fb788ea821fd2677915770f1cada8122fce2cce":["fd9b79570dbb7dde96e0d8bf42339245b30df35b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["eb99886ff640d94edb43e0d36112a2b7023379ba","fd9b79570dbb7dde96e0d8bf42339245b30df35b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["53764ade528df7aa0563b47409995911a869be79","91fff4401b95144ad1b9863473e65208c1fbff7a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["91fff4401b95144ad1b9863473e65208c1fbff7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0080a8fdc299a09124dea014ed206981c1b8c54"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bafca15d8e408346a67f4282ad1143b88023893b":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"53764ade528df7aa0563b47409995911a869be79":["91fff4401b95144ad1b9863473e65208c1fbff7a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"791652abeeebb8642f54a7b42ca914c55805479a":["bafca15d8e408346a67f4282ad1143b88023893b","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"c0080a8fdc299a09124dea014ed206981c1b8c54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403b6d8b3e6cec80048e9cfc481bbffdd57517bb":["791652abeeebb8642f54a7b42ca914c55805479a","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"91fff4401b95144ad1b9863473e65208c1fbff7a":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["9d4e28423cb9e38084a1bf50f3192b2877871f7a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9d4e28423cb9e38084a1bf50f3192b2877871f7a":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"fd9b79570dbb7dde96e0d8bf42339245b30df35b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4fb788ea821fd2677915770f1cada8122fce2cce","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fd9b79570dbb7dde96e0d8bf42339245b30df35b","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["403b6d8b3e6cec80048e9cfc481bbffdd57517bb"],"4fb788ea821fd2677915770f1cada8122fce2cce":["53764ade528df7aa0563b47409995911a869be79"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}