{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","commits":[{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2","date":1534530377,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01a89a5205df41cc824a598466875979cf93f9b0","date":1536160830,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n      } else {\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n    map.put(\"robust\", robust);\n    map.put(\"scale\", scale);\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe323fac8aa24c486bbf238b6413bcf5f274ea","date":1547324745,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n    boolean bivariate = false;\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else if(values[0] instanceof List) {\n      bivariate = true;\n      List<Number> vec = (List<Number>)values[0];\n      double[][] data = new double[vec.size()][1];\n      for(int i=0; i<vec.size(); i++) {\n        data[i][0] = vec.get(i).doubleValue();\n      }\n      observations = new Matrix(data);\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation vector or matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n      } else {\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n    map.put(\"robust\", robust);\n    map.put(\"scale\", scale);\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust, bivariate);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n      } else {\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n    map.put(\"robust\", robust);\n    map.put(\"scale\", scale);\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n    boolean bivariate = false;\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else if(values[0] instanceof List) {\n      bivariate = true;\n      List<Number> vec = (List<Number>)values[0];\n      double[][] data = new double[vec.size()][1];\n      for(int i=0; i<vec.size(); i++) {\n        data[i][0] = vec.get(i).doubleValue();\n      }\n      observations = new Matrix(data);\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation vector or matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n      } else {\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n    map.put(\"robust\", robust);\n    map.put(\"scale\", scale);\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust, bivariate);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.\");\n    }\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n    int k = 5;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n    boolean bivariate = false;\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else if(values[0] instanceof List) {\n      bivariate = true;\n      List<Number> vec = (List<Number>)values[0];\n      double[][] data = new double[vec.size()][1];\n      for(int i=0; i<vec.size(); i++) {\n        data[i][0] = vec.get(i).doubleValue();\n      }\n      observations = new Matrix(data);\n    } else {\n      throw new IOException(\"The first parameter for knnRegress should be the observation vector or matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for knnRegress should be outcome array. \");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number) values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knnRegress should be k. \");\n    }\n\n    if(values.length == 4) {\n      if(values[3] instanceof DistanceMeasure) {\n        distanceMeasure = (DistanceMeasure) values[3];\n      } else {\n        throw new IOException(\"The fourth parameter for knnRegress should be a distance measure. \");\n      }\n    }\n\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    Map map = new HashMap();\n    map.put(\"k\", k);\n    map.put(\"observations\", observations.getRowCount());\n    map.put(\"features\", observations.getColumnCount());\n    map.put(\"distance\", distanceMeasure.getClass().getSimpleName());\n    map.put(\"robust\", robust);\n    map.put(\"scale\", scale);\n\n    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust, bivariate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["0ffe323fac8aa24c486bbf238b6413bcf5f274ea"],"0ffe323fac8aa24c486bbf238b6413bcf5f274ea":["01a89a5205df41cc824a598466875979cf93f9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"01a89a5205df41cc824a598466875979cf93f9b0":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe323fac8aa24c486bbf238b6413bcf5f274ea":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["01a89a5205df41cc824a598466875979cf93f9b0"],"01a89a5205df41cc824a598466875979cf93f9b0":["0ffe323fac8aa24c486bbf238b6413bcf5f274ea"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}