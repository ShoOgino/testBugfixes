{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#getFeed(ServerBaseFeed).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#getFeed(ServerBaseFeed).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#getFeed(ServerBaseFeed).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#getFeed(org.apache.lucene.gdata.data.ServerBaseFeed)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public BaseFeed getFeed(ServerBaseFeed feed) throws StorageException {\n        if (feed.getId() == null)\n            throw new StorageException(\"can not get feed -- feed id is null\");\n        if (feed.getStartIndex() < 1)\n            feed.setStartIndex(1);\n        if (feed.getItemsPerPage() < 0)\n            feed.setItemsPerPage(25);\n\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Fetching feed for feedID: \" + feed.getId()\n                    + \"; start-index: \" + feed.getStartIndex()\n                    + \"; items per page: \" + feed.getItemsPerPage());\n\n       BaseFeed<BaseFeed, BaseEntry> persistentFeed = getFeedOnly(feed.getId(),feed.getServiceType());\n       /*\n        * prevent previously added entries in long running storage instances\n        */\n       clearDynamicElements(persistentFeed);\n        Query query = this.container.query();\n        query.constrain(DB4oEntry.class);\n        query.descend(\"feedId\").constrain(feed.getId()).equal();\n        query.descend(\"updateTime\").orderDescending();\n\n        ObjectSet<DB4oEntry> set = query.execute();\n       \n        int size = set.size();\n        \n        if (size < feed.getStartIndex()) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"no entries found for feed constrain -- feedID: \"\n                        + feed.getId() + \"; start-index: \"\n                        + feed.getStartIndex() + \"; items per page: \"\n                        + feed.getItemsPerPage());\n            return persistentFeed;\n        }\n\n        int start = feed.getStartIndex() - 1;\n        int items = start + feed.getItemsPerPage();\n        if (items > size)\n            items = size;\n        \n        List<DB4oEntry> sublist = set.subList(start, items);\n        \n        for (DB4oEntry entry : sublist) {\n            persistentFeed.getEntries().add(clearDynamicElements(entry.getEntry()));\n        }\n        this.container.activate(persistentFeed,RENDER_ACTIVATION_DEPTH);\n        return persistentFeed;\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#getFeed(org.apache.lucene.gdata.data.ServerBaseFeed)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public BaseFeed getFeed(ServerBaseFeed feed) throws StorageException {\n        if (feed.getId() == null)\n            throw new StorageException(\"can not get feed -- feed id is null\");\n        if (feed.getStartIndex() < 1)\n            feed.setStartIndex(1);\n        if (feed.getItemsPerPage() < 0)\n            feed.setItemsPerPage(25);\n\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Fetching feed for feedID: \" + feed.getId()\n                    + \"; start-index: \" + feed.getStartIndex()\n                    + \"; items per page: \" + feed.getItemsPerPage());\n\n       BaseFeed<BaseFeed, BaseEntry> persistentFeed = getFeedOnly(feed.getId(),feed.getServiceType());\n       /*\n        * prevent previously added entries in long running storage instances\n        */\n       clearDynamicElements(persistentFeed);\n        Query query = this.container.query();\n        query.constrain(DB4oEntry.class);\n        query.descend(\"feedId\").constrain(feed.getId()).equal();\n        query.descend(\"updateTime\").orderDescending();\n\n        ObjectSet<DB4oEntry> set = query.execute();\n       \n        int size = set.size();\n        \n        if (size < feed.getStartIndex()) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"no entries found for feed constrain -- feedID: \"\n                        + feed.getId() + \"; start-index: \"\n                        + feed.getStartIndex() + \"; items per page: \"\n                        + feed.getItemsPerPage());\n            return persistentFeed;\n        }\n\n        int start = feed.getStartIndex() - 1;\n        int items = start + feed.getItemsPerPage();\n        if (items > size)\n            items = size;\n        \n        List<DB4oEntry> sublist = set.subList(start, items);\n        \n        for (DB4oEntry entry : sublist) {\n            persistentFeed.getEntries().add(clearDynamicElements(entry.getEntry()));\n        }\n        this.container.activate(persistentFeed,RENDER_ACTIVATION_DEPTH);\n        return persistentFeed;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#getFeed(ServerBaseFeed).mjava","sourceNew":null,"sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#getFeed(org.apache.lucene.gdata.data.ServerBaseFeed)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public BaseFeed getFeed(ServerBaseFeed feed) throws StorageException {\n        if (feed.getId() == null)\n            throw new StorageException(\"can not get feed -- feed id is null\");\n        if (feed.getStartIndex() < 1)\n            feed.setStartIndex(1);\n        if (feed.getItemsPerPage() < 0)\n            feed.setItemsPerPage(25);\n\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Fetching feed for feedID: \" + feed.getId()\n                    + \"; start-index: \" + feed.getStartIndex()\n                    + \"; items per page: \" + feed.getItemsPerPage());\n\n       BaseFeed<BaseFeed, BaseEntry> persistentFeed = getFeedOnly(feed.getId(),feed.getServiceType());\n       /*\n        * prevent previously added entries in long running storage instances\n        */\n       clearDynamicElements(persistentFeed);\n        Query query = this.container.query();\n        query.constrain(DB4oEntry.class);\n        query.descend(\"feedId\").constrain(feed.getId()).equal();\n        query.descend(\"updateTime\").orderDescending();\n\n        ObjectSet<DB4oEntry> set = query.execute();\n       \n        int size = set.size();\n        \n        if (size < feed.getStartIndex()) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"no entries found for feed constrain -- feedID: \"\n                        + feed.getId() + \"; start-index: \"\n                        + feed.getStartIndex() + \"; items per page: \"\n                        + feed.getItemsPerPage());\n            return persistentFeed;\n        }\n\n        int start = feed.getStartIndex() - 1;\n        int items = start + feed.getItemsPerPage();\n        if (items > size)\n            items = size;\n        \n        List<DB4oEntry> sublist = set.subList(start, items);\n        \n        for (DB4oEntry entry : sublist) {\n            persistentFeed.getEntries().add(clearDynamicElements(entry.getEntry()));\n        }\n        this.container.activate(persistentFeed,RENDER_ACTIVATION_DEPTH);\n        return persistentFeed;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}