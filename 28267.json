{"path":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":null,"sourceOld":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","sourceOld":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f72f36b556a12c6d5004378a256b03015ef24d8","date":1279497528,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379ec215b82e132c6741b5211d9cd8cfc30aa02a","date":1280784799,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6da674254994fc11839b3f6ad511ef8871a94f7","date":1293591321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0b11f32acac13cc087cc735808dfe19c2b52673b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"801b1a1dc0949ff5c35e8d6b60733efd3b85900b","date":1294839862,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b11f32acac13cc087cc735808dfe19c2b52673b","date":1295972884,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":["b6da674254994fc11839b3f6ad511ef8871a94f7","9b87acd61509ed222a7ae58c584568eca5a6243e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3536183a1f7bf022125eae46949218bba35d43e3","date":1296823051,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    copyFile(getFile(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  @Test\n  public void testBackup() throws Exception {\n    masterJetty.stop();\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master1.xml\", \n                          \"solrconfig.xml\");\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    nDocs--;\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      @Override\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n    Directory dir = new SimpleFSDirectory(snapDir.getAbsoluteFile());\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(nDocs, hits.totalHits);\n    searcher.close();\n    dir.close();\n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["379ec215b82e132c6741b5211d9cd8cfc30aa02a"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["0b11f32acac13cc087cc735808dfe19c2b52673b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","b6da674254994fc11839b3f6ad511ef8871a94f7"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"801b1a1dc0949ff5c35e8d6b60733efd3b85900b":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"379ec215b82e132c6741b5211d9cd8cfc30aa02a":["9f72f36b556a12c6d5004378a256b03015ef24d8"],"3536183a1f7bf022125eae46949218bba35d43e3":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"0b11f32acac13cc087cc735808dfe19c2b52673b":["801b1a1dc0949ff5c35e8d6b60733efd3b85900b"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["3536183a1f7bf022125eae46949218bba35d43e3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","9f72f36b556a12c6d5004378a256b03015ef24d8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","379ec215b82e132c6741b5211d9cd8cfc30aa02a"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9f72f36b556a12c6d5004378a256b03015ef24d8":["1da8d55113b689b06716246649de6f62430f15c0"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b6da674254994fc11839b3f6ad511ef8871a94f7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["3536183a1f7bf022125eae46949218bba35d43e3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","3536183a1f7bf022125eae46949218bba35d43e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["3536183a1f7bf022125eae46949218bba35d43e3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","801b1a1dc0949ff5c35e8d6b60733efd3b85900b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","3536183a1f7bf022125eae46949218bba35d43e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["70ad682703b8585f5d0a637efec044d57ec05efb","801b1a1dc0949ff5c35e8d6b60733efd3b85900b","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["3536183a1f7bf022125eae46949218bba35d43e3"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"379ec215b82e132c6741b5211d9cd8cfc30aa02a":["b6da674254994fc11839b3f6ad511ef8871a94f7","70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"801b1a1dc0949ff5c35e8d6b60733efd3b85900b":["0b11f32acac13cc087cc735808dfe19c2b52673b","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0b11f32acac13cc087cc735808dfe19c2b52673b":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"3536183a1f7bf022125eae46949218bba35d43e3":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","9f72f36b556a12c6d5004378a256b03015ef24d8"],"9f72f36b556a12c6d5004378a256b03015ef24d8":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","5f4e87790277826a2aea119328600dfb07761f32"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}