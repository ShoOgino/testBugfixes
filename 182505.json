{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3eb251dab40cb8cabcea8ed646a2c060d423f18","date":1570756765,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRegressAndPredict().mjava","sourceNew":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    @SuppressWarnings({\"rawtypes\"})\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n\n","sourceOld":"  @Test\n  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["c3eb251dab40cb8cabcea8ed646a2c060d423f18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","c3eb251dab40cb8cabcea8ed646a2c060d423f18"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["9ba1b632c041956c93c41aa1143d16a567014891","b0b597c65628ca9e73913a07e81691f8229bae35"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c3eb251dab40cb8cabcea8ed646a2c060d423f18","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}