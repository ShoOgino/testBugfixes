{"path":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","commits":[{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"/dev/null","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["2586f96f60332eb97ecd2934b0763791462568b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2586f96f60332eb97ecd2934b0763791462568b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}