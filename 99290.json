{"path":"lucene/backwards/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":null,"sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}