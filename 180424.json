{"path":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","commits":[{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"/dev/null","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"/dev/null","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"/dev/null","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#wasReversed(SolrQueryParser,String).mjava","sourceNew":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","sourceOld":"  /** fragile assert: depends on our implementation, but cleanest way to check for now */ \n  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {\n    Query q = qp.parse(query);\n    if (!(q instanceof AutomatonQuery))\n      return false;\n    // this is a hack to get the protected Automaton field in AutomatonQuery, \n    // may break in later lucene versions - we have no getter... for good reasons.\n    final Field automatonField = AutomatonQuery.class.getDeclaredField(\"automaton\");\n    automatonField.setAccessible(true);\n    Automaton automaton = (Automaton) automatonField.get(q);\n    String prefix = SpecialOperations.getCommonPrefix(automaton);\n    return prefix.length() > 0 && prefix.charAt(0) == '\\u0001';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"c26f00b574427b55127e869b935845554afde1fa":["02f9424edb9eccc558626693e4a4cd43f8ce2622","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":[],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","85a883878c0af761245ab048babc63d099f835f3","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}