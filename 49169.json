{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","commits":[{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}