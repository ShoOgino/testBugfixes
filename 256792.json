{"path":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    // but test also has hard coded assumptions about these field types *NOT* having DV when *NOT* points\n    // so use docvalue if and only if we are using points...\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, System.getProperty(NUMERIC_POINTS_SYSPROP));\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    // but test also has hard coded assumptions about these field types *NOT* having DV when *NOT* points\n    // so use docvalue if and only if we are using points...\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, System.getProperty(NUMERIC_POINTS_SYSPROP));\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    // but test also has hard coded assumptions about these field types *NOT* having DV when *NOT* points\n    // so use docvalue if and only if we are using points...\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, System.getProperty(NUMERIC_POINTS_SYSPROP));\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763e0095977b0f4f5041a8798bc86971ff6d60d8","date":1498847008,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // This tests explicitly compares Trie DV with non-DV Trie with DV Points\n    // so we don't want randomized DocValues on all Trie fields\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"false\");\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 false, h.getCore().getLatestSchema().getField(\"foo_i\").hasDocValues());\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 true, h.getCore().getLatestSchema().getField(\"foo_i_dv\").hasDocValues());\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 true, h.getCore().getLatestSchema().getField(\"foo_i_p\").hasDocValues());\n    \n    assertEquals(\"Type: Schema assumptions are broken\",\n                 TrieIntField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i\").getType().getClass());\n    assertEquals(\"Type: Schema assumptions are broken\",\n                 TrieIntField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i_dv\").getType().getClass());\n    assertEquals(\"Type: Schema assumptions are broken\",\n                 IntPointField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i_p\").getType().getClass());\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    // but test also has hard coded assumptions about these field types *NOT* having DV when *NOT* points\n    // so use docvalue if and only if we are using points...\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, System.getProperty(NUMERIC_POINTS_SYSPROP));\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","date":1499066739,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // This tests explicitly compares Trie DV with non-DV Trie with DV Points\n    // so we don't want randomized DocValues on all Trie fields\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"false\");\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 false, h.getCore().getLatestSchema().getField(\"foo_i\").hasDocValues());\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 true, h.getCore().getLatestSchema().getField(\"foo_i_dv\").hasDocValues());\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 true, h.getCore().getLatestSchema().getField(\"foo_i_p\").hasDocValues());\n    \n    assertEquals(\"Type: Schema assumptions are broken\",\n                 TrieIntField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i\").getType().getClass());\n    assertEquals(\"Type: Schema assumptions are broken\",\n                 TrieIntField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i_dv\").getType().getClass());\n    assertEquals(\"Type: Schema assumptions are broken\",\n                 IntPointField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i_p\").getType().getClass());\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    // but test also has hard coded assumptions about these field types *NOT* having DV when *NOT* points\n    // so use docvalue if and only if we are using points...\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, System.getProperty(NUMERIC_POINTS_SYSPROP));\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestRandomDVFaceting#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // This tests explicitly compares Trie DV with non-DV Trie with DV Points\n    // so we don't want randomized DocValues on all Trie fields\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"false\");\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 false, h.getCore().getLatestSchema().getField(\"foo_i\").hasDocValues());\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 true, h.getCore().getLatestSchema().getField(\"foo_i_dv\").hasDocValues());\n    assertEquals(\"DocValues: Schema assumptions are broken\",\n                 true, h.getCore().getLatestSchema().getField(\"foo_i_p\").hasDocValues());\n    \n    assertEquals(\"Type: Schema assumptions are broken\",\n                 TrieIntField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i\").getType().getClass());\n    assertEquals(\"Type: Schema assumptions are broken\",\n                 TrieIntField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i_dv\").getType().getClass());\n    assertEquals(\"Type: Schema assumptions are broken\",\n                 IntPointField.class,\n                 h.getCore().getLatestSchema().getField(\"foo_i_p\").getType().getClass());\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    // but test also has hard coded assumptions about these field types *NOT* having DV when *NOT* points\n    // so use docvalue if and only if we are using points...\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, System.getProperty(NUMERIC_POINTS_SYSPROP));\n    \n    initCore(\"solrconfig-basic.xml\",\"schema-docValuesFaceting.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","763e0095977b0f4f5041a8798bc86971ff6d60d8"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":["28288370235ed02234a64753cdbf0c6ec096304a","763e0095977b0f4f5041a8798bc86971ff6d60d8"],"763e0095977b0f4f5041a8798bc86971ff6d60d8":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["763e0095977b0f4f5041a8798bc86971ff6d60d8"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"30c8e5574b55d57947e989443dfde611646530ee":[],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":[],"763e0095977b0f4f5041a8798bc86971ff6d60d8":["30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","763e0095977b0f4f5041a8798bc86971ff6d60d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}