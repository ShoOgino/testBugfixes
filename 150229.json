{"path":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","sourceNew":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af7005974a7d7f71beef18cb9aa918b9d968d163","date":1532074399,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","sourceNew":"  public static void testPQ(int count, Random gen) {\n    PriorityQueue<Integer> pq = new IntegerQueue(count);\n    int sum = 0, sum2 = 0;\n\n    for (int i = 0; i < count; i++) {\n      int next = gen.nextInt();\n      sum += next;\n      pq.add(next);\n    }\n\n    //      Date end = new Date();\n\n    //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    //      System.out.println(\" microseconds/put\");\n\n    //      start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (int i = 0; i < count; i++) {\n      Integer next = pq.pop();\n      assertTrue(next.intValue() >= last);\n      last = next.intValue();\n      sum2 += last;\n    }\n\n    assertEquals(sum, sum2);\n    //      end = new Date();\n\n    //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n    //      System.out.println(\" microseconds/pop\");\n  }\n\n","sourceOld":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af7005974a7d7f71beef18cb9aa918b9d968d163"],"af7005974a7d7f71beef18cb9aa918b9d968d163":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["af7005974a7d7f71beef18cb9aa918b9d968d163"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"af7005974a7d7f71beef18cb9aa918b9d968d163":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}