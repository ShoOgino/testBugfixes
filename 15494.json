{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","commits":[{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                             NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                             NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                             NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                             NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f9362075f92dff89425ca488b480f70d565d66e7","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["f9362075f92dff89425ca488b480f70d565d66e7"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"f9362075f92dff89425ca488b480f70d565d66e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f9362075f92dff89425ca488b480f70d565d66e7","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9362075f92dff89425ca488b480f70d565d66e7"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f9362075f92dff89425ca488b480f70d565d66e7":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}