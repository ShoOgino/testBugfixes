{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/EightFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","commits":[{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/EightFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/EightFlagsIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n\n      int capacityNeeded = values.length + 8;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n\n      // process indicator, until we read 8 values, or end-of-buffer\n      while (ordinal != 8) {\n        if (DECODE_TABLE[indicator][ordinal++] == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 2;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = 1;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDecode(BytesRef buf, IntsRef values, int upto) {\n    while (buf.offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[buf.offset++] & 0xFF;\n      int ordinal = 0;\n\n      int capacityNeeded = values.length + 8;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n\n      // process indicator, until we read 8 values, or end-of-buffer\n      while (ordinal != 8) {\n        if (DECODE_TABLE[indicator][ordinal++] == 0) {\n          if (buf.offset == upto) { // end of buffer\n            return;\n          }\n          // decode the value from the stream.\n          values.ints[values.length++] = VInt8.decode(buf) + 2; \n        } else {\n          values.ints[values.length++] = 1;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/EightFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/EightFlagsIntDecoder#doDecode(BytesRef,IntsRef,int).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n\n      int capacityNeeded = values.length + 8;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n\n      // process indicator, until we read 8 values, or end-of-buffer\n      while (ordinal != 8) {\n        if (DECODE_TABLE[indicator][ordinal++] == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 2;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = 1;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDecode(BytesRef buf, IntsRef values, int upto) {\n    while (buf.offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[buf.offset++] & 0xFF;\n      int ordinal = 0;\n\n      int capacityNeeded = values.length + 8;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n\n      // process indicator, until we read 8 values, or end-of-buffer\n      while (ordinal != 8) {\n        if (DECODE_TABLE[indicator][ordinal++] == 0) {\n          if (buf.offset == upto) { // end of buffer\n            return;\n          }\n          // decode the value from the stream.\n          values.ints[values.length++] = VInt8.decode(buf) + 2; \n        } else {\n          values.ints[values.length++] = 1;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/EightFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/EightFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n\n      int capacityNeeded = values.length + 8;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n\n      // process indicator, until we read 8 values, or end-of-buffer\n      while (ordinal != 8) {\n        if (DECODE_TABLE[indicator][ordinal++] == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 2;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = 1;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n\n      int capacityNeeded = values.length + 8;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n\n      // process indicator, until we read 8 values, or end-of-buffer\n      while (ordinal != 8) {\n        if (DECODE_TABLE[indicator][ordinal++] == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 2;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = 1;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["ad883775f8b169218a8da5ffeb7ae26459443936"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"ad883775f8b169218a8da5ffeb7ae26459443936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","ad883775f8b169218a8da5ffeb7ae26459443936"],"ad883775f8b169218a8da5ffeb7ae26459443936":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}