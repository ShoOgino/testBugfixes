{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","commits":[{"id":"df05c92db04724e97f8298302f2aaf06f927589f","date":1483040356,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    // Basic test\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 2);\n    long nullCount = 0;\n    for(Tuple t : tuples) {\n      nullCount += t.getLong(\"nullCount\");\n    }\n\n    assertEquals(nullCount, 6L);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de0b5d8cac74be1676bcc2f805bc0d0630176659","date":1483048659,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    // Basic test\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 2);\n    long nullCount = 0;\n    for(Tuple t : tuples) {\n      nullCount += t.getLong(\"nullCount\");\n    }\n\n    assertEquals(nullCount, 6L);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    // Basic test\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 2);\n    long nullCount = 0;\n    for(Tuple t : tuples) {\n      nullCount += t.getLong(\"nullCount\");\n    }\n\n    assertEquals(nullCount, 6L);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","sourceNew":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n\n      // Basic test\n      stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertTrue(tuples.size() == 2);\n      long nullCount = 0;\n      for (Tuple t : tuples) {\n        nullCount += t.getLong(\"nullCount\");\n      }\n\n      assertEquals(nullCount, 6L);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    // Basic test\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 2);\n    long nullCount = 0;\n    for(Tuple t : tuples) {\n      nullCount += t.getLong(\"nullCount\");\n    }\n\n    assertEquals(nullCount, 6L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","sourceNew":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n\n      // Basic test\n      stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertTrue(tuples.size() == 2);\n      long nullCount = 0;\n      for (Tuple t : tuples) {\n        nullCount += t.getLong(\"nullCount\");\n      }\n\n      assertEquals(nullCount, 6L);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    // Basic test\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n    tuples = getTuples(stream);\n    assertTrue(tuples.size() == 2);\n    long nullCount = 0;\n    for(Tuple t : tuples) {\n      nullCount += t.getLong(\"nullCount\");\n    }\n\n    assertEquals(nullCount, 6L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelNullStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelNullStream().mjava","sourceNew":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n\n      // Basic test\n      stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertTrue(tuples.size() == 2);\n      long nullCount = 0;\n      for (Tuple t : tuples) {\n        nullCount += t.getLong(\"nullCount\");\n      }\n\n      assertEquals(nullCount, 6L);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelNullStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n\n      // Basic test\n      stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"nullCount desc\\\", null(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), by=\\\"a_i asc\\\"))\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertTrue(tuples.size() == 2);\n      long nullCount = 0;\n      for (Tuple t : tuples) {\n        nullCount += t.getLong(\"nullCount\");\n      }\n\n      assertEquals(nullCount, 6L);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df05c92db04724e97f8298302f2aaf06f927589f"],"df05c92db04724e97f8298302f2aaf06f927589f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de0b5d8cac74be1676bcc2f805bc0d0630176659"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"df05c92db04724e97f8298302f2aaf06f927589f":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de0b5d8cac74be1676bcc2f805bc0d0630176659","df05c92db04724e97f8298302f2aaf06f927589f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}