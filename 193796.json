{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","commits":[{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers < mm)\n      return doc = NO_MORE_DOCS;\n    // advance all Scorers in heap at smaller docs to at least target\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        minheapAdjust(0);\n      } else {\n        minheapRemoveRoot();\n        numScorers--;\n        if (numScorers < mm ) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n\n    evaluateSmallestDocInHeap();\n\n    if (nrMatchers >= mm) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"681329f0d8aa847be84b952db62031b9c15f96c5","date":1364143277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target the target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers < mm)\n      return doc = NO_MORE_DOCS;\n    // advance all Scorers in heap at smaller docs to at least target\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        minheapSiftDown(0);\n      } else {\n        minheapRemoveRoot();\n        numScorers--;\n        if (numScorers < mm) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      //assert minheapCheck();\n    }\n\n    evaluateSmallestDocInHeap();\n\n    if (nrMatchers >= mm) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers < mm)\n      return doc = NO_MORE_DOCS;\n    // advance all Scorers in heap at smaller docs to at least target\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        minheapAdjust(0);\n      } else {\n        minheapRemoveRoot();\n        numScorers--;\n        if (numScorers < mm ) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n\n    evaluateSmallestDocInHeap();\n\n    if (nrMatchers >= mm) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    // Same logic as in nextDoc\n    for (ScorerWrapper s = lead; s != null; s = s.next) {\n      final ScorerWrapper evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        evicted.doc = evicted.scorer.advance(target);\n        head.add(evicted);\n      }\n    }\n\n    // But this time there might also be scorers in 'head' behind the desired\n    // target so we need to do the same thing that we did on 'lead' on 'head'\n    ScorerWrapper headTop = head.top();\n    while (headTop.doc < target) {\n      final ScorerWrapper evicted = insertTailWithOverFlow(headTop);\n      // We know that the tail is full since it contains at most\n      // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n      // entries to it, so evicted is not null\n      evicted.doc = evicted.scorer.advance(target);\n      headTop = head.updateTop(evicted);\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the advance() method on the subscorers.\n   * \n   * @param target the target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers < mm)\n      return doc = NO_MORE_DOCS;\n    // advance all Scorers in heap at smaller docs to at least target\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        minheapSiftDown(0);\n      } else {\n        minheapRemoveRoot();\n        numScorers--;\n        if (numScorers < mm) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      //assert minheapCheck();\n    }\n\n    evaluateSmallestDocInHeap();\n\n    if (nrMatchers >= mm) {\n      return doc;\n    } else {\n      return nextDoc();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    // Same logic as in nextDoc\n    for (DisiWrapper<Scorer> s = lead; s != null; s = s.next) {\n      final DisiWrapper<Scorer> evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        evicted.doc = evicted.iterator.advance(target);\n        head.add(evicted);\n      }\n    }\n\n    // But this time there might also be scorers in 'head' behind the desired\n    // target so we need to do the same thing that we did on 'lead' on 'head'\n    DisiWrapper<Scorer> headTop = head.top();\n    while (headTop.doc < target) {\n      final DisiWrapper<Scorer> evicted = insertTailWithOverFlow(headTop);\n      // We know that the tail is full since it contains at most\n      // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n      // entries to it, so evicted is not null\n      evicted.doc = evicted.iterator.advance(target);\n      headTop = head.updateTop(evicted);\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    // Same logic as in nextDoc\n    for (ScorerWrapper s = lead; s != null; s = s.next) {\n      final ScorerWrapper evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        evicted.doc = evicted.scorer.advance(target);\n        head.add(evicted);\n      }\n    }\n\n    // But this time there might also be scorers in 'head' behind the desired\n    // target so we need to do the same thing that we did on 'lead' on 'head'\n    ScorerWrapper headTop = head.top();\n    while (headTop.doc < target) {\n      final ScorerWrapper evicted = insertTailWithOverFlow(headTop);\n      // We know that the tail is full since it contains at most\n      // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n      // entries to it, so evicted is not null\n      evicted.doc = evicted.scorer.advance(target);\n      headTop = head.updateTop(evicted);\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    // Same logic as in nextDoc\n    for (DisiWrapper<Scorer> s = lead; s != null; s = s.next) {\n      final DisiWrapper<Scorer> evicted = insertTailWithOverFlow(s);\n      if (evicted != null) {\n        evicted.doc = evicted.iterator.advance(target);\n        head.add(evicted);\n      }\n    }\n\n    // But this time there might also be scorers in 'head' behind the desired\n    // target so we need to do the same thing that we did on 'lead' on 'head'\n    DisiWrapper<Scorer> headTop = head.top();\n    while (headTop.doc < target) {\n      final DisiWrapper<Scorer> evicted = insertTailWithOverFlow(headTop);\n      // We know that the tail is full since it contains at most\n      // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n      // entries to it, so evicted is not null\n      evicted.doc = evicted.iterator.advance(target);\n      headTop = head.updateTop(evicted);\n    }\n\n    setDocAndFreq();\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["681329f0d8aa847be84b952db62031b9c15f96c5"],"34960be55e437a6c96fe66046bf22d33346059f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"681329f0d8aa847be84b952db62031b9c15f96c5":["34960be55e437a6c96fe66046bf22d33346059f6"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"34960be55e437a6c96fe66046bf22d33346059f6":["681329f0d8aa847be84b952db62031b9c15f96c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960be55e437a6c96fe66046bf22d33346059f6"],"681329f0d8aa847be84b952db62031b9c15f96c5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}