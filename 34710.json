{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testResults(SolrParams,String,String...).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testResults(SolrParams,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void testResults(SolrParams params, String analyticsRequest, String... tests) {\n    String coreJson = queryCoreJson(params);\n    Object cloudObj = queryCloudObject(params);\n    \n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n      // Single-Sharded\n      String err = null;\n      try {\n        err = JSONTestUtil.match(coreJson, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Single-Sharded Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + coreJson +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n      \n      // Cloud\n      err = null;\n      try {\n        err = JSONTestUtil.matchObj(cloudObj, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Solr Cloud Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + Utils.toJSONString(cloudObj) +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testResults(SolrParams,String,String...).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testResults(SolrParams,String,String...).mjava","sourceNew":"  private void testResults(SolrParams params, String analyticsRequest, String... tests) {\n    String coreJson = queryCoreJson(params);\n    Object cloudObj = queryCloudObject(params);\n\n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n      // Single-Sharded\n      String err = null;\n      try {\n        err = JSONTestUtil.match(coreJson, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Single-Sharded Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + coreJson +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n\n      // Cloud\n      err = null;\n      try {\n        err = JSONTestUtil.matchObj(cloudObj, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Solr Cloud Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + Utils.toJSONString(cloudObj) +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n    }\n  }\n\n","sourceOld":"  private void testResults(SolrParams params, String analyticsRequest, String... tests) {\n    String coreJson = queryCoreJson(params);\n    Object cloudObj = queryCloudObject(params);\n    \n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n      // Single-Sharded\n      String err = null;\n      try {\n        err = JSONTestUtil.match(coreJson, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Single-Sharded Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + coreJson +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n      \n      // Cloud\n      err = null;\n      try {\n        err = JSONTestUtil.matchObj(cloudObj, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Solr Cloud Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + Utils.toJSONString(cloudObj) +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testResults(SolrParams,String,String...).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testResults(SolrParams,String,String...).mjava","sourceNew":"  private void testResults(SolrParams params, String analyticsRequest, String... tests) {\n    String coreJson = queryCoreJson(params);\n    Object cloudObj = queryCloudObject(params);\n\n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n      // Single-Sharded\n      String err = null;\n      try {\n        err = JSONTestUtil.match(coreJson, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Single-Sharded Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + coreJson +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n\n      // Cloud\n      err = null;\n      try {\n        err = JSONTestUtil.matchObj(cloudObj, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Solr Cloud Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + Utils.toJSONString(cloudObj) +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n    }\n  }\n\n","sourceOld":"  private void testResults(SolrParams params, String analyticsRequest, String... tests) {\n    String coreJson = queryCoreJson(params);\n    Object cloudObj = queryCloudObject(params);\n    \n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n      // Single-Sharded\n      String err = null;\n      try {\n        err = JSONTestUtil.match(coreJson, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Single-Sharded Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + coreJson +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n      \n      // Cloud\n      err = null;\n      try {\n        err = JSONTestUtil.matchObj(cloudObj, test, DEFAULT_DELTA);\n      } catch (Exception e) {\n        err = e.getMessage();\n      } finally {\n        assertNull(\"query failed JSON validation. test= Solr Cloud Collection\" +\n            \"\\n error=\" + err +\n            \"\\n expected =\" + test +\n            \"\\n response = \" + Utils.toJSONString(cloudObj) +\n            \"\\n analyticsRequest = \" + analyticsRequest, err);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}