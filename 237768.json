{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","commits":[{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   */\n  protected static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getTempDirBase();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%3d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"934b4ca72f2233e78e1bbe05032587866628d906","date":1396635055,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","sourceNew":"  /**\n   */\n  protected static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getTempDirBase();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":"  /**\n   */\n  protected static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getTempDirBase();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%3d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getTempDirBase();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31c728e729d0fd8e22e11a6b3adea3635206ef89","date":1396689858,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","sourceNew":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getBaseTempDirForTestClass();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","sourceOld":"  /**\n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getTempDirBase();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","sourceNew":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    return tempFilesCleanupRule.createTempFile(prefix, suffix);\n  }\n\n","sourceOld":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getBaseTempDirForTestClass();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","sourceNew":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    return tempFilesCleanupRule.createTempFile(prefix, suffix);\n  }\n\n","sourceOld":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    File base = getBaseTempDirForTestClass();\n\n    int attempt = 0;\n    File f;\n    do {\n      if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n        throw new RuntimeException(\n            \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n              + base.getAbsolutePath());            \n      }\n      f = new File(base, prefix + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt) + suffix);\n    } while (!f.createNewFile());\n\n    registerToRemoveAfterSuite(f);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#createTempFile(String,String).mjava","sourceNew":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static Path createTempFile(String prefix, String suffix) throws IOException {\n    return tempFilesCleanupRule.createTempFile(prefix, suffix);\n  }\n\n","sourceOld":"  /**\n   * Creates an empty file with the given prefix and suffix under the \n   * test class's {@link #getBaseTempDirForTestClass()}.\n   * \n   * <p>The file will be automatically removed after the\n   * test class completes successfully. The test should close any file handles that would prevent\n   * the folder from being removed. \n   */\n  public static File createTempFile(String prefix, String suffix) throws IOException {\n    return tempFilesCleanupRule.createTempFile(prefix, suffix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31c728e729d0fd8e22e11a6b3adea3635206ef89":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"934b4ca72f2233e78e1bbe05032587866628d906":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","934b4ca72f2233e78e1bbe05032587866628d906"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["31c728e729d0fd8e22e11a6b3adea3635206ef89","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"f4abec28b874149a7223e32cc7a01704c27790de":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["31c728e729d0fd8e22e11a6b3adea3635206ef89"]},"commit2Childs":{"31c728e729d0fd8e22e11a6b3adea3635206ef89":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"934b4ca72f2233e78e1bbe05032587866628d906":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["31c728e729d0fd8e22e11a6b3adea3635206ef89"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["934b4ca72f2233e78e1bbe05032587866628d906"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}