{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"        public PathSegment(GeoPoint start, GeoPoint end, double planeBoundingOffset, double arcWidth, double chordDistance)\n        {\n            this.start = start;\n            this.end = end;\n            this.planeBoundingOffset = planeBoundingOffset;\n            this.arcWidth = arcWidth;\n            this.chordDistance = chordDistance;\n            \n            fullDistance = start.arcDistance(end);\n            fullNormalDistance = start.normalDistance(end);\n            fullLinearDistance = start.linearDistance(end);\n            normalizedConnectingPlane = new Plane(start,end).normalize();\n            if (normalizedConnectingPlane == null) {\n                upperConnectingPlane = null;\n                lowerConnectingPlane = null;\n                startCutoffPlane = null;\n                endCutoffPlane = null;\n            } else {\n                // Either start or end should be on the correct side\n                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);\n                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);\n                // Cutoff planes use opposite endpoints as correct side examples\n                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);\n                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);\n            }\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","sourceNew":"        public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance)\n        {\n            this.start = start;\n            this.end = end;\n            this.planeBoundingOffset = planeBoundingOffset;\n            this.arcWidth = arcWidth;\n            this.chordDistance = chordDistance;\n            \n            fullDistance = start.arcDistance(end);\n            fullNormalDistance = start.normalDistance(end);\n            fullLinearDistance = start.linearDistance(end);\n            normalizedConnectingPlane = new Plane(start,end).normalize();\n            if (normalizedConnectingPlane == null) {\n                upperConnectingPlane = null;\n                lowerConnectingPlane = null;\n                startCutoffPlane = null;\n                endCutoffPlane = null;\n                invertedStartCutoffPlane = null;\n                invertedEndCutoffPlane = null;\n            } else {\n                // Either start or end should be on the correct side\n                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);\n                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);\n                // Cutoff planes use opposite endpoints as correct side examples\n                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);\n                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);\n                invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n                invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n            }\n        }\n\n","sourceOld":"        public PathSegment(GeoPoint start, GeoPoint end, double planeBoundingOffset, double arcWidth, double chordDistance)\n        {\n            this.start = start;\n            this.end = end;\n            this.planeBoundingOffset = planeBoundingOffset;\n            this.arcWidth = arcWidth;\n            this.chordDistance = chordDistance;\n            \n            fullDistance = start.arcDistance(end);\n            fullNormalDistance = start.normalDistance(end);\n            fullLinearDistance = start.linearDistance(end);\n            normalizedConnectingPlane = new Plane(start,end).normalize();\n            if (normalizedConnectingPlane == null) {\n                upperConnectingPlane = null;\n                lowerConnectingPlane = null;\n                startCutoffPlane = null;\n                endCutoffPlane = null;\n            } else {\n                // Either start or end should be on the correct side\n                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);\n                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);\n                // Cutoff planes use opposite endpoints as correct side examples\n                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);\n                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","sourceNew":"        public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance)\n        {\n            this.start = start;\n            this.end = end;\n            this.planeBoundingOffset = planeBoundingOffset;\n            this.arcWidth = arcWidth;\n            this.chordDistance = chordDistance;\n            \n            fullDistance = start.arcDistance(end);\n            fullNormalDistance = start.normalDistance(end);\n            fullLinearDistance = start.linearDistance(end);\n            normalizedConnectingPlane = new Plane(start,end).normalize();\n            if (normalizedConnectingPlane == null) {\n                upperConnectingPlane = null;\n                lowerConnectingPlane = null;\n                startCutoffPlane = null;\n                endCutoffPlane = null;\n                upperConnectingPlanePoints = null;\n                lowerConnectingPlanePoints = null;\n                startCutoffPlanePoints = null;\n                endCutoffPlanePoints = null;\n                invertedStartCutoffPlane = null;\n                invertedEndCutoffPlane = null;\n            } else {\n                // Either start or end should be on the correct side\n                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);\n                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);\n                // Cutoff planes use opposite endpoints as correct side examples\n                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);\n                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);\n                final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n                final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n                final Membership[] startSide = new Membership[]{startCutoffPlane};\n                final Membership[] endSide = new Membership[]{endCutoffPlane};\n                final GeoPoint ULHC = upperConnectingPlane.findIntersections(startCutoffPlane,lowerSide,endSide)[0];\n                final GeoPoint URHC = upperConnectingPlane.findIntersections(endCutoffPlane,lowerSide,startSide)[0];\n                final GeoPoint LLHC = lowerConnectingPlane.findIntersections(startCutoffPlane,upperSide,endSide)[0];\n                final GeoPoint LRHC = lowerConnectingPlane.findIntersections(endCutoffPlane,upperSide,startSide)[0];\n                upperConnectingPlanePoints = new GeoPoint[]{ULHC,URHC};\n                lowerConnectingPlanePoints = new GeoPoint[]{LLHC,LRHC};\n                startCutoffPlanePoints = new GeoPoint[]{ULHC,LLHC};\n                endCutoffPlanePoints = new GeoPoint[]{URHC,LRHC};\n                invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n                invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n            }\n        }\n\n","sourceOld":"        public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance)\n        {\n            this.start = start;\n            this.end = end;\n            this.planeBoundingOffset = planeBoundingOffset;\n            this.arcWidth = arcWidth;\n            this.chordDistance = chordDistance;\n            \n            fullDistance = start.arcDistance(end);\n            fullNormalDistance = start.normalDistance(end);\n            fullLinearDistance = start.linearDistance(end);\n            normalizedConnectingPlane = new Plane(start,end).normalize();\n            if (normalizedConnectingPlane == null) {\n                upperConnectingPlane = null;\n                lowerConnectingPlane = null;\n                startCutoffPlane = null;\n                endCutoffPlane = null;\n                invertedStartCutoffPlane = null;\n                invertedEndCutoffPlane = null;\n            } else {\n                // Either start or end should be on the correct side\n                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);\n                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);\n                // Cutoff planes use opposite endpoints as correct side examples\n                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);\n                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);\n                invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n                invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","sourceNew":"    public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance) {\n      this.start = start;\n      this.end = end;\n      this.planeBoundingOffset = planeBoundingOffset;\n      this.arcWidth = arcWidth;\n      this.chordDistance = chordDistance;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      normalizedConnectingPlane = new Plane(start, end).normalize();\n      if (normalizedConnectingPlane == null) {\n        upperConnectingPlane = null;\n        lowerConnectingPlane = null;\n        startCutoffPlane = null;\n        endCutoffPlane = null;\n        upperConnectingPlanePoints = null;\n        lowerConnectingPlanePoints = null;\n        startCutoffPlanePoints = null;\n        endCutoffPlanePoints = null;\n        invertedStartCutoffPlane = null;\n        invertedEndCutoffPlane = null;\n      } else {\n        // Either start or end should be on the correct side\n        upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n        lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n        // Cutoff planes use opposite endpoints as correct side examples\n        startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n        endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n        final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n        final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n        final Membership[] startSide = new Membership[]{startCutoffPlane};\n        final Membership[] endSide = new Membership[]{endCutoffPlane};\n        final GeoPoint ULHC = upperConnectingPlane.findIntersections(startCutoffPlane, lowerSide, endSide)[0];\n        final GeoPoint URHC = upperConnectingPlane.findIntersections(endCutoffPlane, lowerSide, startSide)[0];\n        final GeoPoint LLHC = lowerConnectingPlane.findIntersections(startCutoffPlane, upperSide, endSide)[0];\n        final GeoPoint LRHC = lowerConnectingPlane.findIntersections(endCutoffPlane, upperSide, startSide)[0];\n        upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n        lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n        startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n        endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n        invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n        invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n      }\n    }\n\n","sourceOld":"        public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance)\n        {\n            this.start = start;\n            this.end = end;\n            this.planeBoundingOffset = planeBoundingOffset;\n            this.arcWidth = arcWidth;\n            this.chordDistance = chordDistance;\n            \n            fullDistance = start.arcDistance(end);\n            fullNormalDistance = start.normalDistance(end);\n            fullLinearDistance = start.linearDistance(end);\n            normalizedConnectingPlane = new Plane(start,end).normalize();\n            if (normalizedConnectingPlane == null) {\n                upperConnectingPlane = null;\n                lowerConnectingPlane = null;\n                startCutoffPlane = null;\n                endCutoffPlane = null;\n                upperConnectingPlanePoints = null;\n                lowerConnectingPlanePoints = null;\n                startCutoffPlanePoints = null;\n                endCutoffPlanePoints = null;\n                invertedStartCutoffPlane = null;\n                invertedEndCutoffPlane = null;\n            } else {\n                // Either start or end should be on the correct side\n                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);\n                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);\n                // Cutoff planes use opposite endpoints as correct side examples\n                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);\n                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);\n                final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n                final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n                final Membership[] startSide = new Membership[]{startCutoffPlane};\n                final Membership[] endSide = new Membership[]{endCutoffPlane};\n                final GeoPoint ULHC = upperConnectingPlane.findIntersections(startCutoffPlane,lowerSide,endSide)[0];\n                final GeoPoint URHC = upperConnectingPlane.findIntersections(endCutoffPlane,lowerSide,startSide)[0];\n                final GeoPoint LLHC = lowerConnectingPlane.findIntersections(startCutoffPlane,upperSide,endSide)[0];\n                final GeoPoint LRHC = lowerConnectingPlane.findIntersections(endCutoffPlane,upperSide,startSide)[0];\n                upperConnectingPlanePoints = new GeoPoint[]{ULHC,URHC};\n                lowerConnectingPlanePoints = new GeoPoint[]{LLHC,LRHC};\n                startCutoffPlanePoints = new GeoPoint[]{ULHC,LLHC};\n                endCutoffPlanePoints = new GeoPoint[]{URHC,LRHC};\n                invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n                invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance) {\n      this.start = start;\n      this.end = end;\n      this.planeBoundingOffset = planeBoundingOffset;\n      this.arcWidth = arcWidth;\n      this.chordDistance = chordDistance;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      normalizedConnectingPlane = new Plane(start, end).normalize();\n      if (normalizedConnectingPlane == null) {\n        upperConnectingPlane = null;\n        lowerConnectingPlane = null;\n        startCutoffPlane = null;\n        endCutoffPlane = null;\n        upperConnectingPlanePoints = null;\n        lowerConnectingPlanePoints = null;\n        startCutoffPlanePoints = null;\n        endCutoffPlanePoints = null;\n        invertedStartCutoffPlane = null;\n        invertedEndCutoffPlane = null;\n      } else {\n        // Either start or end should be on the correct side\n        upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n        lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n        // Cutoff planes use opposite endpoints as correct side examples\n        startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n        endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n        final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n        final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n        final Membership[] startSide = new Membership[]{startCutoffPlane};\n        final Membership[] endSide = new Membership[]{endCutoffPlane};\n        final GeoPoint ULHC = upperConnectingPlane.findIntersections(startCutoffPlane, lowerSide, endSide)[0];\n        final GeoPoint URHC = upperConnectingPlane.findIntersections(endCutoffPlane, lowerSide, startSide)[0];\n        final GeoPoint LLHC = lowerConnectingPlane.findIntersections(startCutoffPlane, upperSide, endSide)[0];\n        final GeoPoint LRHC = lowerConnectingPlane.findIntersections(endCutoffPlane, upperSide, startSide)[0];\n        upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n        lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n        startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n        endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n        invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n        invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","sourceNew":null,"sourceOld":"    public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance) {\n      this.start = start;\n      this.end = end;\n      this.planeBoundingOffset = planeBoundingOffset;\n      this.arcWidth = arcWidth;\n      this.chordDistance = chordDistance;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      normalizedConnectingPlane = new Plane(start, end).normalize();\n      if (normalizedConnectingPlane == null) {\n        upperConnectingPlane = null;\n        lowerConnectingPlane = null;\n        startCutoffPlane = null;\n        endCutoffPlane = null;\n        upperConnectingPlanePoints = null;\n        lowerConnectingPlanePoints = null;\n        startCutoffPlanePoints = null;\n        endCutoffPlanePoints = null;\n        invertedStartCutoffPlane = null;\n        invertedEndCutoffPlane = null;\n      } else {\n        // Either start or end should be on the correct side\n        upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n        lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n        // Cutoff planes use opposite endpoints as correct side examples\n        startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n        endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n        final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n        final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n        final Membership[] startSide = new Membership[]{startCutoffPlane};\n        final Membership[] endSide = new Membership[]{endCutoffPlane};\n        final GeoPoint ULHC = upperConnectingPlane.findIntersections(startCutoffPlane, lowerSide, endSide)[0];\n        final GeoPoint URHC = upperConnectingPlane.findIntersections(endCutoffPlane, lowerSide, startSide)[0];\n        final GeoPoint LLHC = lowerConnectingPlane.findIntersections(startCutoffPlane, upperSide, endSide)[0];\n        final GeoPoint LRHC = lowerConnectingPlane.findIntersections(endCutoffPlane, upperSide, startSide)[0];\n        upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n        lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n        startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n        endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n        invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n        invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":4,"author":"David Wayne Smiley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(GeoPoint,GeoPoint,double,double,double).mjava","sourceNew":null,"sourceOld":"    public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance) {\n      this.start = start;\n      this.end = end;\n      this.planeBoundingOffset = planeBoundingOffset;\n      this.arcWidth = arcWidth;\n      this.chordDistance = chordDistance;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      normalizedConnectingPlane = new Plane(start, end).normalize();\n      if (normalizedConnectingPlane == null) {\n        upperConnectingPlane = null;\n        lowerConnectingPlane = null;\n        startCutoffPlane = null;\n        endCutoffPlane = null;\n        upperConnectingPlanePoints = null;\n        lowerConnectingPlanePoints = null;\n        startCutoffPlanePoints = null;\n        endCutoffPlanePoints = null;\n        invertedStartCutoffPlane = null;\n        invertedEndCutoffPlane = null;\n      } else {\n        // Either start or end should be on the correct side\n        upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n        lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n        // Cutoff planes use opposite endpoints as correct side examples\n        startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n        endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n        final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n        final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n        final Membership[] startSide = new Membership[]{startCutoffPlane};\n        final Membership[] endSide = new Membership[]{endCutoffPlane};\n        final GeoPoint ULHC = upperConnectingPlane.findIntersections(startCutoffPlane, lowerSide, endSide)[0];\n        final GeoPoint URHC = upperConnectingPlane.findIntersections(endCutoffPlane, lowerSide, startSide)[0];\n        final GeoPoint LLHC = lowerConnectingPlane.findIntersections(startCutoffPlane, upperSide, endSide)[0];\n        final GeoPoint LRHC = lowerConnectingPlane.findIntersections(endCutoffPlane, upperSide, startSide)[0];\n        upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n        lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n        startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n        endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n        invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);\n        invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}