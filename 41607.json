{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"/dev/null","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = _TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      _TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      _TestUtil.rmDir(dirFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = _TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      _TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      _TestUtil.rmDir(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = _TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      _TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      _TestUtil.rmDir(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rmDir(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = _TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      _TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      _TestUtil.rmDir(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rmDir(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rmDir(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rmDir(dirFile);\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = TestUtil.getTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rmDir(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rmDir(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.shutdown();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      TestUtil.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      TestUtil.rm(dirFile);\n  }\n\n","bugFix":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      File dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n    // Create initial data set\n    Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n    assumeFalse(\"test directly deletes files\", TestUtil.hasVirusChecker(dirFile));\n    Directory dir = newFSDirectory(dirFile);\n    \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Try to erase the data - this ensures that the writer closed all files\n    IOUtils.rm(dirFile);\n    dir = newFSDirectory(dirFile);\n\n    // Now create the data set again, just as before\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                              .setOpenMode(OpenMode.CREATE));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Now open existing directory and test that reader closes all files\n    dir = newFSDirectory(dirFile);\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    reader1.close();\n    dir.close();\n\n    // The following will fail if reader did not close\n    // all files\n    IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n    // Create initial data set\n    Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n    Directory dir = newFSDirectory(dirFile);\n    \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Try to erase the data - this ensures that the writer closed all files\n    IOUtils.rm(dirFile);\n    dir = newFSDirectory(dirFile);\n\n    // Now create the data set again, just as before\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                              .setOpenMode(OpenMode.CREATE));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Now open existing directory and test that reader closes all files\n    dir = newFSDirectory(dirFile);\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    reader1.close();\n    dir.close();\n\n    // The following will fail if reader did not close\n    // all files\n    IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"  public void testFilesOpenClose() throws IOException {\n    // Create initial data set\n    Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n    assumeFalse(\"test directly deletes files\", TestUtil.hasVirusChecker(dirFile));\n    Directory dir = newFSDirectory(dirFile);\n    \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Try to erase the data - this ensures that the writer closed all files\n    IOUtils.rm(dirFile);\n    dir = newFSDirectory(dirFile);\n\n    // Now create the data set again, just as before\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                              .setOpenMode(OpenMode.CREATE));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Now open existing directory and test that reader closes all files\n    dir = newFSDirectory(dirFile);\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    reader1.close();\n    dir.close();\n\n    // The following will fail if reader did not close\n    // all files\n    IOUtils.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n    // Create initial data set\n    Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n    Directory dir = newFSDirectory(dirFile);\n    \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Try to erase the data - this ensures that the writer closed all files\n    IOUtils.rm(dirFile);\n    dir = newFSDirectory(dirFile);\n\n    // Now create the data set again, just as before\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                              .setOpenMode(OpenMode.CREATE));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Now open existing directory and test that reader closes all files\n    dir = newFSDirectory(dirFile);\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    reader1.close();\n    dir.close();\n\n    // The following will fail if reader did not close\n    // all files\n    IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n    // Create initial data set\n    Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n    Directory dir = newFSDirectory(dirFile);\n    \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Try to erase the data - this ensures that the writer closed all files\n    IOUtils.rm(dirFile);\n    dir = newFSDirectory(dirFile);\n\n    // Now create the data set again, just as before\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                              .setOpenMode(OpenMode.CREATE));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Now open existing directory and test that reader closes all files\n    dir = newFSDirectory(dirFile);\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    reader1.close();\n    dir.close();\n\n    // The following will fail if reader did not close\n    // all files\n    IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testFilesOpenClose().mjava","sourceNew":"  public void testFilesOpenClose() throws IOException {\n    // Create initial data set\n    Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n    Directory dir = newFSDirectory(dirFile);\n    \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Try to erase the data - this ensures that the writer closed all files\n    IOUtils.rm(dirFile);\n    dir = newFSDirectory(dirFile);\n\n    // Now create the data set again, just as before\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                              .setOpenMode(OpenMode.CREATE));\n    addDoc(writer, \"test\");\n    writer.close();\n    dir.close();\n\n    // Now open existing directory and test that reader closes all files\n    dir = newFSDirectory(dirFile);\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    reader1.close();\n    dir.close();\n\n    // The following will fail if reader did not close\n    // all files\n    IOUtils.rm(dirFile);\n  }\n\n","sourceOld":"public void testFilesOpenClose() throws IOException {\n      // Create initial data set\n      Path dirFile = createTempDir(\"TestIndexReader.testFilesOpenClose\");\n      Directory dir = newFSDirectory(dirFile);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Try to erase the data - this ensures that the writer closed all files\n      IOUtils.rm(dirFile);\n      dir = newFSDirectory(dirFile);\n\n      // Now create the data set again, just as before\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setOpenMode(OpenMode.CREATE));\n      addDoc(writer, \"test\");\n      writer.close();\n      dir.close();\n\n      // Now open existing directory and test that reader closes all files\n      dir = newFSDirectory(dirFile);\n      DirectoryReader reader1 = DirectoryReader.open(dir);\n      reader1.close();\n      dir.close();\n\n      // The following will fail if reader did not close\n      // all files\n      IOUtils.rm(dirFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["d0d579490a72f2e6297eaa648940611234c57cf1"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f4abec28b874149a7223e32cc7a01704c27790de":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"d0d579490a72f2e6297eaa648940611234c57cf1":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}