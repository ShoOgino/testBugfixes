{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","date":1374000182,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    Terms terms = context.reader().terms(term.field());\n    if (terms == null) {\n      return null;\n    }\n\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(term.bytes())) {\n      return null;\n    }\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return termsEnum.docs(acceptDocs, null, DocsEnum.FLAG_NONE);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}