{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","commits":[{"id":"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","date":1482864726,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(2, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47","9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(2, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(2, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(2, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6562145f1a8d5e123cf34a11e285b5488a83feb8","date":1503435050,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9237cc5090f3384d6e06a3c0f4ac0ebbac60a85e","date":1503486936,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49a2e5bf56dfbc293a421a92c0cfd65f886bef81","date":1503673133,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    int count1 = ((SolrSlf4jReporter)reporter1).getCount();\n    assertTrue(\"test1 count should be greater than 0\", count1 > 0);\n    int count2 = ((SolrSlf4jReporter)reporter2).getCount();\n    assertTrue(\"test2 count should be greater than 0\", count1 > 0);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e6c4eb6f169ee828eabd776ced7d900664e65a","date":1503675775,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    int count1 = ((SolrSlf4jReporter)reporter1).getCount();\n    assertTrue(\"test1 count should be greater than 0\", count1 > 0);\n    int count2 = ((SolrSlf4jReporter)reporter2).getCount();\n    assertTrue(\"test2 count should be greater than 0\", count1 > 0);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38b789f5691d565debde94e5cfce54e0f9b2d965","date":1503935896,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    int count1 = ((SolrSlf4jReporter)reporter1).getCount();\n    assertTrue(\"test1 count should be greater than 0\", count1 > 0);\n    int count2 = ((SolrSlf4jReporter)reporter2).getCount();\n    assertTrue(\"test2 count should be greater than 0\", count1 > 0);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9867eacb5d128c5fab10ab78733980c33f16283","date":1503938113,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    int count1 = ((SolrSlf4jReporter)reporter1).getCount();\n    assertTrue(\"test1 count should be greater than 0\", count1 > 0);\n    int count2 = ((SolrSlf4jReporter)reporter2).getCount();\n    assertTrue(\"test2 count should be greater than 0\", count1 > 0);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"count1=\" + count1 + \", count2=\" + count2 + \" - no 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter = reporters.get(\"test1\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n    reporter = reporters.get(\"test2\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    assertTrue(history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n    assertTrue(history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b967cd91d9adf8137e96f0776fd2f2b63b05bd47","date":1533212987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(5000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n  }\n\n","bugFix":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                           (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                            \"solrconfig.xml\", \"schema.xml\"));\n                                           \n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","bugFix":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                           (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                            \"solrconfig.xml\", \"schema.xml\"));\n                                           \n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n    CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                           (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                            \"solrconfig.xml\", \"schema.xml\"));\n                                           \n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                           (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                            \"solrconfig.xml\", \"schema.xml\"));\n                                           \n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrSlf4jReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n    CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                           (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                            \"solrconfig.xml\", \"schema.xml\"));\n                                           \n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    @SuppressWarnings({\"rawtypes\"})\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    ensureLoggingConfiguredAppropriately();\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-slf4jreporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(home, solrXml);\n    CoreContainer cc = createCoreContainer(cfg, new TestHarness.TestCoresLocator\n                                           (DEFAULT_TEST_CORENAME, initAndGetDataDir().getAbsolutePath(),\n                                            \"solrconfig.xml\", \"schema.xml\"));\n                                           \n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 2);\n    SolrMetricReporter reporter1 = reporters.get(\"test1\");\n    assertNotNull(reporter1);\n    assertTrue(reporter1 instanceof SolrSlf4jReporter);\n    SolrMetricReporter reporter2 = reporters.get(\"test2\");\n    assertNotNull(reporter2);\n    assertTrue(reporter2 instanceof SolrSlf4jReporter);\n\n    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, null, 100);\n    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);\n    watcher.setThreshold(\"INFO\");\n\n    watcher.reset();\n    int cnt = 20;\n    boolean active;\n    do {\n      Thread.sleep(1000);\n      cnt--;\n      active = ((SolrSlf4jReporter)reporter1).isActive() && ((SolrSlf4jReporter)reporter2).isActive();\n    } while (!active && cnt > 0);\n    if (!active) {\n      fail(\"One or more reporters didn't become active in 20 seconds\");\n    }\n    Thread.sleep(10000);\n\n    SolrDocumentList history = watcher.getHistory(-1, null);\n    // dot-separated names are treated like class names and collapsed\n    // in regular log output, but here we get the full name\n    if (history.stream().filter(d -> \"solr.node\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'solr.node' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"foobar\".equals(d.getFirstValue(\"logger\"))).count() == 0) {\n      fail(\"No 'foobar' logs in: \" + history.toString());\n    }\n    if (history.stream().filter(d -> \"x:collection1\".equals(d.getFirstValue(\"core\"))).count() == 0) {\n      fail(\"No 'solr.core' or MDC context in logs: \" + history.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"6562145f1a8d5e123cf34a11e285b5488a83feb8":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47","9799ebcab48102552d92f7807965a91fb6e116f7"],"e98520789adb1d5ad05afb4956eca0944a929688":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["9237cc5090f3384d6e06a3c0f4ac0ebbac60a85e","49a2e5bf56dfbc293a421a92c0cfd65f886bef81"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"e9867eacb5d128c5fab10ab78733980c33f16283":["60e6c4eb6f169ee828eabd776ced7d900664e65a","38b789f5691d565debde94e5cfce54e0f9b2d965"],"9237cc5090f3384d6e06a3c0f4ac0ebbac60a85e":["6562145f1a8d5e123cf34a11e285b5488a83feb8"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["9799ebcab48102552d92f7807965a91fb6e116f7"],"49a2e5bf56dfbc293a421a92c0cfd65f886bef81":["9237cc5090f3384d6e06a3c0f4ac0ebbac60a85e"],"38b789f5691d565debde94e5cfce54e0f9b2d965":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e9867eacb5d128c5fab10ab78733980c33f16283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b967cd91d9adf8137e96f0776fd2f2b63b05bd47":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["e9867eacb5d128c5fab10ab78733980c33f16283"],"9799ebcab48102552d92f7807965a91fb6e116f7":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["e9867eacb5d128c5fab10ab78733980c33f16283","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"6562145f1a8d5e123cf34a11e285b5488a83feb8":["9237cc5090f3384d6e06a3c0f4ac0ebbac60a85e"],"816521ebaad5add9cb96bb88c577394e2938c40b":["6562145f1a8d5e123cf34a11e285b5488a83feb8"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["e9867eacb5d128c5fab10ab78733980c33f16283","38b789f5691d565debde94e5cfce54e0f9b2d965"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9867eacb5d128c5fab10ab78733980c33f16283":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"9237cc5090f3384d6e06a3c0f4ac0ebbac60a85e":["60e6c4eb6f169ee828eabd776ced7d900664e65a","49a2e5bf56dfbc293a421a92c0cfd65f886bef81"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["e98520789adb1d5ad05afb4956eca0944a929688"],"49a2e5bf56dfbc293a421a92c0cfd65f886bef81":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"38b789f5691d565debde94e5cfce54e0f9b2d965":["e9867eacb5d128c5fab10ab78733980c33f16283"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f03e4bed5023ec3ef93a771b8888cae991cf448d","6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"b967cd91d9adf8137e96f0776fd2f2b63b05bd47":["f8061ddd97f3352007d927dae445884a6f3d857b","9799ebcab48102552d92f7807965a91fb6e116f7"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"9799ebcab48102552d92f7807965a91fb6e116f7":["f8061ddd97f3352007d927dae445884a6f3d857b","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","f03e4bed5023ec3ef93a771b8888cae991cf448d","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}