{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    @SuppressWarnings({\"unchecked\"})\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    assertEquals(solDocList.size(), l.size());\n    assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    SolrInputDocument out = binder.toSolrInputDocument(item);\n\n    assertEquals(item.id, out.getFieldValue(\"id\"));\n    SolrInputField catfield = out.getField(\"cat\");\n    assertEquals(3, catfield.getValueCount());\n\n    List<String> catValues = (List<String>) catfield.getValue();\n    assertEquals(\"aaa\", catValues.get(0));\n    assertEquals(\"bbb\", catValues.get(1));\n    assertEquals(\"ccc\", catValues.get(2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"35b292579499b440bb87b86a6b832d91a6f6dc2e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35b292579499b440bb87b86a6b832d91a6f6dc2e":["4cba13865da71de3b9b0937fcbc66d726089356d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}