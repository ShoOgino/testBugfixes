{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception {\n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n\n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n\n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f,\n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n\n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n\n    assertU(commit());\n\n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception {\n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n\n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n\n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f,\n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n\n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n\n    assertU(commit());\n\n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + Integer.toString(s).charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (Integer.toString(s).charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (Integer.toString(s).charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(LegacyQueryFacetTest.class, fileName))));\n\n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3bd4c6955956e76c96eb12dfe64108ed03522983","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["3bd4c6955956e76c96eb12dfe64108ed03522983","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["628903f37b6c442da0d390db1c6af9a0e74d41a7","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["1e4e64b7199d2f2a17be7f3926c7532553910dce","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}