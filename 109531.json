{"path":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(OpenBitSet,int,int).mjava","commits":[{"id":"eee24cbec95372b8e747bf9146a5ef33734029a6","date":1291686380,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(OpenBitSet,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(Bits,OpenBitSet,int,int).mjava","sourceNew":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","sourceOld":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( Bits deleted, OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        if( deleted == null ) {\n          for( int i=0; i<maxDocs; i++ ) {\n            if( !valid.get(i) ) {\n              return valid;\n            }\n          }\n        }\n        else {\n          for( int i=0; i<maxDocs; i++ ) {\n            if( !deleted.get(i) && !valid.get(i) ) {\n              return valid;\n            }\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(OpenBitSet,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(Bits,OpenBitSet,int,int).mjava","sourceNew":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","sourceOld":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( Bits deleted, OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        if( deleted == null ) {\n          for( int i=0; i<maxDocs; i++ ) {\n            if( !valid.get(i) ) {\n              return valid;\n            }\n          }\n        }\n        else {\n          for( int i=0; i<maxDocs; i++ ) {\n            if( !deleted.get(i) && !valid.get(i) ) {\n              return valid;\n            }\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(OpenBitSet,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(FixedBitSet,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(OpenBitSet,int,int).mjava","sourceNew":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( FixedBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","sourceOld":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eee24cbec95372b8e747bf9146a5ef33734029a6"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["eee24cbec95372b8e747bf9146a5ef33734029a6"],"eee24cbec95372b8e747bf9146a5ef33734029a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","eee24cbec95372b8e747bf9146a5ef33734029a6"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"eee24cbec95372b8e747bf9146a5ef33734029a6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}