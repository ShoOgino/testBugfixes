{"path":"lucene/sandbox/src/test/org/apache/lucene/geo/ShapeTestUtil#createRegularPolygon(double,double,double,int).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/ShapeTestUtil#createRegularPolygon(double,double,double,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Makes an n-gon, centered at the provided x/y, and each vertex approximately\n   *  distanceMeters away from the center.\n   *\n   * Do not invoke me across the dateline or a pole!! */\n  public static XYPolygon createRegularPolygon(double centerX, double centerY, double radius, int gons) {\n\n    double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n    double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n    radius = StrictMath.min(radius, StrictMath.min(maxX, maxY));\n\n    float[][] result = new float[2][];\n    result[0] = new float[gons+1];\n    result[1] = new float[gons+1];\n    //System.out.println(\"make gon=\" + gons);\n    for(int i=0;i<gons;i++) {\n      double angle = 360.0-i*(360.0/gons);\n      //System.out.println(\"  angle \" + angle);\n      double x = Math.cos(StrictMath.toRadians(angle));\n      double y = Math.sin(StrictMath.toRadians(angle));\n      result[0][i] = (float)(centerY + y * radius);\n      result[1][i] = (float)(centerX + x * radius);\n    }\n\n    // close poly\n    result[0][gons] = result[0][0];\n    result[1][gons] = result[1][0];\n\n    return new XYPolygon(result[0], result[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#createRegularPolygon(double,double,double,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/ShapeTestUtil#createRegularPolygon(double,double,double,int).mjava","sourceNew":"  /** Makes an n-gon, centered at the provided x/y, and each vertex approximately\n   *  distanceMeters away from the center.\n   *\n   * Do not invoke me across the dateline or a pole!! */\n  public static XYPolygon createRegularPolygon(double centerX, double centerY, double radius, int gons) {\n\n    double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n    double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n    radius = StrictMath.min(radius, StrictMath.min(maxX, maxY));\n\n    float[][] result = new float[2][];\n    result[0] = new float[gons+1];\n    result[1] = new float[gons+1];\n    //System.out.println(\"make gon=\" + gons);\n    for(int i=0;i<gons;i++) {\n      double angle = 360.0-i*(360.0/gons);\n      //System.out.println(\"  angle \" + angle);\n      double x = Math.cos(StrictMath.toRadians(angle));\n      double y = Math.sin(StrictMath.toRadians(angle));\n      result[0][i] = (float)(centerY + y * radius);\n      result[1][i] = (float)(centerX + x * radius);\n    }\n\n    // close poly\n    result[0][gons] = result[0][0];\n    result[1][gons] = result[1][0];\n\n    return new XYPolygon(result[0], result[1]);\n  }\n\n","sourceOld":"  /** Makes an n-gon, centered at the provided x/y, and each vertex approximately\n   *  distanceMeters away from the center.\n   *\n   * Do not invoke me across the dateline or a pole!! */\n  public static XYPolygon createRegularPolygon(double centerX, double centerY, double radius, int gons) {\n\n    double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n    double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n    radius = StrictMath.min(radius, StrictMath.min(maxX, maxY));\n\n    float[][] result = new float[2][];\n    result[0] = new float[gons+1];\n    result[1] = new float[gons+1];\n    //System.out.println(\"make gon=\" + gons);\n    for(int i=0;i<gons;i++) {\n      double angle = 360.0-i*(360.0/gons);\n      //System.out.println(\"  angle \" + angle);\n      double x = Math.cos(StrictMath.toRadians(angle));\n      double y = Math.sin(StrictMath.toRadians(angle));\n      result[0][i] = (float)(centerY + y * radius);\n      result[1][i] = (float)(centerX + x * radius);\n    }\n\n    // close poly\n    result[0][gons] = result[0][0];\n    result[1][gons] = result[1][0];\n\n    return new XYPolygon(result[0], result[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}