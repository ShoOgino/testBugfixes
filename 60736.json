{"path":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"/dev/null","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n    \n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList clusters = (NamedList) values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = (NamedList) values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n    \n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n    \n  }\n\n","sourceOld":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n    \n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList clusters = (NamedList) values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = (NamedList) values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","sourceOld":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n    \n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","sourceOld":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}