{"path":"src/common/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","pathOld":"src/java/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","sourceNew":"  @Override\n  public void write(byte arr[], int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      System.arraycopy(arr, off, buf, pos, len);\n      pos += len;\n    } else if (len<buf.length) {\n      // if the data to write is small enough, buffer it.\n      System.arraycopy(arr, off, buf, pos, space);\n      out.write(buf);\n      written += pos;\n      pos = len-space;\n      System.arraycopy(arr, off+space, buf, 0, pos);\n    } else {\n      out.write(buf,0,pos);  // flush\n      written += pos;\n      pos=0;\n      // don't buffer, just write to sink\n      out.write(arr, off, len);\n      written += len;            \n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(byte arr[], int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      System.arraycopy(arr, off, buf, pos, len);\n      pos += len;\n    } else if (len<buf.length) {\n      // if the data to write is small enough, buffer it.\n      System.arraycopy(arr, off, buf, pos, space);\n      out.write(buf);\n      written += pos;\n      pos = len-space;\n      System.arraycopy(arr, off+space, buf, 0, pos);\n    } else {\n      out.write(buf,0,pos);  // flush\n      written += pos;\n      pos=0;\n      // don't buffer, just write to sink\n      out.write(arr, off, len);\n      written += len;            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c2f5f714cc38a8111aa0edec6fe4283632107","date":1241797984,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","pathOld":"src/common/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","sourceNew":"  @Override\n  public void write(byte arr[], int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      System.arraycopy(arr, off, buf, pos, len);\n      pos += len;\n    } else if (len<buf.length) {\n      // if the data to write is small enough, buffer it.\n      System.arraycopy(arr, off, buf, pos, space);\n      out.write(buf);\n      written += buf.length;\n      pos = len-space;\n      System.arraycopy(arr, off+space, buf, 0, pos);\n    } else {\n      if (pos>0) {\n        out.write(buf,0,pos);  // flush\n        written += pos;\n        pos=0;\n      }\n      // don't buffer, just write to sink\n      out.write(arr, off, len);\n      written += len;            \n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(byte arr[], int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      System.arraycopy(arr, off, buf, pos, len);\n      pos += len;\n    } else if (len<buf.length) {\n      // if the data to write is small enough, buffer it.\n      System.arraycopy(arr, off, buf, pos, space);\n      out.write(buf);\n      written += pos;\n      pos = len-space;\n      System.arraycopy(arr, off+space, buf, 0, pos);\n    } else {\n      out.write(buf,0,pos);  // flush\n      written += pos;\n      pos=0;\n      // don't buffer, just write to sink\n      out.write(arr, off, len);\n      written += len;            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","pathOld":"src/common/org/apache/solr/common/util/FastOutputStream#write(byte[],int,int).mjava","sourceNew":"  @Override\n  public void write(byte arr[], int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      System.arraycopy(arr, off, buf, pos, len);\n      pos += len;\n    } else if (len<buf.length) {\n      // if the data to write is small enough, buffer it.\n      System.arraycopy(arr, off, buf, pos, space);\n      out.write(buf);\n      written += buf.length;\n      pos = len-space;\n      System.arraycopy(arr, off+space, buf, 0, pos);\n    } else {\n      if (pos>0) {\n        out.write(buf,0,pos);  // flush\n        written += pos;\n        pos=0;\n      }\n      // don't buffer, just write to sink\n      out.write(arr, off, len);\n      written += len;            \n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(byte arr[], int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      System.arraycopy(arr, off, buf, pos, len);\n      pos += len;\n    } else if (len<buf.length) {\n      // if the data to write is small enough, buffer it.\n      System.arraycopy(arr, off, buf, pos, space);\n      out.write(buf);\n      written += buf.length;\n      pos = len-space;\n      System.arraycopy(arr, off+space, buf, 0, pos);\n    } else {\n      if (pos>0) {\n        out.write(buf,0,pos);  // flush\n        written += pos;\n        pos=0;\n      }\n      // don't buffer, just write to sink\n      out.write(arr, off, len);\n      written += len;            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f95c2f5f714cc38a8111aa0edec6fe4283632107":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ad94625fb8d088209f46650c8097196fec67f00c":["f95c2f5f714cc38a8111aa0edec6fe4283632107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["f95c2f5f714cc38a8111aa0edec6fe4283632107"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f95c2f5f714cc38a8111aa0edec6fe4283632107":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}