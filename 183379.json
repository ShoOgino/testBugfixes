{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","commits":[{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  public void init(NamedList args) {\n  }\n\n","sourceOld":"  public void init(NamedList args) {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n  }\n\n","sourceOld":"  public void init(NamedList args) {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n  }\n\n","sourceOld":"  public void init(NamedList args) {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    Boolean prle = args.getBooleanArg(PARAMS_RESOURCE_LOADER_ENABLED);\n    paramsResourceLoaderEnabled = (null == prle ? false : prle);\n\n    // solr resource loader: on by default\n    Boolean srle = args.getBooleanArg(SOLR_RESOURCE_LOADER_ENABLED);\n    solrResourceLoaderEnabled = (null == srle ? true : srle);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n  }\n\n","bugFix":null,"bugIntro":["9c48b23bbaecd85f2b3ff921963f19fd590e579c","d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10349d681267bb9b224adb51818a0c9b68fdc22c","date":1441152776,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    Boolean prle = args.getBooleanArg(PARAMS_RESOURCE_LOADER_ENABLED);\n    paramsResourceLoaderEnabled = (null == prle ? false : prle);\n\n    // solr resource loader: on by default\n    Boolean srle = args.getBooleanArg(SOLR_RESOURCE_LOADER_ENABLED);\n    solrResourceLoaderEnabled = (null == srle ? true : srle);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    Boolean prle = args.getBooleanArg(PARAMS_RESOURCE_LOADER_ENABLED);\n    paramsResourceLoaderEnabled = (null == prle ? false : prle);\n\n    // solr resource loader: on by default\n    Boolean srle = args.getBooleanArg(SOLR_RESOURCE_LOADER_ENABLED);\n    solrResourceLoaderEnabled = (null == srle ? true : srle);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efa46601cc2d7ed3e149b9b6f616d9432237e6f7","date":1574907763,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    Boolean prle = Boolean.getBoolean(PARAMS_RESOURCE_LOADER_ENABLED);\n    paramsResourceLoaderEnabled = (null == prle ? false : prle);\n\n    // solr resource loader: off by default\n    Boolean srle = Boolean.getBoolean(SOLR_RESOURCE_LOADER_ENABLED);\n    solrResourceLoaderEnabled = (null == srle ? false : srle);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    Boolean prle = args.getBooleanArg(PARAMS_RESOURCE_LOADER_ENABLED);\n    paramsResourceLoaderEnabled = (null == prle ? false : prle);\n\n    // solr resource loader: on by default\n    Boolean srle = args.getBooleanArg(SOLR_RESOURCE_LOADER_ENABLED);\n    solrResourceLoaderEnabled = (null == srle ? true : srle);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9c48b23bbaecd85f2b3ff921963f19fd590e579c","d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c48b23bbaecd85f2b3ff921963f19fd590e579c","date":1574955958,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    paramsResourceLoaderEnabled = Boolean.getBoolean(PARAMS_RESOURCE_LOADER_ENABLED);\n\n    // solr resource loader: off by default\n    solrResourceLoaderEnabled = Boolean.getBoolean(SOLR_RESOURCE_LOADER_ENABLED);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    Boolean prle = Boolean.getBoolean(PARAMS_RESOURCE_LOADER_ENABLED);\n    paramsResourceLoaderEnabled = (null == prle ? false : prle);\n\n    // solr resource loader: off by default\n    Boolean srle = Boolean.getBoolean(SOLR_RESOURCE_LOADER_ENABLED);\n    solrResourceLoaderEnabled = (null == srle ? false : srle);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":["1936b95f78af7bc57e67df5b0de3f21a54df10af","efa46601cc2d7ed3e149b9b6f616d9432237e6f7"],"bugIntro":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d94deac68514af4c985eabd56d9bb95ce27467b9","date":1576085774,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    paramsResourceLoaderEnabled = Boolean.getBoolean(PARAMS_RESOURCE_LOADER_ENABLED);\n\n    // solr resource loader: off by default\n    solrResourceLoaderEnabled = Boolean.getBoolean(SOLR_RESOURCE_LOADER_ENABLED);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":["9c48b23bbaecd85f2b3ff921963f19fd590e579c","1936b95f78af7bc57e67df5b0de3f21a54df10af","efa46601cc2d7ed3e149b9b6f616d9432237e6f7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05670850e195a4dbc4a0c38318acd8894826f153","date":1576147412,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    // params resource loader: off by default\n    paramsResourceLoaderEnabled = Boolean.getBoolean(PARAMS_RESOURCE_LOADER_ENABLED);\n\n    // solr resource loader: off by default\n    solrResourceLoaderEnabled = Boolean.getBoolean(SOLR_RESOURCE_LOADER_ENABLED);\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(\"{} specified does not exist: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(\"{} specified is not a directory: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(TEMPLATE_BASE_DIR + \" specified does not exist: \" + fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(TEMPLATE_BASE_DIR + \" specified is not a directory: \" + fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(\"{} specified does not exist: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(\"{} specified is not a directory: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(\"{} specified does not exist: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(\"{} specified is not a directory: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#init(NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    log.warn(\"VelocityResponseWriter is deprecated. This may be removed in future Solr releases. Please SOLR-14065.\");\n    fileResourceLoaderBaseDir = null;\n    String templateBaseDir = (String) args.get(TEMPLATE_BASE_DIR);\n\n    if (templateBaseDir != null && !templateBaseDir.isEmpty()) {\n      fileResourceLoaderBaseDir = new File(templateBaseDir).getAbsoluteFile();\n      if (!fileResourceLoaderBaseDir.exists()) { // \"*not* exists\" condition!\n        log.warn(\"{} specified does not exist: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n        fileResourceLoaderBaseDir = null;\n      } else {\n        if (!fileResourceLoaderBaseDir.isDirectory()) { // \"*not* a directory\" condition\n          log.warn(\"{} specified is not a directory: {}\", TEMPLATE_BASE_DIR, fileResourceLoaderBaseDir);\n          fileResourceLoaderBaseDir = null;\n        }\n      }\n    }\n\n    initPropertiesFileName = (String) args.get(PROPERTIES_FILE);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList tools = (NamedList)args.get(\"tools\");\n    if (tools != null) {\n      for(Object t : tools) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map.Entry tool = (Map.Entry)t;\n        customTools.put(tool.getKey().toString(), tool.getValue().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["7530de27b87b961b51f01bd1299b7004d46e8823"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["71946974c05b5dc4d3201f8abf4ecd2609bba400","7530de27b87b961b51f01bd1299b7004d46e8823"],"9c48b23bbaecd85f2b3ff921963f19fd590e579c":["efa46601cc2d7ed3e149b9b6f616d9432237e6f7"],"05670850e195a4dbc4a0c38318acd8894826f153":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["05670850e195a4dbc4a0c38318acd8894826f153"],"10349d681267bb9b224adb51818a0c9b68fdc22c":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"df724d84dab24a0cc54bec95a8680867adc7f171":["9c48b23bbaecd85f2b3ff921963f19fd590e579c","05670850e195a4dbc4a0c38318acd8894826f153"],"efa46601cc2d7ed3e149b9b6f616d9432237e6f7":["10349d681267bb9b224adb51818a0c9b68fdc22c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["9c48b23bbaecd85f2b3ff921963f19fd590e579c"],"7530de27b87b961b51f01bd1299b7004d46e8823":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["10349d681267bb9b224adb51818a0c9b68fdc22c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9c48b23bbaecd85f2b3ff921963f19fd590e579c":["df724d84dab24a0cc54bec95a8680867adc7f171","d94deac68514af4c985eabd56d9bb95ce27467b9"],"05670850e195a4dbc4a0c38318acd8894826f153":["a966532d92cf9ba2856f15a8140151bb6b518e4b","df724d84dab24a0cc54bec95a8680867adc7f171"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"10349d681267bb9b224adb51818a0c9b68fdc22c":["efa46601cc2d7ed3e149b9b6f616d9432237e6f7"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"efa46601cc2d7ed3e149b9b6f616d9432237e6f7":["9c48b23bbaecd85f2b3ff921963f19fd590e579c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["05670850e195a4dbc4a0c38318acd8894826f153"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["1936b95f78af7bc57e67df5b0de3f21a54df10af","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["b659435fdb2401d91fa87bb3df798ae41a8046cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}