{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":null,"sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}