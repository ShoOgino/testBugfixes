{"path":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns SortedDocValues for the reader, or {@link #EMPTY_SORTED} if it has none. \n   */\n  public static SortedDocValues getSorted(AtomicReader in, String field) throws IOException {\n    SortedDocValues dv = in.getSortedDocValues(field);\n    if (dv == null) {\n      return EMPTY_SORTED;\n    } else {\n      return dv;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns SortedDocValues for the reader, or {@link #EMPTY_SORTED} if it has none. \n   */\n  public static SortedDocValues getSorted(AtomicReader in, String field) throws IOException {\n    SortedDocValues dv = in.getSortedDocValues(field);\n    if (dv == null) {\n      return EMPTY_SORTED;\n    } else {\n      return dv;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns SortedDocValues for the reader, or {@link #EMPTY_SORTED} if it has none. \n   */\n  public static SortedDocValues getSorted(AtomicReader in, String field) throws IOException {\n    SortedDocValues dv = in.getSortedDocValues(field);\n    if (dv == null) {\n      return EMPTY_SORTED;\n    } else {\n      return dv;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","sourceNew":"  /**\n   * Returns SortedDocValues for the reader, or {@link #emptySorted} if it has none. \n   */\n  public static SortedDocValues getSorted(AtomicReader in, String field) throws IOException {\n    SortedDocValues dv = in.getSortedDocValues(field);\n    if (dv == null) {\n      return emptySorted();\n    } else {\n      return dv;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns SortedDocValues for the reader, or {@link #EMPTY_SORTED} if it has none. \n   */\n  public static SortedDocValues getSorted(AtomicReader in, String field) throws IOException {\n    SortedDocValues dv = in.getSortedDocValues(field);\n    if (dv == null) {\n      return EMPTY_SORTED;\n    } else {\n      return dv;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#getSorted(AtomicReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns SortedDocValues for the reader, or {@link #emptySorted} if it has none. \n   */\n  public static SortedDocValues getSorted(AtomicReader in, String field) throws IOException {\n    SortedDocValues dv = in.getSortedDocValues(field);\n    if (dv == null) {\n      return emptySorted();\n    } else {\n      return dv;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}