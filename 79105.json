{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox,\n                                 final double centerLat, final double centerLon, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLat, centerLon);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLat + \" \" + centerLon + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLat = centerLat;\n    this.centerLon = centerLon;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox, final double centerLon,\n                                final double centerLat, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLon, centerLat);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLon + \" \" + centerLat + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLon = centerLon;\n    this.centerLat = centerLat;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6c59bc551f4e523ce6a321280cc6733424fb824","date":1458837690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox,\n                                 final double centerLat, final double centerLon, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n\n    this.centerLat = centerLat;\n    this.centerLon = centerLon;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox,\n                                 final double centerLat, final double centerLon, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    {\n      // check longitudinal overlap (restrict distance to maximum longitudinal radius)\n      // todo this restriction technically shouldn't be needed,\n      // its only purpose is to ensure the bounding box doesn't self overlap.\n      final double maxRadius = GeoDistanceUtils.maxRadialDistanceMeters(centerLat, centerLon);\n      if (radiusMeters > maxRadius) {\n        throw new IllegalArgumentException(\"radiusMeters \" + radiusMeters + \" exceeds maxRadius [\" + maxRadius\n            + \"] at location [\" + centerLat + \" \" + centerLon + \"]\");\n      }\n    }\n\n    if (GeoUtils.isValidLat(centerLat) == false) {\n      throw new IllegalArgumentException(\"invalid centerLat \" + centerLat);\n    }\n\n    if (GeoUtils.isValidLon(centerLon) == false) {\n      throw new IllegalArgumentException(\"invalid centerLon \" + centerLon);\n    }\n\n    if (radiusMeters <= 0.0) {\n      throw new IllegalArgumentException(\"invalid radiusMeters \" + radiusMeters);\n    }\n\n    this.centerLat = centerLat;\n    this.centerLon = centerLon;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,Rectangle,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQuery#GeoPointDistanceQuery(String,TermEncoding,GeoRect,double,double,double).mjava","sourceNew":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final Rectangle bbox,\n                                 final double centerLat, final double centerLon, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n\n    this.centerLat = centerLat;\n    this.centerLon = centerLon;\n    this.radiusMeters = radiusMeters;\n  }\n\n","sourceOld":"  private GeoPointDistanceQuery(final String field, final TermEncoding termEncoding, final GeoRect bbox,\n                                 final double centerLat, final double centerLon, final double radiusMeters) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n\n    this.centerLat = centerLat;\n    this.centerLon = centerLon;\n    this.radiusMeters = radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["ec996bf2daff09d61a876319e8fae4aebbea58e3"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}