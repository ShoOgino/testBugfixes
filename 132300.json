{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread()) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          // wait on the thread to die of natural causes\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6445850ff6b824ef729ade6c8052f1122565311a","date":1299871498,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().equals(\"main-EventThread\")) t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb4754fbc61d2e31d1875be5cbd891390326279","date":1299874324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().equals(\"main-EventThread\")) t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7805c0c4eedb491d5a554a20eef60b4c93587e37","date":1299893749,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6a1197a937cd5862b753577b5b39d199f7afa2","date":1301013881,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          t.interrupt();\n          try {\n            t.join(THREAD_STOP_GRACE_MSEC);\n          } catch (InterruptedException e) { e.printStackTrace(); }\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n    \n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n      \n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n          \n        if (t.isAlive() && \n            !rogueThreads.containsKey(t) && \n            t != Thread.currentThread() && \n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#threadCleanup(String).mjava","sourceNew":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","sourceOld":"  /**\n   * Looks for leftover running threads, trying to kill them off,\n   * so they don't fail future tests.\n   * returns the number of rogue threads that it found.\n   */\n  private static int threadCleanup(String context) {\n    // educated guess\n    Thread[] stillRunning = new Thread[Thread.activeCount()+1];\n    int threadCount = 0;\n    int rogueCount = 0;\n\n    if ((threadCount = Thread.enumerate(stillRunning)) > 1) {\n      while (threadCount == stillRunning.length) {\n        // truncated response\n        stillRunning = new Thread[stillRunning.length*2];\n        threadCount = Thread.enumerate(stillRunning);\n      }\n\n      for (int i = 0; i < threadCount; i++) {\n        Thread t = stillRunning[i];\n\n        if (t.isAlive() &&\n            !rogueThreads.containsKey(t) &&\n            t != Thread.currentThread() &&\n            /* its ok to keep your searcher across test cases */\n            (t.getName().startsWith(\"LuceneTestCase\") && context.startsWith(\"test method\")) == false) {\n          System.err.println(\"WARNING: \" + context  + \" left thread running: \" + t);\n          rogueThreads.put(t, true);\n          rogueCount++;\n          if (t.getName().startsWith(\"LuceneTestCase\")) {\n            System.err.println(\"PLEASE CLOSE YOUR INDEXSEARCHERS IN YOUR TEST!!!!\");\n            continue;\n          } else {\n            // wait on the thread to die of natural causes\n            try {\n              t.join(THREAD_STOP_GRACE_MSEC);\n            } catch (InterruptedException e) { e.printStackTrace(); }\n          }\n          // try to stop the thread:\n          t.setUncaughtExceptionHandler(null);\n          Thread.setDefaultUncaughtExceptionHandler(null);\n          if (!t.getName().startsWith(\"SyncThread\")) // avoid zookeeper jre crash\n            t.interrupt();\n        }\n      }\n    }\n    return rogueCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7805c0c4eedb491d5a554a20eef60b4c93587e37":["1eb4754fbc61d2e31d1875be5cbd891390326279"],"5c6a1197a937cd5862b753577b5b39d199f7afa2":["7805c0c4eedb491d5a554a20eef60b4c93587e37"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"6445850ff6b824ef729ade6c8052f1122565311a":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["5c6a1197a937cd5862b753577b5b39d199f7afa2","c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","5c6a1197a937cd5862b753577b5b39d199f7afa2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","5c6a1197a937cd5862b753577b5b39d199f7afa2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5c6a1197a937cd5862b753577b5b39d199f7afa2","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eb4754fbc61d2e31d1875be5cbd891390326279":["6445850ff6b824ef729ade6c8052f1122565311a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7805c0c4eedb491d5a554a20eef60b4c93587e37":["5c6a1197a937cd5862b753577b5b39d199f7afa2"],"5c6a1197a937cd5862b753577b5b39d199f7afa2":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233"],"6445850ff6b824ef729ade6c8052f1122565311a":["1eb4754fbc61d2e31d1875be5cbd891390326279"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["6445850ff6b824ef729ade6c8052f1122565311a","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1eb4754fbc61d2e31d1875be5cbd891390326279":["7805c0c4eedb491d5a554a20eef60b4c93587e37"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}