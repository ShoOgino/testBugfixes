{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores());\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context));\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","sourceNew":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores());\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores());\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context));\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","sourceNew":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores(), 1f);\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores());\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","sourceNew":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores(), 1f);\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores());\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","sourceNew":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.scoreMode(), 1f);\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores(), 1f);\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/SuggestIndexSearcher#suggest(CompletionQuery,TopSuggestDocsCollector).mjava","sourceNew":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.scoreMode(), 1f);\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level suggest API.\n   * Collects completion hits through <code>collector</code> for <code>query</code>.\n   *\n   * <p>{@link TopSuggestDocsCollector#collect(int, CharSequence, CharSequence, float)}\n   * is called for every matching completion hit.\n   */\n  public void suggest(CompletionQuery query, TopSuggestDocsCollector collector) throws IOException {\n    // TODO use IndexSearcher.rewrite instead\n    // have to implement equals() and hashCode() in CompletionQuerys and co\n    query = (CompletionQuery) query.rewrite(getIndexReader());\n    Weight weight = query.createWeight(this, collector.needsScores(), 1f);\n    for (LeafReaderContext context : getIndexReader().leaves()) {\n      BulkScorer scorer = weight.bulkScorer(context);\n      if (scorer != null) {\n        try {\n          scorer.score(collector.getLeafCollector(context), context.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}