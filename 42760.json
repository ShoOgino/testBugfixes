{"path":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      final String term = text.utf8ToChars(spare).toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, TermFreqVector vector) {\n    BytesRef[] terms = vector.getTerms();\n    int freqs[] = vector.getTermFrequencies();\n    final CharsRef spare = new CharsRef();\n    for (int j = 0; j < terms.length; j++) {\n      final String term = terms[j].utf8ToChars(spare).toString();\n\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freqs[j];\n      } else {\n        cnt.x += freqs[j];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      final String term = text.utf8ToChars(spare).toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}