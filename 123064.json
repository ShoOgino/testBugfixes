{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#printState().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#printState().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void printState() throws Exception {\n    log.debug(\"-------------_ FINAL STATE --------------\");\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    for (String node: cloudManager.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> values = cloudManager.getNodeStateProvider().getNodeValues(node, ImplicitSnitch.tags);\n      log.debug(\"* Node values: \" + node + \"\\n\" + Utils.toJSONString(values));\n    }\n    log.debug(\"* Live nodes: \" + cloudManager.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    state.forEachCollection(coll -> log.debug(\"* Collection \" + coll.getName() + \" state: \" + coll));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#printState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#printState().mjava","sourceNew":"  @After\n  public void printState() throws Exception {\n    log.debug(\"-------------_ FINAL STATE --------------\");\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    for (String node: cloudManager.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> values = cloudManager.getNodeStateProvider().getNodeValues(node, ImplicitSnitch.tags);\n      if (log.isDebugEnabled()) {\n        log.debug(\"* Node values: {}\\n{}\", node, Utils.toJSONString(values));\n      }\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"* Live nodes: {}\", cloudManager.getClusterStateProvider().getLiveNodes());\n    }\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    if (log.isDebugEnabled()) {\n      state.forEachCollection(coll -> log.debug(\"* Collection {} state: {}\", coll.getName(), coll));\n    }\n  }\n\n","sourceOld":"  @After\n  public void printState() throws Exception {\n    log.debug(\"-------------_ FINAL STATE --------------\");\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    for (String node: cloudManager.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> values = cloudManager.getNodeStateProvider().getNodeValues(node, ImplicitSnitch.tags);\n      log.debug(\"* Node values: \" + node + \"\\n\" + Utils.toJSONString(values));\n    }\n    log.debug(\"* Live nodes: \" + cloudManager.getClusterStateProvider().getLiveNodes());\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    state.forEachCollection(coll -> log.debug(\"* Collection \" + coll.getName() + \" state: \" + coll));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#printState().mjava","sourceNew":null,"sourceOld":"  @After\n  public void printState() throws Exception {\n    log.debug(\"-------------_ FINAL STATE --------------\");\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    for (String node: cloudManager.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> values = cloudManager.getNodeStateProvider().getNodeValues(node, ImplicitSnitch.tags);\n      if (log.isDebugEnabled()) {\n        log.debug(\"* Node values: {}\\n{}\", node, Utils.toJSONString(values));\n      }\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"* Live nodes: {}\", cloudManager.getClusterStateProvider().getLiveNodes());\n    }\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    if (log.isDebugEnabled()) {\n      state.forEachCollection(coll -> log.debug(\"* Collection {} state: {}\", coll.getName(), coll));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}