{"path":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocument(Term,IndexDocument).mjava","commits":[{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocument(Term,IndexDocument).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, IndexDocument doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocument(Term,IndexDocument).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocument(Term,Iterable[#-extends-IndexableField]).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, IndexDocument doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, Iterable<? extends IndexableField> doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocument(Term,IndexDocument).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocument(Term,IndexDocument).mjava","sourceNew":"  @Override\n  protected void addDocument(Term id, IndexDocument doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocument(Term id, IndexDocument doc) throws Exception {\n    final long gen = genWriter.addDocument(doc);\n\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(1, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}