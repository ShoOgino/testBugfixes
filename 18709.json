{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":["ba6c544fc28b1a67cc06478eee0658f2f67c5c27","ba6c544fc28b1a67cc06478eee0658f2f67c5c27"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    /** Construct a path segment.\n     *@param planetModel is the planet model.\n     *@param start is the starting point.\n     *@param end is the ending point.\n     *@param normalizedConnectingPlane is the connecting plane.\n     *@param planeBoundingOffset is the linear offset from the connecting plane to either side.\n     */\n    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n        \n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}