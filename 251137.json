{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        doc += docReader.next();\n        if (!omitTF) {\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        doc += docReader.next();\n        if (!omitTF) {\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        doc += docReader.next();\n        if (!omitTF) {\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        doc += docReader.next();\n        if (!omitTF) {\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b1add9ddc0005b07550d4350720aac22dc9886b3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["60ba444201d2570214b6fcf1d15600dc1a01f548","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}