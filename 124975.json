{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","commits":[{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","pathOld":"/dev/null","sourceNew":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    FieldInvertState state = new FieldInvertState(\"a_tfidf\");\n    state.setBoost(1.0f);\n    state.setLength(4);\n    long norm = similarity.computeNorm(state);\n    float nrm = similarity.decodeNormValue((byte) norm);\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='\" + nrm  + \"'\");  // sqrt(4)==2 and is exactly representable when quantized to a byte\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","sourceNew":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    FieldInvertState state = new FieldInvertState(\"a_tfidf\");\n    state.setLength(4);\n    long norm = similarity.computeNorm(state);\n    float nrm = similarity.decodeNormValue((byte) norm);\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='\" + nrm  + \"'\");  // sqrt(4)==2 and is exactly representable when quantized to a byte\n    \n  }\n\n","sourceOld":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    FieldInvertState state = new FieldInvertState(\"a_tfidf\");\n    state.setBoost(1.0f);\n    state.setLength(4);\n    long norm = similarity.computeNorm(state);\n    float nrm = similarity.decodeNormValue((byte) norm);\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='\" + nrm  + \"'\");  // sqrt(4)==2 and is exactly representable when quantized to a byte\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","sourceNew":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='0.5'\");  // 1/sqrt(4)==1/2==0.5\n    \n  }\n\n","sourceOld":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    FieldInvertState state = new FieldInvertState(\"a_tfidf\");\n    state.setLength(4);\n    long norm = similarity.computeNorm(state);\n    float nrm = similarity.decodeNormValue((byte) norm);\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='\" + nrm  + \"'\");  // sqrt(4)==2 and is exactly representable when quantized to a byte\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","sourceNew":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='0.5'\");  // 1/sqrt(4)==1/2==0.5\n    \n  }\n\n","sourceOld":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    FieldInvertState state = new FieldInvertState(\"a_tfidf\");\n    state.setLength(4);\n    long norm = similarity.computeNorm(state);\n    float nrm = similarity.decodeNormValue((byte) norm);\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='\" + nrm  + \"'\");  // sqrt(4)==2 and is exactly representable when quantized to a byte\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ce7dfc22caf6e50ab1097d37e7d3bcd9990aa1b","date":1509468032,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testTFIDFFunctions().mjava","sourceNew":"  @Test\n  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='0.5'\");  // 1/sqrt(4)==1/2==0.5\n    \n  }\n\n","sourceOld":"  public void testTFIDFFunctions() {\n    clearIndex();\n\n    TFIDFSimilarity similarity = null;\n    {\n      Similarity sim = h.getCore().getLatestSchema().getFieldType(\"a_tfidf\").getSimilarity();\n      assertNotNull(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config?\", sim);\n      assertTrue(\"Test needs *_tfidf to use a TFIDFSimilarity ... who broke the config: \" + sim.getClass(),\n                 sim instanceof TFIDFSimilarity);\n      similarity = (TFIDFSimilarity) sim;\n    }\n     \n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\", \"a_tfidf\",\"how now brown cow\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\", \"a_tfidf\",\"brown cow\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\", \"a_tfidf\",\"cow cow cow cow cow\"));\n    assertU(commit());\n\n    // make sure it doesn't get a NPE if no terms are present in a field.\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(0,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(nofield_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(0)  + \"'\");\n    \n    // fields with real values\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}idf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.idf(3,6)  + \"'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}tf(a_tfidf,cow)\", \"fq\",\"id:6\"),\n            \"//float[@name='score']='\" + similarity.tf(5)  + \"'\");\n    \n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}norm(a_tfidf)\", \"fq\",\"id:2\"),\n        \"//float[@name='score']='0.5'\");  // 1/sqrt(4)==1/2==0.5\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"1ce7dfc22caf6e50ab1097d37e7d3bcd9990aa1b":["615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ce7dfc22caf6e50ab1097d37e7d3bcd9990aa1b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","1ce7dfc22caf6e50ab1097d37e7d3bcd9990aa1b"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"1ce7dfc22caf6e50ab1097d37e7d3bcd9990aa1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}