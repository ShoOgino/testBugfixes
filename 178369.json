{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","pathOld":"/dev/null","sourceNew":"  public abstract void close();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","sourceNew":"  public void close() {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public abstract void close();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","sourceNew":"  public void close() {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public abstract void close();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","sourceNew":"  public void close() {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public abstract void close();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd4f332774f36bc85e29ac69a692f960dac011a9","date":1328162395,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#close(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#close().mjava","sourceNew":"  public void close(boolean committed) {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        if (committed) {\n          // record a commit\n          CommitUpdateCommand cmd = new CommitUpdateCommand(new LocalSolrQueryRequest(uhandler.core, new ModifiableSolrParams((SolrParams)null)), false);\n          tlog.writeCommit(cmd);\n        }\n\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","sourceOld":"  public void close() {\n    synchronized (this) {\n      try {\n        recoveryExecutor.shutdownNow();\n      } catch (Exception e) {\n        SolrException.log(log, e);\n      }\n\n      // Don't delete the old tlogs, we want to be able to replay from them and retrieve old versions\n\n      if (prevTlog != null) {\n        prevTlog.deleteOnClose = false;\n        prevTlog.decref();\n        prevTlog.forceClose();\n      }\n      if (tlog != null) {\n        tlog.deleteOnClose = false;\n        tlog.decref();\n        tlog.forceClose();\n      }\n\n      for (TransactionLog log : logs) {\n        log.deleteOnClose = false;\n        log.decref();\n        log.forceClose();\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"bd4f332774f36bc85e29ac69a692f960dac011a9":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd4f332774f36bc85e29ac69a692f960dac011a9"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","bd4f332774f36bc85e29ac69a692f960dac011a9"],"bd4f332774f36bc85e29ac69a692f960dac011a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}