{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","pathOld":"/dev/null","sourceNew":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","date":1390935815,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","sourceNew":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","sourceOld":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","sourceNew":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(5000);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","sourceOld":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d0814e12c6e2b86cf23048e6310a3715a8f6ea5","date":1393541825,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testRandomSortsOnLargeIndex().mjava","sourceNew":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","sourceOld":"  /** randomized testing of a non-trivial number of docs using assertFullWalkNoDups \n   */\n  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(5000);\n\n    // start with a smallish number of documents, and test that we can do a full walk using a \n    // sort on *every* field in the schema...\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    // now add a lot more docs, and test a handful of randomized sorts\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d0814e12c6e2b86cf23048e6310a3715a8f6ea5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d0814e12c6e2b86cf23048e6310a3715a8f6ea5"]},"commit2Childs":{"3d0814e12c6e2b86cf23048e6310a3715a8f6ea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3d0814e12c6e2b86cf23048e6310a3715a8f6ea5"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}