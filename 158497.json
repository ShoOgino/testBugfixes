{"path":"lucene/core/src/test/org/apache/lucene/store/TestNativeFSLockFactory#testBadPermissions().mjava","commits":[{"id":"0e0327236e653f06dbc0e9c4c76a526928dc4b7d","date":1504936939,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestNativeFSLockFactory#testBadPermissions().mjava","pathOld":"/dev/null","sourceNew":"  public void testBadPermissions() throws IOException {\n    // create a mock filesystem that will throw exc on creating test.lock\n    Path tmpDir = createTempDir();\n    tmpDir = FilterPath.unwrap(tmpDir).toRealPath();\n    FileSystem mock = new MockBadPermissionsFileSystem(tmpDir.getFileSystem()).getFileSystem(null);\n    Path mockPath = mock.getPath(tmpDir.toString());\n\n    // we should get an IOException (typically NoSuchFileException but no guarantee) with\n    // our fake AccessDenied added as suppressed.\n    Directory dir = getDirectory(mockPath.resolve(\"indexDir\"));\n    IOException expected = expectThrows(IOException.class, () -> {\n      dir.obtainLock(\"test.lock\");\n    });\n    AccessDeniedException suppressed = (AccessDeniedException) expected.getSuppressed()[0];\n    assertTrue(suppressed.getMessage().contains(\"fake access denied\"));\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestNativeFSLockFactory#testBadPermissions().mjava","pathOld":"/dev/null","sourceNew":"  public void testBadPermissions() throws IOException {\n    // create a mock filesystem that will throw exc on creating test.lock\n    Path tmpDir = createTempDir();\n    tmpDir = FilterPath.unwrap(tmpDir).toRealPath();\n    FileSystem mock = new MockBadPermissionsFileSystem(tmpDir.getFileSystem()).getFileSystem(null);\n    Path mockPath = mock.getPath(tmpDir.toString());\n\n    // we should get an IOException (typically NoSuchFileException but no guarantee) with\n    // our fake AccessDenied added as suppressed.\n    Directory dir = getDirectory(mockPath.resolve(\"indexDir\"));\n    IOException expected = expectThrows(IOException.class, () -> {\n      dir.obtainLock(\"test.lock\");\n    });\n    AccessDeniedException suppressed = (AccessDeniedException) expected.getSuppressed()[0];\n    assertTrue(suppressed.getMessage().contains(\"fake access denied\"));\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e0327236e653f06dbc0e9c4c76a526928dc4b7d"],"0e0327236e653f06dbc0e9c4c76a526928dc4b7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e0327236e653f06dbc0e9c4c76a526928dc4b7d"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"0e0327236e653f06dbc0e9c4c76a526928dc4b7d":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","0e0327236e653f06dbc0e9c4c76a526928dc4b7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}