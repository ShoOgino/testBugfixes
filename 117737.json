{"path":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","commits":[{"id":"7903c83b7b751fd2ba24d44bc08b5d8ffceaf7ee","date":1221593107,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader());\n\n    assertTrue(\"first doc\", spanScorer.next());\n    assertEquals(\"first doc number\", spanScorer.doc(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", ! spanScorer.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader());\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader());\n\n    assertTrue(\"first doc\", spanScorer.next());\n    assertEquals(\"first doc number\", spanScorer.doc(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", ! spanScorer.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader());\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe941135bdfc28c81e20b4d21422f8726af34925"],"30a558487f2298c2c19ceca9103c1b6865d64708":["7903c83b7b751fd2ba24d44bc08b5d8ffceaf7ee"],"7903c83b7b751fd2ba24d44bc08b5d8ffceaf7ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["fe941135bdfc28c81e20b4d21422f8726af34925"],"7903c83b7b751fd2ba24d44bc08b5d8ffceaf7ee":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7903c83b7b751fd2ba24d44bc08b5d8ffceaf7ee"],"fe941135bdfc28c81e20b4d21422f8726af34925":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}