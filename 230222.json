{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","commits":[{"id":"737c1bba990ea3999c9cebd84ee765f8d95f29fc","date":1353002499,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(\"hello world 1\", dv.getSource().getBytes(0, new BytesRef()).utf8ToString());\n    assertEquals(\"hello world 2\", dv.getSource().getBytes(1, new BytesRef()).utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","sourceNew":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\", random().nextBoolean());\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(\"hello world 1\", dv.getSource().getBytes(0, new BytesRef()).utf8ToString());\n    assertEquals(\"hello world 2\", dv.getSource().getBytes(1, new BytesRef()).utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","sourceNew":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\", random().nextBoolean());\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","sourceNew":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","sourceNew":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedBytesTwoDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocuments().mjava","sourceNew":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(dv.getOrd(0), scratch);\n    assertEquals(\"hello world 1\", scratch.utf8ToString());\n    dv.lookupOrd(dv.getOrd(1), scratch);\n    assertEquals(\"hello world 2\", scratch.utf8ToString());\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ed65f3455364344c6d2ff76ea5421aac754eae7":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["737c1bba990ea3999c9cebd84ee765f8d95f29fc"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"737c1bba990ea3999c9cebd84ee765f8d95f29fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"]},"commit2Childs":{"1ed65f3455364344c6d2ff76ea5421aac754eae7":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["737c1bba990ea3999c9cebd84ee765f8d95f29fc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"737c1bba990ea3999c9cebd84ee765f8d95f29fc":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}