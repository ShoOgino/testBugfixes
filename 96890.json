{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query, float boost) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(boost, queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with {@link WeightedSpanTerm}s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException If there is a low-level I/O error\n   */\n  protected void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<>();\n    final IndexSearcher searcher = new IndexSearcher(getLeafContext());\n    searcher.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["05c52ac194342b760b830342ee8423fcf00e54d0"],"05c52ac194342b760b830342ee8423fcf00e54d0":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["05c52ac194342b760b830342ee8423fcf00e54d0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05c52ac194342b760b830342ee8423fcf00e54d0":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}