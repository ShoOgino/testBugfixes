{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","sourceNew":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed());\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","sourceOld":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed());\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","sourceNew":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed());\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","sourceOld":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed());\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","sourceNew":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    long bytesUsed = bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed();\n    ramBytesUsed.addAndGet(bytesUsed);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"var sorted\", bytesUsed));\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","sourceOld":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed());\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","sourceNew":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    long bytesUsed = bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed();\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesUsed);\n      instanceInfo.put(field.name, Accountables.namedAccountable(\"var sorted\", bytesUsed));\n    }\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","sourceOld":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    long bytesUsed = bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed();\n    ramBytesUsed.addAndGet(bytesUsed);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"var sorted\", bytesUsed));\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","sourceNew":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    long bytesUsed = bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed();\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesUsed);\n      instanceInfo.put(field.name, Accountables.namedAccountable(\"var sorted\", bytesUsed));\n    }\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","sourceOld":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    long bytesUsed = bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed();\n    ramBytesUsed.addAndGet(bytesUsed);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"var sorted\", bytesUsed));\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarSorted(FieldInfo,IndexInput,IndexInput).mjava","sourceNew":null,"sourceOld":"  private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {\n    CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_DAT,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n    CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_SORTED_CODEC_NAME_IDX,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_START,\n                                 Lucene40DocValuesFormat.BYTES_VAR_SORTED_VERSION_CURRENT);\n\n    long maxAddress = index.readLong();\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, maxAddress);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    final PackedInts.Reader addressReader = PackedInts.getReader(index);\n    final PackedInts.Reader ordsReader = PackedInts.getReader(index);\n\n    final int valueCount = addressReader.size() - 1;\n    long bytesUsed = bytesReader.ramBytesUsed() + addressReader.ramBytesUsed() + ordsReader.ramBytesUsed();\n    if (!merging) {\n      ramBytesUsed.addAndGet(bytesUsed);\n      instanceInfo.put(field.name, Accountables.namedAccountable(\"var sorted\", bytesUsed));\n    }\n\n    return correctBuggyOrds(new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int)ordsReader.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        final BytesRef term = new BytesRef();\n        long startAddress = addressReader.get(ord);\n        long endAddress = addressReader.get(ord+1);\n        bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n        return term;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}