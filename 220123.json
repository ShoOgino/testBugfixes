{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#doAddBinaryField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#doAddBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#doAddBinary(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void doAddBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    int maxLength = 0;\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      maxLength = Math.max(maxLength, values.binaryValue().length);\n    }\n    writeFieldEntry(field, DocValuesType.BINARY);\n\n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Long.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    values = valuesProducer.getBinary(field);\n    int numDocsWritten = 0;\n    for (int i = 0; i < numDocs; ++i) {\n      if (values.docID() < i) {\n        values.nextDoc();\n        assert values.docID() >= i;\n      }\n      // write length\n      final int length = values.docID() != i ? 0 : values.binaryValue().length;\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      if (values.docID() == i) {\n        BytesRef value = values.binaryValue();\n        data.writeBytes(value.bytes, value.offset, value.length);\n      }\n\n      // pad to fit\n      for (int j = length; j < maxLength; j++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      if (values.docID() != i) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n    }\n\n    assert numDocs == numDocsWritten;\n  }\n\n","sourceOld":"  private void doAddBinary(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    int maxLength = 0;\n    for(BytesRef value : values) {\n      final int length = value == null ? 0 : value.length;\n      maxLength = Math.max(maxLength, length);\n    }\n    writeFieldEntry(field, DocValuesType.BINARY);\n\n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Long.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    int numDocsWritten = 0;\n    for(BytesRef value : values) {\n      // write length\n      final int length = value == null ? 0 : value.length;\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      if (value != null) {\n        data.writeBytes(value.bytes, value.offset, value.length);\n      }\n\n      // pad to fit\n      for (int i = length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      if (value == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n    }\n\n    assert numDocs == numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#doAddBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  private void doAddBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    int maxLength = 0;\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      maxLength = Math.max(maxLength, values.binaryValue().length);\n    }\n    writeFieldEntry(field, DocValuesType.BINARY);\n\n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Long.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    values = valuesProducer.getBinary(field);\n    int numDocsWritten = 0;\n    for (int i = 0; i < numDocs; ++i) {\n      if (values.docID() < i) {\n        values.nextDoc();\n        assert values.docID() >= i;\n      }\n      // write length\n      final int length = values.docID() != i ? 0 : values.binaryValue().length;\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      if (values.docID() == i) {\n        BytesRef value = values.binaryValue();\n        data.writeBytes(value.bytes, value.offset, value.length);\n      }\n\n      // pad to fit\n      for (int j = length; j < maxLength; j++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      if (values.docID() != i) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n    }\n\n    assert numDocs == numDocsWritten;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}