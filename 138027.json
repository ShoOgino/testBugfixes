{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","commits":[{"id":"224d71a68a47e867c96b8134405615e90f815f84","date":1358787040,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    ParallelTaxonomyArrays arrays = r.getParallelTaxonomyArrays();\n    //int[] parents = arrays.parents();\n    int[] children = arrays.children();\n    int[] siblings = arrays.siblings();\n    out.println(r.getSize() + \" total categories.\");\n\n    int childOrd = children[TaxonomyReader.ROOT_ORDINAL];\n    while(childOrd != -1) {\n      CategoryPath cp = r.getPath(childOrd);\n      int childOrd2 = children[childOrd];\n      int numImmediateChildren = 0;\n      while(childOrd2 != -1) {\n        numImmediateChildren++;\n        childOrd2 = siblings[childOrd2];\n      }\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, childOrd, children, siblings)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, childOrd, children, siblings, \"  \", 1);\n      }\n      childOrd = siblings[childOrd];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    ParallelTaxonomyArrays arrays = r.getParallelTaxonomyArrays();\n    //int[] parents = arrays.parents();\n    int[] children = arrays.children();\n    int[] siblings = arrays.siblings();\n    out.println(r.getSize() + \" total categories.\");\n\n    int childOrd = children[TaxonomyReader.ROOT_ORDINAL];\n    while(childOrd != -1) {\n      CategoryPath cp = r.getPath(childOrd);\n      int childOrd2 = children[childOrd];\n      int numImmediateChildren = 0;\n      while(childOrd2 != -1) {\n        numImmediateChildren++;\n        childOrd2 = siblings[childOrd2];\n      }\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, childOrd, children, siblings)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, childOrd, children, siblings, \"  \", 1);\n      }\n      childOrd = siblings[childOrd];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b2903a7a87a18de2500304882a7f4734082e7cb","date":1365107450,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      CategoryPath cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    ParallelTaxonomyArrays arrays = r.getParallelTaxonomyArrays();\n    //int[] parents = arrays.parents();\n    int[] children = arrays.children();\n    int[] siblings = arrays.siblings();\n    out.println(r.getSize() + \" total categories.\");\n\n    int childOrd = children[TaxonomyReader.ROOT_ORDINAL];\n    while(childOrd != -1) {\n      CategoryPath cp = r.getPath(childOrd);\n      int childOrd2 = children[childOrd];\n      int numImmediateChildren = 0;\n      while(childOrd2 != -1) {\n        numImmediateChildren++;\n        childOrd2 = siblings[childOrd2];\n      }\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, childOrd, children, siblings)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, childOrd, children, siblings, \"  \", 1);\n      }\n      childOrd = siblings[childOrd];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      CategoryPath cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":null,"sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      CategoryPath cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b2903a7a87a18de2500304882a7f4734082e7cb","d33e19a97046248623a7591aeaa6547233fd15e2"],"224d71a68a47e867c96b8134405615e90f815f84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","224d71a68a47e867c96b8134405615e90f815f84"],"3b2903a7a87a18de2500304882a7f4734082e7cb":["224d71a68a47e867c96b8134405615e90f815f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3b2903a7a87a18de2500304882a7f4734082e7cb"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["224d71a68a47e867c96b8134405615e90f815f84","07155cdd910937cdf6877e48884d5782845c8b8b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"224d71a68a47e867c96b8134405615e90f815f84":["07155cdd910937cdf6877e48884d5782845c8b8b","3b2903a7a87a18de2500304882a7f4734082e7cb"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"3b2903a7a87a18de2500304882a7f4734082e7cb":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}