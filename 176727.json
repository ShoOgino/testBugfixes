{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random().nextBoolean();\n      mergeFactor=random().nextInt(3)+2;\n      maxBufferedDocs=random().nextInt(3)+2;\n      int maxThreadStates = 1+random().nextInt(10);\n      boolean doReaderPooling = random().nextBoolean();\n      seed++;\n\n      int nThreads=random().nextInt(5)+1;\n      int iter=random().nextInt(5)+1;\n      int range=random().nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random(), docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random.nextBoolean();\n      mergeFactor=random.nextInt(3)+2;\n      maxBufferedDocs=random.nextInt(3)+2;\n      int maxThreadStates = 1+random.nextInt(10);\n      boolean doReaderPooling = random.nextBoolean();\n      seed++;\n\n      int nThreads=random.nextInt(5)+1;\n      int iter=random.nextInt(5)+1;\n      int range=random.nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random, docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"641a23a95cee1e280f172cdfe6289ea3d010ebf1","date":1351978859,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random().nextBoolean();\n      mergeFactor=random().nextInt(3)+2;\n      maxBufferedDocs=random().nextInt(3)+2;\n      int maxThreadStates = 1+random().nextInt(10);\n      boolean doReaderPooling = random().nextBoolean();\n      seed++;\n\n      int nThreads=random().nextInt(5)+1;\n      int iter=random().nextInt(5)+1;\n      int range=random().nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor + \" maxBufferedDocs=\" + maxBufferedDocs);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random(), docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random().nextBoolean();\n      mergeFactor=random().nextInt(3)+2;\n      maxBufferedDocs=random().nextInt(3)+2;\n      int maxThreadStates = 1+random().nextInt(10);\n      boolean doReaderPooling = random().nextBoolean();\n      seed++;\n\n      int nThreads=random().nextInt(5)+1;\n      int iter=random().nextInt(5)+1;\n      int range=random().nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random(), docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random().nextBoolean();\n      mergeFactor=random().nextInt(3)+2;\n      maxBufferedDocs=random().nextInt(3)+2;\n      boolean doReaderPooling = random().nextBoolean();\n      seed++;\n\n      int nThreads=random().nextInt(5)+1;\n      int iter=random().nextInt(5)+1;\n      int range=random().nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor + \" maxBufferedDocs=\" + maxBufferedDocs);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random(), docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) { // increase iterations for better testing\n      if (VERBOSE) {\n        System.out.println(\"\\n\\nTEST: top iter=\" + i);\n      }\n      sameFieldOrder=random().nextBoolean();\n      mergeFactor=random().nextInt(3)+2;\n      maxBufferedDocs=random().nextInt(3)+2;\n      int maxThreadStates = 1+random().nextInt(10);\n      boolean doReaderPooling = random().nextBoolean();\n      seed++;\n\n      int nThreads=random().nextInt(5)+1;\n      int iter=random().nextInt(5)+1;\n      int range=random().nextInt(20)+1;\n      Directory dir1 = newDirectory();\n      Directory dir2 = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"  nThreads=\" + nThreads + \" iter=\" + iter + \" range=\" + range + \" doPooling=\" + doReaderPooling + \" maxThreadStates=\" + maxThreadStates + \" sameFieldOrder=\" + sameFieldOrder + \" mergeFactor=\" + mergeFactor + \" maxBufferedDocs=\" + maxBufferedDocs);\n      }\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates, doReaderPooling);\n      if (VERBOSE) {\n        System.out.println(\"TEST: index serial\");\n      }\n      indexSerial(random(), docs, dir2);\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify\");\n      }\n      verifyEquals(dir1, dir2, \"id\");\n      dir1.close();\n      dir2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"641a23a95cee1e280f172cdfe6289ea3d010ebf1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c02b804ab16489b95429791a2d8fb0e0728354d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"641a23a95cee1e280f172cdfe6289ea3d010ebf1":["c02b804ab16489b95429791a2d8fb0e0728354d4"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}