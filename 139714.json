{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    FixedBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    FixedBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    FixedBitSet a_and = bs1.clone(); a_and.and(bs2);\n    FixedBitSet a_or = bs1.clone(); a_or.or(bs2);\n    // FixedBitSet a_xor = bs1.clone(); a_xor.xor(bs2);\n    FixedBitSet a_andn = bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    OpenBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    OpenBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    OpenBitSet a_and = (OpenBitSet) bs1.clone(); a_and.and(bs2);\n    OpenBitSet a_or = (OpenBitSet) bs1.clone(); a_or.or(bs2);\n    // OpenBitSet a_xor = (OpenBitSet)bs1.clone(); a_xor.xor(bs2);\n    OpenBitSet a_andn = (OpenBitSet) bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aede538674febaf7c80a83f700bd3d99a8333ad","date":1460244087,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    FixedBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    FixedBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    collect(a1, maxSize);\n    collect(a2, maxSize);\n\n    FixedBitSet a_and = bs1.clone(); a_and.and(bs2);\n    FixedBitSet a_or = bs1.clone(); a_or.or(bs2);\n    // FixedBitSet a_xor = bs1.clone(); a_xor.xor(bs2);\n    FixedBitSet a_andn = bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    FixedBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    FixedBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    FixedBitSet a_and = bs1.clone(); a_and.and(bs2);\n    FixedBitSet a_or = bs1.clone(); a_or.or(bs2);\n    // FixedBitSet a_xor = bs1.clone(); a_xor.xor(bs2);\n    FixedBitSet a_andn = bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b69cc566f3ca5d5904d19b7f8e523e56a219d3","date":1460279487,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#doSingle(int).mjava","sourceNew":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    FixedBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    FixedBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    collect(a1, maxSize);\n    collect(a2, maxSize);\n\n    FixedBitSet a_and = bs1.clone(); a_and.and(bs2);\n    FixedBitSet a_or = bs1.clone(); a_or.or(bs2);\n    // FixedBitSet a_xor = bs1.clone(); a_xor.xor(bs2);\n    FixedBitSet a_andn = bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","sourceOld":"  protected void doSingle(int maxSize) {\n    int sz = rand.nextInt(maxSize+1);\n    int sz2 = rand.nextInt(maxSize);\n    FixedBitSet bs1 = getRandomSet(sz, rand.nextInt(sz+1));\n    FixedBitSet bs2 = getRandomSet(sz, rand.nextInt(sz2+1));\n\n    DocSet a1 = new BitDocSet(bs1);\n    DocSet a2 = new BitDocSet(bs2);\n    DocSet b1 = getDocSet(bs1);\n    DocSet b2 = getDocSet(bs2);\n\n    checkEqual(bs1,b1);\n    checkEqual(bs2,b2);\n\n    iter(a1,b1);\n    iter(a2,b2);\n\n    FixedBitSet a_and = bs1.clone(); a_and.and(bs2);\n    FixedBitSet a_or = bs1.clone(); a_or.or(bs2);\n    // FixedBitSet a_xor = bs1.clone(); a_xor.xor(bs2);\n    FixedBitSet a_andn = bs1.clone(); a_andn.andNot(bs2);\n\n    checkEqual(a_and, b1.intersection(b2));\n    checkEqual(a_or, b1.union(b2));\n    checkEqual(a_andn, b1.andNot(b2));\n\n    assertEquals(a_and.cardinality(), b1.intersectionSize(b2));\n    assertEquals(a_or.cardinality(), b1.unionSize(b2));\n    assertEquals(a_andn.cardinality(), b1.andNotSize(b2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aede538674febaf7c80a83f700bd3d99a8333ad":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44b69cc566f3ca5d5904d19b7f8e523e56a219d3":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","9aede538674febaf7c80a83f700bd3d99a8333ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44b69cc566f3ca5d5904d19b7f8e523e56a219d3"]},"commit2Childs":{"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["9aede538674febaf7c80a83f700bd3d99a8333ad","44b69cc566f3ca5d5904d19b7f8e523e56a219d3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9aede538674febaf7c80a83f700bd3d99a8333ad":["44b69cc566f3ca5d5904d19b7f8e523e56a219d3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44b69cc566f3ca5d5904d19b7f8e523e56a219d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}