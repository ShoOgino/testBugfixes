{"path":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.put(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.put(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.put(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","sourceNew":"    @Override\n    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermEnum#next().mjava","sourceNew":"    @Override\n    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean next() throws IOException {\n      for (int i=0; i<matchingSegments.length; i++) {\n        SegmentMergeInfo smi = matchingSegments[i];\n        if (smi==null) break;\n        if (smi.next())\n          queue.add(smi);\n        else\n          smi.close(); // done with segment\n      }\n      \n      int numMatchingSegments = 0;\n      matchingSegments[0] = null;\n\n      SegmentMergeInfo top = queue.top();\n\n      if (top == null) {\n        term = null;\n        return false;\n      }\n  \n      term = top.term;\n      docFreq = 0;\n  \n      while (top != null && term.compareTo(top.term) == 0) {\n        matchingSegments[numMatchingSegments++] = top;\n        queue.pop();\n        docFreq += top.termEnum.docFreq();    // increment freq\n        top = queue.top();\n      }\n\n      matchingSegments[numMatchingSegments] = null;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}