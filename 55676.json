{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.READ);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.READ);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.getDeletedDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.getRW(info, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.getRW(info, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.getRW(info, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.getRW(info, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertNotNull(deleteReader);\n    assertEquals(1, deleteReader.numDocs());\n    final Object combKey = deleteReader.getCombinedCoreAndDeletesKey();\n    final Object coreKey = deleteReader.getCoreCacheKey();\n    assertNotNull(combKey);\n    assertNotNull(coreKey);\n    assertNotSame(combKey, coreKey);\n\n    SegmentReader clone1 = (SegmentReader) deleteReader.clone();\n    assertSame(coreKey, clone1.getCoreCacheKey());    \n    assertSame(combKey, clone1.getCombinedCoreAndDeletesKey());\n\n    deleteReader.deleteDocument(0);\n    final Object newCombKey = deleteReader.getCombinedCoreAndDeletesKey();\n    assertNotNull(newCombKey);\n    assertNotSame(combKey, newCombKey);\n    assertSame(coreKey, deleteReader.getCoreCacheKey());\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions());\n    assertTrue(deleteReader.numDocs() == 0);\n    \n    SegmentReader clone2 = (SegmentReader) deleteReader.clone();\n    assertSame(coreKey, clone2.getCoreCacheKey());    \n    assertSame(newCombKey, clone2.getCombinedCoreAndDeletesKey());\n    assertFalse(clone2.getLiveDocs().get(0));\n    assertTrue(clone2.hasDeletions());\n    assertEquals(0, clone2.numDocs());\n    clone2.close();\n    \n    assertSame(coreKey, clone1.getCoreCacheKey());    \n    assertSame(combKey, clone1.getCombinedCoreAndDeletesKey());\n    assertNull(clone1.getLiveDocs());\n    assertFalse(clone1.hasDeletions());\n    assertEquals(1, clone2.numDocs());\n    clone1.close();\n\n    deleteReader.close();\n  }\n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.getRW(info, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    deleteReader.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":null,"sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(random, dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.getRW(info, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    assertNotNull(deleteReader);\n    assertEquals(1, deleteReader.numDocs());\n    final Object combKey = deleteReader.getCombinedCoreAndDeletesKey();\n    final Object coreKey = deleteReader.getCoreCacheKey();\n    assertNotNull(combKey);\n    assertNotNull(coreKey);\n    assertNotSame(combKey, coreKey);\n\n    SegmentReader clone1 = (SegmentReader) deleteReader.clone();\n    assertSame(coreKey, clone1.getCoreCacheKey());    \n    assertSame(combKey, clone1.getCombinedCoreAndDeletesKey());\n\n    deleteReader.deleteDocument(0);\n    final Object newCombKey = deleteReader.getCombinedCoreAndDeletesKey();\n    assertNotNull(newCombKey);\n    assertNotSame(combKey, newCombKey);\n    assertSame(coreKey, deleteReader.getCoreCacheKey());\n    assertFalse(deleteReader.getLiveDocs().get(0));\n    assertTrue(deleteReader.hasDeletions());\n    assertTrue(deleteReader.numDocs() == 0);\n    \n    SegmentReader clone2 = (SegmentReader) deleteReader.clone();\n    assertSame(coreKey, clone2.getCoreCacheKey());    \n    assertSame(newCombKey, clone2.getCombinedCoreAndDeletesKey());\n    assertFalse(clone2.getLiveDocs().get(0));\n    assertTrue(clone2.hasDeletions());\n    assertEquals(0, clone2.numDocs());\n    clone2.close();\n    \n    assertSame(coreKey, clone1.getCoreCacheKey());    \n    assertSame(combKey, clone1.getCombinedCoreAndDeletesKey());\n    assertNull(clone1.getLiveDocs());\n    assertFalse(clone1.hasDeletions());\n    assertEquals(1, clone2.numDocs());\n    clone1.close();\n\n    deleteReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["406e7055a3e99d3fa6ce49a555a51dd18b321806","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a3776dccca01c11e7046323cfad46a3b4a471233":["406e7055a3e99d3fa6ce49a555a51dd18b321806","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["b7d9cdceb051035b069ec36719809d0cd837777b"],"b7d9cdceb051035b069ec36719809d0cd837777b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b7d9cdceb051035b069ec36719809d0cd837777b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","5d004d0e0b3f65bb40da76d476d659d7888270e8","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7d9cdceb051035b069ec36719809d0cd837777b":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}