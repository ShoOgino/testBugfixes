{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,\n                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {\n    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the transient core can come and go.\n    //\n    // Maybe the right thing to do is keep all the core descriptors NOT in the SolrCore, but keep all of the\n    // core descriptors in SolrProperties exclusively.\n    // TODO: 5.0 move coreDescriptors out of SolrCore and keep them only once in SolrProperties\n    //\n    synchronized (locker) {\n      if (cfg == null) {\n        ConfigSolrXmlBackCompat.initPersistStatic();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        ConfigSolrXmlBackCompat.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,\n            (file == null ? configFile : file));\n      } else {\n        cfg.initPersist();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,\n                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {\n    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the transient core can come and go.\n    //\n    // Maybe the right thing to do is keep all the core descriptors NOT in the SolrCore, but keep all of the\n    // core descriptors in SolrProperties exclusively.\n    // TODO: 5.0 move coreDescriptors out of SolrCore and keep them only once in SolrProperties\n    //\n    synchronized (locker) {\n      if (cfg == null) {\n        ConfigSolrXml.initPersistStatic();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        ConfigSolrXml.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,\n            (file == null ? configFile : file));\n      } else {\n        cfg.initPersist();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));\n      }\n    }\n  }\n\n","sourceOld":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,\n                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {\n    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the transient core can come and go.\n    //\n    // Maybe the right thing to do is keep all the core descriptors NOT in the SolrCore, but keep all of the\n    // core descriptors in SolrProperties exclusively.\n    // TODO: 5.0 move coreDescriptors out of SolrCore and keep them only once in SolrProperties\n    //\n    synchronized (locker) {\n      if (cfg == null) {\n        ConfigSolrXmlBackCompat.initPersistStatic();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        ConfigSolrXmlBackCompat.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,\n            (file == null ? configFile : file));\n      } else {\n        cfg.initPersist();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,\n                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {\n    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descirptors in solr.xml?\n    //\n    synchronized (locker) {\n      if (cfg == null) {\n        ConfigSolrXml.initPersistStatic();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        // add back all the cores that aren't loaded, either in cores or transient cores\n        for (Map.Entry<String, CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue(), null);\n          }\n        }\n        for (Map.Entry<String, SolrCore> ent : createdCores.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())\n              && ! dynamicDescriptors.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(), null);\n          }\n        }\n        ConfigSolrXml.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,\n            (file == null ? configFile : file));\n      } else {\n        cfg.initPersist();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        // add back all the cores that aren't loaded, either in cores or transient cores\n        for (Map.Entry<String, CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue(), null);\n          }\n        }\n        for (Map.Entry<String, SolrCore> ent : createdCores.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())\n              && ! dynamicDescriptors.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(), null);\n          }\n        }\n        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));\n      }\n    }\n  }\n\n","sourceOld":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,\n                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {\n    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the transient core can come and go.\n    //\n    // Maybe the right thing to do is keep all the core descriptors NOT in the SolrCore, but keep all of the\n    // core descriptors in SolrProperties exclusively.\n    // TODO: 5.0 move coreDescriptors out of SolrCore and keep them only once in SolrProperties\n    //\n    synchronized (locker) {\n      if (cfg == null) {\n        ConfigSolrXml.initPersistStatic();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        ConfigSolrXml.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,\n            (file == null ? configFile : file));\n      } else {\n        cfg.initPersist();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));\n      }\n    }\n  }\n\n","bugFix":["a837c064b67fa63a9394136e31218b908cdcf783"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#persistCores(ConfigSolr,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,\n                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {\n    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descirptors in solr.xml?\n    //\n    synchronized (locker) {\n      if (cfg == null) {\n        ConfigSolrXml.initPersistStatic();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        // add back all the cores that aren't loaded, either in cores or transient cores\n        for (Map.Entry<String, CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue(), null);\n          }\n        }\n        for (Map.Entry<String, SolrCore> ent : createdCores.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())\n              && ! dynamicDescriptors.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(), null);\n          }\n        }\n        ConfigSolrXml.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,\n            (file == null ? configFile : file));\n      } else {\n        cfg.initPersist();\n        persistCores(cfg, cores, loader);\n        persistCores(cfg, transientCores, loader);\n        // add back all the cores that aren't loaded, either in cores or transient cores\n        for (Map.Entry<String, CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue(), null);\n          }\n        }\n        for (Map.Entry<String, SolrCore> ent : createdCores.entrySet()) {\n          if (! cores.containsKey(ent.getKey()) && ! transientCores.containsKey(ent.getKey())\n              && ! dynamicDescriptors.containsKey(ent.getKey())) {\n            addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(), null);\n          }\n        }\n        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}