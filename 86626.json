{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"powpularityS:64.0;c3:2.0\",\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"powpularityS:49.0;c3:2.0\",\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"powpularityS:36.0;c3:2.0\",\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"powpularityS:25.0;c3:2.0\",\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"powpularityS:64.0;c3:2.0\",\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"powpularityS:49.0;c3:2.0\",\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"powpularityS:36.0;c3:2.0\",\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"powpularityS:25.0;c3:2.0\",\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"powpularityS:64.0;c3:2.0\",\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"powpularityS:49.0;c3:2.0\",\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"powpularityS:36.0;c3:2.0\",\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"powpularityS:25.0;c3:2.0\",\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":["3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"powpularityS:64.0;c3:2.0\",\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"powpularityS:49.0;c3:2.0\",\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"powpularityS:36.0;c3:2.0\",\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"powpularityS:25.0;c3:2.0\",\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d76b0cb61601e7ab5711e88ab0b767d913a6ff4","date":1502390632,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    // Test feature vectors returned (with re-ranking)\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":["3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    // Test feature vectors returned (with re-ranking)\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    // Test feature vectors returned (with re-ranking)\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n\n    // Test re-rank and feature vectors returned\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8","date":1502710025,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    // Test feature vectors returned (with re-ranking)\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    // Test feature vectors returned (with re-ranking)\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd","date":1503671644,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":["3d76b0cb61601e7ab5711e88ab0b767d913a6ff4","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e6c4eb6f169ee828eabd776ced7d900664e65a","date":1503675775,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#testSimpleQuery().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testSimpleQuery() throws Exception {\n    // will randomly pick a configuration with [1..5] shards and [1..3] replicas\n\n    // Test regular query, it will sort the documents by inverse\n    // popularity (the less popular, docid == 1, will be in the first\n    // position\n    SolrQuery query = new SolrQuery(\"{!func}sub(8,field(popularity))\");\n\n    query.setRequestHandler(\"/query\");\n    query.setFields(\"*,score\");\n    query.setParam(\"rows\", \"8\");\n\n    QueryResponse queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    final Float original_result0_score = (Float)queryResponse.getResults().get(0).get(\"score\");\n    final Float original_result1_score = (Float)queryResponse.getResults().get(1).get(\"score\");\n    final Float original_result2_score = (Float)queryResponse.getResults().get(2).get(\"score\");\n    final Float original_result3_score = (Float)queryResponse.getResults().get(3).get(\"score\");\n    final Float original_result4_score = (Float)queryResponse.getResults().get(4).get(\"score\");\n    final Float original_result5_score = (Float)queryResponse.getResults().get(5).get(\"score\");\n    final Float original_result6_score = (Float)queryResponse.getResults().get(6).get(\"score\");\n    final Float original_result7_score = (Float)queryResponse.getResults().get(7).get(\"score\");\n\n    final String result0_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"64.0\", \"c3\",\"2.0\", \"original\",\"0.0\");\n    final String result1_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"49.0\", \"c3\",\"2.0\", \"original\",\"1.0\");\n    final String result2_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"36.0\", \"c3\",\"2.0\", \"original\",\"2.0\");\n    final String result3_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"25.0\", \"c3\",\"2.0\", \"original\",\"3.0\");\n    final String result4_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\",\"16.0\", \"c3\",\"2.0\", \"original\",\"4.0\");\n    final String result5_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"9.0\", \"c3\",\"2.0\", \"original\",\"5.0\");\n    final String result6_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"4.0\", \"c3\",\"2.0\", \"original\",\"6.0\");\n    final String result7_features= FeatureLoggerTestUtils.toFeatureVector(\n        \"powpularityS\", \"1.0\", \"c3\",\"2.0\", \"original\",\"7.0\");\n\n\n    // Test feature vectors returned (without re-ranking)\n    query.setFields(\"*,score,features:[fv store=test]\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"1\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(\"8\", queryResponse.getResults().get(7).get(\"id\").toString());\n\n    assertEquals(original_result0_score, queryResponse.getResults().get(0).get(\"score\"));\n    assertEquals(original_result1_score, queryResponse.getResults().get(1).get(\"score\"));\n    assertEquals(original_result2_score, queryResponse.getResults().get(2).get(\"score\"));\n    assertEquals(original_result3_score, queryResponse.getResults().get(3).get(\"score\"));\n    assertEquals(original_result4_score, queryResponse.getResults().get(4).get(\"score\"));\n    assertEquals(original_result5_score, queryResponse.getResults().get(5).get(\"score\"));\n    assertEquals(original_result6_score, queryResponse.getResults().get(6).get(\"score\"));\n    assertEquals(original_result7_score, queryResponse.getResults().get(7).get(\"score\"));\n\n    assertEquals(result7_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n\n    // Test feature vectors returned (with re-ranking)\n    query.setFields(\"*,score,features:[fv]\");\n    query.add(\"rq\", \"{!ltr model=powpularityS-model reRankDocs=8}\");\n    queryResponse =\n        solrCluster.getSolrClient().query(COLLECTION,query);\n    assertEquals(8, queryResponse.getResults().getNumFound());\n    assertEquals(\"8\", queryResponse.getResults().get(0).get(\"id\").toString());\n    assertEquals(result0_features,\n        queryResponse.getResults().get(0).get(\"features\").toString());\n    assertEquals(\"7\", queryResponse.getResults().get(1).get(\"id\").toString());\n    assertEquals(result1_features,\n        queryResponse.getResults().get(1).get(\"features\").toString());\n    assertEquals(\"6\", queryResponse.getResults().get(2).get(\"id\").toString());\n    assertEquals(result2_features,\n        queryResponse.getResults().get(2).get(\"features\").toString());\n    assertEquals(\"5\", queryResponse.getResults().get(3).get(\"id\").toString());\n    assertEquals(result3_features,\n        queryResponse.getResults().get(3).get(\"features\").toString());\n    assertEquals(\"4\", queryResponse.getResults().get(4).get(\"id\").toString());\n    assertEquals(result4_features,\n        queryResponse.getResults().get(4).get(\"features\").toString());\n    assertEquals(\"3\", queryResponse.getResults().get(5).get(\"id\").toString());\n    assertEquals(result5_features,\n        queryResponse.getResults().get(5).get(\"features\").toString());\n    assertEquals(\"2\", queryResponse.getResults().get(6).get(\"id\").toString());\n    assertEquals(result6_features,\n        queryResponse.getResults().get(6).get(\"features\").toString());\n    assertEquals(\"1\", queryResponse.getResults().get(7).get(\"id\").toString());\n    assertEquals(result7_features,\n        queryResponse.getResults().get(7).get(\"features\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d76b0cb61601e7ab5711e88ab0b767d913a6ff4":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","3d76b0cb61601e7ab5711e88ab0b767d913a6ff4"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8","3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd"],"bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","60e6c4eb6f169ee828eabd776ced7d900664e65a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd":["bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["3d76b0cb61601e7ab5711e88ab0b767d913a6ff4","19e8eb794082b9cc37b6562c76814ec4a26b9b8b","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"3d76b0cb61601e7ab5711e88ab0b767d913a6ff4":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbb600af31f8a8db3cfa3a5bbf5840f95f2e68d8":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","60e6c4eb6f169ee828eabd776ced7d900664e65a","3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}