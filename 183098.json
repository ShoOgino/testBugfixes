{"path":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(IndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(IndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(IndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, DocumentBuilderException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(IndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, DocumentBuilderException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","sourceOld":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(IndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, DocumentBuilderException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}