{"path":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","commits":[{"id":"fe874d5dba38e8313b2090a3d7335f4a39269336","date":1474455035,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe874d5dba38e8313b2090a3d7335f4a39269336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe874d5dba38e8313b2090a3d7335f4a39269336"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"fe874d5dba38e8313b2090a3d7335f4a39269336":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe874d5dba38e8313b2090a3d7335f4a39269336","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}