{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40ords/Lucene40WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.dir, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 state.termsIndexDivisor,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","date":1412165020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdfd4a8fd5df3958475e4dde3633adb237373a27","date":1412166431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader, postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader, postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                 state.fieldInfos,\n                                                 state.segmentInfo.name,\n                                                 BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                 state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postings,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/blockterms/LuceneFixedGap#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene50PostingsReader(state);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader, postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader, postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/blockterms/LuceneFixedGap#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene41ords/Lucene41WithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene50PostingsReader(state);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader, postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene41PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state);\n      success = true;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader, postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postings.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cdfd4a8fd5df3958475e4dde3633adb237373a27":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"99eb4a732d1a908f4636ace52928876136bf1896":["cdfd4a8fd5df3958475e4dde3633adb237373a27"],"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a45bec74b98f6fc05f52770cfb425739e6563960","cdfd4a8fd5df3958475e4dde3633adb237373a27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","99eb4a732d1a908f4636ace52928876136bf1896"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"cdfd4a8fd5df3958475e4dde3633adb237373a27":["99eb4a732d1a908f4636ace52928876136bf1896","9bb9a29a5e71a90295f175df8919802993142c9a"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["cdfd4a8fd5df3958475e4dde3633adb237373a27"],"a45bec74b98f6fc05f52770cfb425739e6563960":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","9bb9a29a5e71a90295f175df8919802993142c9a"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","db4fdbf3d262768eabc027cd8321edca0cd11fa8","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}