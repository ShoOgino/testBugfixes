{"path":"lucene/backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity,Scorer[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity,Scorer[],int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param similarity\n   *          -- not used since our definition involves neither coord nor terms\n   *          directly\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(float tieBreakerMultiplier,\n      Similarity similarity, Scorer[] subScorers, int numScorers) throws IOException {\n    super(similarity);\n\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param similarity\n   *          -- not used since our definition involves neither coord nor terms\n   *          directly\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(float tieBreakerMultiplier,\n      Similarity similarity, Scorer[] subScorers, int numScorers) throws IOException {\n    super(similarity);\n\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity,Scorer[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param similarity\n   *          -- not used since our definition involves neither coord nor terms\n   *          directly\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(float tieBreakerMultiplier,\n      Similarity similarity, Scorer[] subScorers, int numScorers) throws IOException {\n    super(similarity);\n\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}