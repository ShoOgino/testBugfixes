{"path":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","commits":[{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","pathOld":"/dev/null","sourceNew":"  protected void flush() throws IOException {\n    assert off > 0;\n\n    // TODO: perform a true linear regression?\n    final long min = values[0];\n    final float avg = off == 1 ? 0f : (float) (values[off - 1] - min) / (off - 1);\n\n    long maxZigZagDelta = 0;\n    for (int i = 0; i < off; ++i) {\n      values[i] = zigZagEncode(values[i] - min - (long) (avg * i));\n      maxZigZagDelta = Math.max(maxZigZagDelta, values[i]);\n    }\n\n    out.writeVLong(min);\n    out.writeInt(Float.floatToIntBits(avg));\n    if (maxZigZagDelta == 0) {\n      out.writeVInt(0);\n    } else {\n      final int bitsRequired = PackedInts.bitsRequired(maxZigZagDelta);\n      out.writeVInt(bitsRequired);\n      writeValues(bitsRequired);\n    }\n\n    off = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","pathOld":"/dev/null","sourceNew":"  protected void flush() throws IOException {\n    assert off > 0;\n\n    // TODO: perform a true linear regression?\n    final long min = values[0];\n    final float avg = off == 1 ? 0f : (float) (values[off - 1] - min) / (off - 1);\n\n    long maxZigZagDelta = 0;\n    for (int i = 0; i < off; ++i) {\n      values[i] = zigZagEncode(values[i] - min - (long) (avg * i));\n      maxZigZagDelta = Math.max(maxZigZagDelta, values[i]);\n    }\n\n    out.writeVLong(min);\n    out.writeInt(Float.floatToIntBits(avg));\n    if (maxZigZagDelta == 0) {\n      out.writeVInt(0);\n    } else {\n      final int bitsRequired = PackedInts.bitsRequired(maxZigZagDelta);\n      out.writeVInt(bitsRequired);\n      writeValues(bitsRequired);\n    }\n\n    off = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","sourceNew":"  protected void flush() throws IOException {\n    assert off > 0;\n\n    final float avg = off == 1 ? 0f : (float) (values[off - 1] - values[0]) / (off - 1);\n    long min = values[0];\n    // adjust min so that all deltas will be positive\n    for (int i = 1; i < off; ++i) {\n      final long actual = values[i];\n      final long expected = expected(min, avg, i);\n      if (expected > actual) {\n        min -= (expected - actual);\n      }\n    }\n\n    long maxDelta = 0;\n    for (int i = 0; i < off; ++i) {\n      values[i] = values[i] - expected(min, avg, i);\n      maxDelta = Math.max(maxDelta, values[i]);\n    }\n\n    out.writeVLong(zigZagEncode(min));\n    out.writeInt(Float.floatToIntBits(avg));\n    if (maxDelta == 0) {\n      out.writeVInt(0);\n    } else {\n      final int bitsRequired = PackedInts.bitsRequired(maxDelta);\n      out.writeVInt(bitsRequired);\n      writeValues(bitsRequired);\n    }\n\n    off = 0;\n  }\n\n","sourceOld":"  protected void flush() throws IOException {\n    assert off > 0;\n\n    // TODO: perform a true linear regression?\n    final long min = values[0];\n    final float avg = off == 1 ? 0f : (float) (values[off - 1] - min) / (off - 1);\n\n    long maxZigZagDelta = 0;\n    for (int i = 0; i < off; ++i) {\n      values[i] = zigZagEncode(values[i] - min - (long) (avg * i));\n      maxZigZagDelta = Math.max(maxZigZagDelta, values[i]);\n    }\n\n    out.writeVLong(min);\n    out.writeInt(Float.floatToIntBits(avg));\n    if (maxZigZagDelta == 0) {\n      out.writeVInt(0);\n    } else {\n      final int bitsRequired = PackedInts.bitsRequired(maxZigZagDelta);\n      out.writeVInt(bitsRequired);\n      writeValues(bitsRequired);\n    }\n\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","date":1406810962,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter#flush().mjava","sourceNew":"  protected void flush() throws IOException {\n    assert off > 0;\n\n    final float avg = off == 1 ? 0f : (float) (values[off - 1] - values[0]) / (off - 1);\n    long min = values[0];\n    // adjust min so that all deltas will be positive\n    for (int i = 1; i < off; ++i) {\n      final long actual = values[i];\n      final long expected = expected(min, avg, i);\n      if (expected > actual) {\n        min -= (expected - actual);\n      }\n    }\n\n    long maxDelta = 0;\n    for (int i = 0; i < off; ++i) {\n      values[i] = values[i] - expected(min, avg, i);\n      maxDelta = Math.max(maxDelta, values[i]);\n    }\n\n    out.writeZLong(min);\n    out.writeInt(Float.floatToIntBits(avg));\n    if (maxDelta == 0) {\n      out.writeVInt(0);\n    } else {\n      final int bitsRequired = PackedInts.bitsRequired(maxDelta);\n      out.writeVInt(bitsRequired);\n      writeValues(bitsRequired);\n    }\n\n    off = 0;\n  }\n\n","sourceOld":"  protected void flush() throws IOException {\n    assert off > 0;\n\n    final float avg = off == 1 ? 0f : (float) (values[off - 1] - values[0]) / (off - 1);\n    long min = values[0];\n    // adjust min so that all deltas will be positive\n    for (int i = 1; i < off; ++i) {\n      final long actual = values[i];\n      final long expected = expected(min, avg, i);\n      if (expected > actual) {\n        min -= (expected - actual);\n      }\n    }\n\n    long maxDelta = 0;\n    for (int i = 0; i < off; ++i) {\n      values[i] = values[i] - expected(min, avg, i);\n      maxDelta = Math.max(maxDelta, values[i]);\n    }\n\n    out.writeVLong(zigZagEncode(min));\n    out.writeInt(Float.floatToIntBits(avg));\n    if (maxDelta == 0) {\n      out.writeVInt(0);\n    } else {\n      final int bitsRequired = PackedInts.bitsRequired(maxDelta);\n      out.writeVInt(bitsRequired);\n      writeValues(bitsRequired);\n    }\n\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db1893644d5f20456c9524b28e826293d767db65":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["db1893644d5f20456c9524b28e826293d767db65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"db1893644d5f20456c9524b28e826293d767db65":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["db1893644d5f20456c9524b28e826293d767db65"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}