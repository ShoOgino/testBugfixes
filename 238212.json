{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","commits":[{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        compressor.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a423eed13bcef28b1313c2e674f9ce6eec07c95","date":1599125663,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(dictBytes.length, len);\n      System.arraycopy(bytes, off, dictBytes, 0, dictLength);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        // NOTE: offset MUST be 0 when setting the dictionary in order to work around JDK-8252739\n        compressor.setDictionary(dictBytes, 0, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        compressor.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":null,"bugIntro":["0830ac90eb1444b953b84ce674e347f2601674f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(dictBytes.length, len);\n      System.arraycopy(bytes, off, dictBytes, 0, dictLength);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        // NOTE: offset MUST be 0 when setting the dictionary in order to work around JDK-8252739\n        compressor.setDictionary(dictBytes, 0, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(dictBytes.length, len);\n      System.arraycopy(bytes, off, dictBytes, 0, dictLength);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        // NOTE: offset MUST be 0 when setting the dictionary in order to work around JDK-8252739\n        compressor.setDictionary(dictBytes, 0, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["4a423eed13bcef28b1313c2e674f9ce6eec07c95"],"4a423eed13bcef28b1313c2e674f9ce6eec07c95":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a423eed13bcef28b1313c2e674f9ce6eec07c95":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["4a423eed13bcef28b1313c2e674f9ce6eec07c95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}