{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","commits":[{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(LeafReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, reader, infoStream, status);\n        } else {\n          if (reader.getBinaryDocValues(fieldInfo.name) != null ||\n              reader.getNumericDocValues(fieldInfo.name) != null ||\n              reader.getSortedDocValues(fieldInfo.name) != null || \n              reader.getSortedSetDocValues(fieldInfo.name) != null || \n              reader.getDocsWithField(fieldInfo.name) != null) {\n            throw new RuntimeException(\"field: \" + fieldInfo.name + \" has docvalues but should omit them!\");\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDocValues(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test docvalues.\n   * @lucene.experimental\n   */\n  public static Status.DocValuesStatus testDocValues(CodecReader reader,\n                                                     PrintStream infoStream,\n                                                     boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.DocValuesStatus status = new Status.DocValuesStatus();\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: docvalues...........\");\n      }\n      DocValuesProducer dvReader = reader.getDocValuesReader();\n      if (dvReader != null) {\n        dvReader = dvReader.getMergeInstance();\n      }\n      for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n        if (fieldInfo.getDocValuesType() != DocValuesType.NONE) {\n          status.totalValueFields++;\n          checkDocValues(fieldInfo, dvReader, reader.maxDoc(), infoStream, status);\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT,\n                                    \"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]\",\n                                    status.totalValueFields,\n                                    status.totalBinaryFields,\n                                    status.totalNumericFields,\n                                    status.totalSortedFields,\n                                    status.totalSortedNumericFields,\n                                    status.totalSortedSetFields,\n                                    nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}