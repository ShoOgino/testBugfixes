{"path":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","pathOld":"/dev/null","sourceNew":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   */\n  public abstract void collect(int doc, float score);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1","date":1001444615,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","sourceNew":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call {@link\n   * Searcher#doc(int)} or {@link\n   * org.apache.lucene.index.IndexReader#document(int)} on every document\n   * number encountered.  Doing so can slow searches by an order of magnitude\n   * or more. */\n  public abstract void collect(int doc, float score);\n\n","sourceOld":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   */\n  public abstract void collect(int doc, float score);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cb126bce20a03e471519a28129f08ae2bfc33a","date":1054791881,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","sourceNew":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call {@link\n   * Searcher#doc(int)} or {@link\n   * org.apache.lucene.index.IndexReader#document(int)} on every document\n   * number encountered.  Doing so can slow searches by an order of magnitude\n   * or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","sourceOld":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call {@link\n   * Searcher#doc(int)} or {@link\n   * org.apache.lucene.index.IndexReader#document(int)} on every document\n   * number encountered.  Doing so can slow searches by an order of magnitude\n   * or more. */\n  public abstract void collect(int doc, float score);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe6bccdc7263368ee46849dcc2b945a5002fb5ca","date":1065150328,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","sourceNew":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call\n   * {@link Searcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every\n   * document number encountered.  Doing so can slow searches by an order\n   * of magnitude or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","sourceOld":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call {@link\n   * Searcher#doc(int)} or {@link\n   * org.apache.lucene.index.IndexReader#document(int)} on every document\n   * number encountered.  Doing so can slow searches by an order of magnitude\n   * or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21e5252a7070a6f44a829d9c56f14db310a566f3","date":1076611099,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","sourceNew":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call\n   * {@link Searcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every\n   * document number encountered.  Doing so can slow searches by an order\n   * of magnitude or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","sourceOld":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call\n   * {@link Searcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every\n   * document number encountered.  Doing so can slow searches by an order\n   * of magnitude or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625ceb4a6cc662c24b1ac9d91c84d1aadfe2702","date":1195509802,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","sourceNew":"  /** Called once for every document matching a query, with the document\n   * number and its raw score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call\n   * {@link Searcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every\n   * document number encountered.  Doing so can slow searches by an order\n   * of magnitude or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","sourceOld":"  /** Called once for every non-zero scoring document, with the document number\n   * and its score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call\n   * {@link Searcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every\n   * document number encountered.  Doing so can slow searches by an order\n   * of magnitude or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/HitCollector#collect(int,float).mjava","sourceNew":null,"sourceOld":"  /** Called once for every document matching a query, with the document\n   * number and its raw score.\n   *\n   * <P>If, for example, an application wished to collect all of the hits for a\n   * query in a BitSet, then it might:<pre>\n   *   Searcher searcher = new IndexSearcher(indexReader);\n   *   final BitSet bits = new BitSet(indexReader.maxDoc());\n   *   searcher.search(query, new HitCollector() {\n   *       public void collect(int doc, float score) {\n   *         bits.set(doc);\n   *       }\n   *     });\n   * </pre>\n   *\n   * <p>Note: This is called in an inner search loop.  For good search\n   * performance, implementations of this method should not call\n   * {@link Searcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every\n   * document number encountered.  Doing so can slow searches by an order\n   * of magnitude or more.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public abstract void collect(int doc, float score);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe6bccdc7263368ee46849dcc2b945a5002fb5ca":["99cb126bce20a03e471519a28129f08ae2bfc33a"],"21e5252a7070a6f44a829d9c56f14db310a566f3":["fe6bccdc7263368ee46849dcc2b945a5002fb5ca"],"99cb126bce20a03e471519a28129f08ae2bfc33a":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625ceb4a6cc662c24b1ac9d91c84d1aadfe2702":["21e5252a7070a6f44a829d9c56f14db310a566f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["4625ceb4a6cc662c24b1ac9d91c84d1aadfe2702"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"]},"commit2Childs":{"fe6bccdc7263368ee46849dcc2b945a5002fb5ca":["21e5252a7070a6f44a829d9c56f14db310a566f3"],"99cb126bce20a03e471519a28129f08ae2bfc33a":["fe6bccdc7263368ee46849dcc2b945a5002fb5ca"],"21e5252a7070a6f44a829d9c56f14db310a566f3":["4625ceb4a6cc662c24b1ac9d91c84d1aadfe2702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"4625ceb4a6cc662c24b1ac9d91c84d1aadfe2702":["61cbcf396559d597a914594d7e2830c142ecfd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["99cb126bce20a03e471519a28129f08ae2bfc33a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}