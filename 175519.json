{"path":"solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsRecoverLeaseTest#testBasic().mjava","commits":[{"id":"e4bec8aad484912847547ca94038e1a3641c7bc7","date":1430228162,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsRecoverLeaseTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    long startRecoverLeaseSuccessCount = FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get();\n    \n    URI uri = dfsCluster.getURI();\n    Path path = new Path(uri);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs1 = FileSystem.get(path.toUri(), conf);\n    Path testFile = new Path(uri.toString() + \"/testfile\");\n    FSDataOutputStream out = fs1.create(testFile);\n    \n    out.write(5);\n    out.hflush();\n    out.close();\n\n    FSHDFSUtils.recoverFileLease(fs1, testFile, conf, new CallerInfo() {\n      \n      @Override\n      public boolean isCallerClosed() {\n        return false;\n      }\n    });\n    assertEquals(0, FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);\n    \n    fs1.close();\n\n    \n    FileSystem fs2 = FileSystem.get(path.toUri(), conf);\n    Path testFile2 = new Path(uri.toString() + \"/testfile2\");\n    FSDataOutputStream out2 = fs2.create(testFile2);\n    \n    if (random().nextBoolean()) {\n      int cnt = random().nextInt(100);\n      for (int i = 0; i < cnt; i++) {\n        out2.write(random().nextInt(20000));\n      }\n      out2.hflush();\n    }\n\n    \n    // closing the fs will close the file it seems\n    // fs2.close();\n    \n    FileSystem fs3 = FileSystem.get(path.toUri(), conf);\n\n    FSHDFSUtils.recoverFileLease(fs3, testFile2, conf, new CallerInfo() {\n      \n      @Override\n      public boolean isCallerClosed() {\n        return false;\n      }\n    });\n    assertEquals(1, FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);\n    \n    fs3.close();\n    fs2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsRecoverLeaseTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/HdfsRecoverLeaseTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    long startRecoverLeaseSuccessCount = FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get();\n    \n    URI uri = dfsCluster.getURI();\n    Path path = new Path(uri);\n    Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n    FileSystem fs1 = FileSystem.get(path.toUri(), conf);\n    Path testFile = new Path(uri.toString() + \"/testfile\");\n    FSDataOutputStream out = fs1.create(testFile);\n    \n    out.write(5);\n    out.hflush();\n    out.close();\n\n    FSHDFSUtils.recoverFileLease(fs1, testFile, conf, new CallerInfo() {\n      \n      @Override\n      public boolean isCallerClosed() {\n        return false;\n      }\n    });\n    assertEquals(0, FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);\n    \n    fs1.close();\n\n    \n    FileSystem fs2 = FileSystem.get(path.toUri(), conf);\n    Path testFile2 = new Path(uri.toString() + \"/testfile2\");\n    FSDataOutputStream out2 = fs2.create(testFile2);\n    \n    if (random().nextBoolean()) {\n      int cnt = random().nextInt(100);\n      for (int i = 0; i < cnt; i++) {\n        out2.write(random().nextInt(20000));\n      }\n      out2.hflush();\n    }\n\n    \n    // closing the fs will close the file it seems\n    // fs2.close();\n    \n    FileSystem fs3 = FileSystem.get(path.toUri(), conf);\n\n    FSHDFSUtils.recoverFileLease(fs3, testFile2, conf, new CallerInfo() {\n      \n      @Override\n      public boolean isCallerClosed() {\n        return false;\n      }\n    });\n    assertEquals(1, FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);\n    \n    fs3.close();\n    fs2.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    long startRecoverLeaseSuccessCount = FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get();\n    \n    URI uri = dfsCluster.getURI();\n    Path path = new Path(uri);\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs1 = FileSystem.get(path.toUri(), conf);\n    Path testFile = new Path(uri.toString() + \"/testfile\");\n    FSDataOutputStream out = fs1.create(testFile);\n    \n    out.write(5);\n    out.hflush();\n    out.close();\n\n    FSHDFSUtils.recoverFileLease(fs1, testFile, conf, new CallerInfo() {\n      \n      @Override\n      public boolean isCallerClosed() {\n        return false;\n      }\n    });\n    assertEquals(0, FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);\n    \n    fs1.close();\n\n    \n    FileSystem fs2 = FileSystem.get(path.toUri(), conf);\n    Path testFile2 = new Path(uri.toString() + \"/testfile2\");\n    FSDataOutputStream out2 = fs2.create(testFile2);\n    \n    if (random().nextBoolean()) {\n      int cnt = random().nextInt(100);\n      for (int i = 0; i < cnt; i++) {\n        out2.write(random().nextInt(20000));\n      }\n      out2.hflush();\n    }\n\n    \n    // closing the fs will close the file it seems\n    // fs2.close();\n    \n    FileSystem fs3 = FileSystem.get(path.toUri(), conf);\n\n    FSHDFSUtils.recoverFileLease(fs3, testFile2, conf, new CallerInfo() {\n      \n      @Override\n      public boolean isCallerClosed() {\n        return false;\n      }\n    });\n    assertEquals(1, FSHDFSUtils.RECOVER_LEASE_SUCCESS_COUNT.get() - startRecoverLeaseSuccessCount);\n    \n    fs3.close();\n    fs2.close();\n  }\n\n","bugFix":["e4bec8aad484912847547ca94038e1a3641c7bc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4bec8aad484912847547ca94038e1a3641c7bc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["e4bec8aad484912847547ca94038e1a3641c7bc7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4bec8aad484912847547ca94038e1a3641c7bc7"],"e4bec8aad484912847547ca94038e1a3641c7bc7":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}