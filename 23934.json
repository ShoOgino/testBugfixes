{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery.Builder,BooleanQuery).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery.Builder to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}