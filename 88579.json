{"path":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","commits":[{"id":"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e","date":1329752918,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    TokenStream ts = new CannedTokenStream(tokens.toArray(new Token[0]));\n    assertTokenStreamContents(ts, expected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1a421c5a6934704db5f8be705bc74f42e679ba","date":1498207865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","sourceNew":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    assertEquals(tokens.size(), expected.length);\n    int i = 0;\n    for (Token token : tokens) {\n      assertEquals(token.toString(), expected[i]);\n      i++;\n    }\n  }\n\n","sourceOld":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    TokenStream ts = new CannedTokenStream(tokens.toArray(new Token[0]));\n    assertTokenStreamContents(ts, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","sourceNew":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    assertEquals(tokens.size(), expected.length);\n    int i = 0;\n    for (Token token : tokens) {\n      assertEquals(token.toString(), expected[i]);\n      i++;\n    }\n  }\n\n","sourceOld":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    TokenStream ts = new CannedTokenStream(tokens.toArray(new Token[0]));\n    assertTokenStreamContents(ts, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/TestSuggestSpellingConverter#assertConvertsTo(String,String[]).mjava","sourceNew":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    assertEquals(tokens.size(), expected.length);\n    int i = 0;\n    for (Token token : tokens) {\n      assertEquals(token.toString(), expected[i]);\n      i++;\n    }\n  }\n\n","sourceOld":"  public void assertConvertsTo(String text, String expected[]) throws IOException {\n    Collection<Token> tokens = converter.convert(text);\n    TokenStream ts = new CannedTokenStream(tokens.toArray(new Token[0]));\n    assertTokenStreamContents(ts, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f1a421c5a6934704db5f8be705bc74f42e679ba":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e","1f1a421c5a6934704db5f8be705bc74f42e679ba"],"28288370235ed02234a64753cdbf0c6ec096304a":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e","1f1a421c5a6934704db5f8be705bc74f42e679ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e":["1f1a421c5a6934704db5f8be705bc74f42e679ba","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"1f1a421c5a6934704db5f8be705bc74f42e679ba":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}