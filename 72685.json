{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDiverseDocs().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void xxxtestDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void xxxtestDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuffer b = new StringBuffer();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}