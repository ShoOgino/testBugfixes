{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBinaryContext().mjava","commits":[{"id":"b28ce1e2b0fd85f7ca7f72b9ab2ae1f5350c9005","date":1431617381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBinaryContext().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryContext() throws Exception {\n    byte[] context1 = new byte[4];\n    byte[] context2 = new byte[5];\n    byte[] context3 = new byte[1];\n    context3[0] = (byte) 0xff;\n\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(context1, context2)),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(context1, context3))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // Both have context1:\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(context1), 10, true, true);\n      assertEquals(2, results.size());\n\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(context1)));\n      assertTrue(result.contexts.contains(new BytesRef(context3)));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(context1)));\n      assertTrue(result.contexts.contains(new BytesRef(context2)));\n\n      suggester.close();\n      a.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b28ce1e2b0fd85f7ca7f72b9ab2ae1f5350c9005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b28ce1e2b0fd85f7ca7f72b9ab2ae1f5350c9005"]},"commit2Childs":{"b28ce1e2b0fd85f7ca7f72b9ab2ae1f5350c9005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b28ce1e2b0fd85f7ca7f72b9ab2ae1f5350c9005"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}