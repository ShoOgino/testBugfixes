{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#getComparator(Sort,boolean,int[]).mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#getComparator(Sort,boolean,int[]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TermAllGroupHeadsCollectorTest#getComparator(Sort,boolean,int[]).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort, final boolean sortByScoreOnly, final int[] fieldIdToDocID) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for (SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = sortByScoreOnly ? fieldIdToDocID[d1.id] - fieldIdToDocID[d2.id] : 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else if (sf.getField().equals(\"sort3\")) {\n            cmp = d1.sort3.compareTo(d2.sort3);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort, final boolean sortByScoreOnly, final int[] fieldIdToDocID) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for (SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = sortByScoreOnly ? fieldIdToDocID[d1.id] - fieldIdToDocID[d2.id] : 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else if (sf.getField().equals(\"sort3\")) {\n            cmp = d1.sort3.compareTo(d2.sort3);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#getComparator(Sort,boolean,int[]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#getComparator(Sort,boolean,int[]).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort, final boolean sortByScoreOnly, final int[] fieldIdToDocID) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for (SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = sortByScoreOnly ? fieldIdToDocID[d1.id] - fieldIdToDocID[d2.id] : 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else if (sf.getField().equals(\"sort3\")) {\n            cmp = d1.sort3.compareTo(d2.sort3);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort, final boolean sortByScoreOnly, final int[] fieldIdToDocID) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for (SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = sortByScoreOnly ? fieldIdToDocID[d1.id] - fieldIdToDocID[d2.id] : 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else if (sf.getField().equals(\"sort3\")) {\n            cmp = d1.sort3.compareTo(d2.sort3);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}