{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(IndexReader,int,String).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(IndexReader,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The primary method -- highlight this doc, assuming a specific field and given this content.\n   */\n  public Object highlightFieldForDoc(IndexReader reader, int docId, String content) throws IOException {\n    // TODO accept LeafReader instead?\n    // note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.\n    if (content.length() == 0) {\n      return null; // nothing to do\n    }\n\n    breakIterator.setText(content);\n\n    List<OffsetsEnum> offsetsEnums = fieldOffsetStrategy.getOffsetsEnums(reader, docId, content);\n\n    Passage[] passages;\n    try {\n      // Highlight the offsetsEnum list against the content to produce Passages.\n      passages = highlightOffsetsEnums(offsetsEnums);// and breakIterator & scorer\n    } finally {\n      // Ensure closeable resources get closed\n      IOUtils.close(offsetsEnums);\n    }\n\n    // Format the resulting Passages.\n    if (passages.length == 0) {\n      // no passages were returned, so ask for a default summary\n      passages = getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);\n    }\n\n    if (passages.length > 0) {\n      return passageFormatter.format(passages, content);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(IndexReader,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The primary method -- highlight this doc, assuming a specific field and given this content.\n   */\n  public Object highlightFieldForDoc(IndexReader reader, int docId, String content) throws IOException {\n    // TODO accept LeafReader instead?\n    // note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.\n    if (content.length() == 0) {\n      return null; // nothing to do\n    }\n\n    breakIterator.setText(content);\n\n    List<OffsetsEnum> offsetsEnums = fieldOffsetStrategy.getOffsetsEnums(reader, docId, content);\n\n    Passage[] passages;\n    try {\n      // Highlight the offsetsEnum list against the content to produce Passages.\n      passages = highlightOffsetsEnums(offsetsEnums);// and breakIterator & scorer\n    } finally {\n      // Ensure closeable resources get closed\n      IOUtils.close(offsetsEnums);\n    }\n\n    // Format the resulting Passages.\n    if (passages.length == 0) {\n      // no passages were returned, so ask for a default summary\n      passages = getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);\n    }\n\n    if (passages.length > 0) {\n      return passageFormatter.format(passages, content);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(IndexReader,int,String).mjava","sourceNew":"  /**\n   * The primary method -- highlight this doc, assuming a specific field and given this content.\n   */\n  public Object highlightFieldForDoc(IndexReader reader, int docId, String content) throws IOException {\n    // TODO accept LeafReader instead?\n    // note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.\n    if (content.length() == 0) {\n      return null; // nothing to do\n    }\n\n    breakIterator.setText(content);\n\n    try (OffsetsEnum offsetsEnums = fieldOffsetStrategy.getOffsetsEnum(reader, docId, content)) {\n\n      // Highlight the offsetsEnum list against the content to produce Passages.\n      Passage[] passages = highlightOffsetsEnums(offsetsEnums);// and breakIterator & scorer\n\n      // Format the resulting Passages.\n      if (passages.length == 0) {\n        // no passages were returned, so ask for a default summary\n        passages = getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);\n      }\n\n      if (passages.length > 0) {\n        return passageFormatter.format(passages, content);\n      } else {\n        return null;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The primary method -- highlight this doc, assuming a specific field and given this content.\n   */\n  public Object highlightFieldForDoc(IndexReader reader, int docId, String content) throws IOException {\n    // TODO accept LeafReader instead?\n    // note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.\n    if (content.length() == 0) {\n      return null; // nothing to do\n    }\n\n    breakIterator.setText(content);\n\n    List<OffsetsEnum> offsetsEnums = fieldOffsetStrategy.getOffsetsEnums(reader, docId, content);\n\n    Passage[] passages;\n    try {\n      // Highlight the offsetsEnum list against the content to produce Passages.\n      passages = highlightOffsetsEnums(offsetsEnums);// and breakIterator & scorer\n    } finally {\n      // Ensure closeable resources get closed\n      IOUtils.close(offsetsEnums);\n    }\n\n    // Format the resulting Passages.\n    if (passages.length == 0) {\n      // no passages were returned, so ask for a default summary\n      passages = getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);\n    }\n\n    if (passages.length > 0) {\n      return passageFormatter.format(passages, content);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(LeafReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#highlightFieldForDoc(IndexReader,int,String).mjava","sourceNew":"  /**\n   * The primary method -- highlight this doc, assuming a specific field and given this content.\n   */\n  public Object highlightFieldForDoc(LeafReader reader, int docId, String content) throws IOException {\n    // note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.\n    if (content.length() == 0) {\n      return null; // nothing to do\n    }\n\n    breakIterator.setText(content);\n\n    try (OffsetsEnum offsetsEnums = fieldOffsetStrategy.getOffsetsEnum(reader, docId, content)) {\n\n      // Highlight the offsetsEnum list against the content to produce Passages.\n      Passage[] passages = highlightOffsetsEnums(offsetsEnums);// and breakIterator & scorer\n\n      // Format the resulting Passages.\n      if (passages.length == 0) {\n        // no passages were returned, so ask for a default summary\n        passages = getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);\n      }\n\n      if (passages.length > 0) {\n        return passageFormatter.format(passages, content);\n      } else {\n        return null;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The primary method -- highlight this doc, assuming a specific field and given this content.\n   */\n  public Object highlightFieldForDoc(IndexReader reader, int docId, String content) throws IOException {\n    // TODO accept LeafReader instead?\n    // note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.\n    if (content.length() == 0) {\n      return null; // nothing to do\n    }\n\n    breakIterator.setText(content);\n\n    try (OffsetsEnum offsetsEnums = fieldOffsetStrategy.getOffsetsEnum(reader, docId, content)) {\n\n      // Highlight the offsetsEnum list against the content to produce Passages.\n      Passage[] passages = highlightOffsetsEnums(offsetsEnums);// and breakIterator & scorer\n\n      // Format the resulting Passages.\n      if (passages.length == 0) {\n        // no passages were returned, so ask for a default summary\n        passages = getSummaryPassagesNoHighlight(maxNoHighlightPassages == -1 ? maxPassages : maxNoHighlightPassages);\n      }\n\n      if (passages.length > 0) {\n        return passageFormatter.format(passages, content);\n      } else {\n        return null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["8764ca7bb74ee716c839b9545a93ec4a578c2005"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["8764ca7bb74ee716c839b9545a93ec4a578c2005","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}