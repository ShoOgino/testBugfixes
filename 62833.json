{"path":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    TermEnum enumerator = reader.terms(getLucenePrefixTerm(fieldName));\n    try {\n      do {\n        Term term = enumerator.term();\n        if ((term != null)\n            && term.text().startsWith(getPrefix())\n            && term.field().equals(fieldName)) {\n          mtv.visitMatchingTerm(term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    TermEnum enumerator = reader.terms(getLucenePrefixTerm(fieldName));\n    try {\n      do {\n        Term term = enumerator.term();\n        if ((term != null)\n            && term.text().startsWith(getPrefix())\n            && term.field().equals(fieldName)) {\n          mtv.visitMatchingTerm(term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seek(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (termsEnum.term().startsWith(prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && text.startsWith(prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    TermEnum enumerator = reader.terms(getLucenePrefixTerm(fieldName));\n    try {\n      do {\n        Term term = enumerator.term();\n        if ((term != null)\n            && term.text().startsWith(getPrefix())\n            && term.field().equals(fieldName)) {\n          mtv.visitMatchingTerm(term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndPrefixQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seek(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (termsEnum.term().startsWith(prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && text.startsWith(prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* inspired by PrefixQuery.rewrite(): */\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n\n      boolean skip = false;\n      TermsEnum.SeekStatus status = termsEnum.seek(new BytesRef(getPrefix()));\n      if (status == TermsEnum.SeekStatus.FOUND) {\n        mtv.visitMatchingTerm(getLucenePrefixTerm(fieldName));\n      } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n        if (termsEnum.term().startsWith(prefixRef)) {\n          mtv.visitMatchingTerm(new Term(fieldName, termsEnum.term().utf8ToString()));\n        } else {\n          skip = true;\n        }\n      } else {\n        // EOF\n        skip = true;\n      }\n\n      if (!skip) {\n        while(true) {\n          BytesRef text = termsEnum.next();\n          if (text != null && text.startsWith(prefixRef)) {\n            mtv.visitMatchingTerm(new Term(fieldName, text.utf8ToString()));\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}