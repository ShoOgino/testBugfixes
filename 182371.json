{"path":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockRAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockRAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","53a31399f2471493d67b19a95c028a74e0113b6a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["53a31399f2471493d67b19a95c028a74e0113b6a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}