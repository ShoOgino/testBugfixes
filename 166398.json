{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    if (doc != null) {\n      doc.abort();\n      doc = null;\n    }\n\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n    \n\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n    \n\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    if (doc != null) {\n      doc.abort();\n      doc = null;\n    }\n\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n    \n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n    \n\n  }\n\n","bugFix":["6c18273ea5b3974d2f30117f46f1ae416c28f727"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n\n    if (tvx != null) {\n      try {\n        tvx.close();\n      } catch (Throwable t) {\n      }\n      tvx = null;\n    }\n    if (tvd != null) {\n      try {\n        tvd.close();\n      } catch (Throwable t) {\n      }\n      tvd = null;\n    }\n    if (tvf != null) {\n      try {\n        tvf.close();\n      } catch (Throwable t) {\n      }\n      tvf = null;\n    }\n    lastDocID = 0;\n    \n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(true, tvx, tvd, tvf);\n    } catch (IOException e) {\n      // cannot happen since we suppress exceptions\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(true, tvx, tvd, tvf);\n    } catch (IOException e) {\n      // cannot happen since we suppress exceptions\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(true, tvx, tvd, tvf);\n    } catch (IOException e) {\n      // cannot happen since we suppress exceptions\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(tvx, tvd, tvf);\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeWhileHandlingException(tvx, tvd, tvf);\n    } catch (IOException e) {\n      // cannot happen since we suppress exceptions\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeSafely(true, tvx, tvd, tvf);\n    } catch (IOException e) {\n      // cannot happen since we suppress exceptions\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#abort().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void abort() {\n    hasVectors = false;\n    try {\n      IOUtils.closeWhileHandlingException(tvx, tvd, tvf);\n    } catch (IOException e) {\n      // cannot happen since we suppress exceptions\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_INDEX_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    try {\n      docWriter.directory.deleteFile(IndexFileNames.segmentFileName(docWriter.getSegment(), \"\", IndexFileNames.VECTORS_FIELDS_EXTENSION));\n    } catch (IOException ignored) {\n    }\n    \n    tvx = tvd = tvf = null;\n    lastDocID = 0;\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["efb7a19703a037c29e30440260d393500febc1f4"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"efb7a19703a037c29e30440260d393500febc1f4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["24230fe54121f9be9d85f2c2067536296785e421"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["3cc749c053615f5871f3b95715fe292f34e70a53"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"efb7a19703a037c29e30440260d393500febc1f4":["24230fe54121f9be9d85f2c2067536296785e421","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}