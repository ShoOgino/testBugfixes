{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","commits":[{"id":"5d1e9a21218cf0ffd81625a2f105dc388aa3097d","date":1476967652,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"/dev/null","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9c02f55c5629b8fe311e04e1e685376c716131","ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","date":1476974235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"/dev/null","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"/dev/null","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9c02f55c5629b8fe311e04e1e685376c716131","date":1477311501,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set SolrHttpClientBuilder from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of builder '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set SolrHttpClientBuilder from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of builder '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set SolrHttpClientBuilder from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of builder '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd225c382b8919214f3db79af4c842f893b871","date":1486491351,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set SolrHttpClientBuilder from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of builder '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli =\n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#parseCmdLine(String[],Option[]).mjava","sourceNew":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli =\n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List<String> argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","sourceOld":"  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli =\n        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    return cli;\n  }\n\n","bugFix":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad9c02f55c5629b8fe311e04e1e685376c716131":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["9ddd225c382b8919214f3db79af4c842f893b871"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","ad9c02f55c5629b8fe311e04e1e685376c716131"],"9ddd225c382b8919214f3db79af4c842f893b871":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9ddd225c382b8919214f3db79af4c842f893b871","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9ddd225c382b8919214f3db79af4c842f893b871","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"ad9c02f55c5629b8fe311e04e1e685376c716131":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["ad9c02f55c5629b8fe311e04e1e685376c716131","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["9ddd225c382b8919214f3db79af4c842f893b871","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"9ddd225c382b8919214f3db79af4c842f893b871":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d","c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}