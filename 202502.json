{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(Map[String,SolrCore],String,SolrCore,boolean).mjava","commits":[{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(Map[String,SolrCore],String,SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrCore registerCore(Map<String,SolrCore> whichCores, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (whichCores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = whichCores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(Map[String,SolrCore],String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = coreMaps.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = coreMaps.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(Map<String,SolrCore> whichCores, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (whichCores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = whichCores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a837c064b67fa63a9394136e31218b908cdcf783"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}