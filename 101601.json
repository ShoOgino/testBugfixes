{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","commits":[{"id":"d0f8ba65dfb38d7382b9dce6751c3060db644202","date":1389780711,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, false);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, false);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b","date":1425145569,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n    \n    try {\n      indexSearcher.search(conjunctionQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n    \n    try {\n      indexSearcher.search(conjunctionQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n    \n    try {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n    \n    try {\n      indexSearcher.search(conjunctionQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5c9d76390ee1f8c6ecce2d6e4edb3ca29ca06c5","date":1434962597,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context, context.reader().getLiveDocs());\n    final Bits parentDocs = parentsFilter.getDocIdSet(context).bits();\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(nextRandomChildNumber);\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(childQuery, BooleanClause.Occur.MUST);\n    conjunctionQuery.add(blockJoinQuery, BooleanClause.Occur.MUST);\n    \n    try {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getDocIdSet(context).bits();\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context, context.reader().getLiveDocs());\n    final Bits parentDocs = parentsFilter.getDocIdSet(context).bits();\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getDocIdSet(context).bits();\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.iterator().advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    try {\n      scorer.iterator().advance(target);\n      fail();\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":["b5c9d76390ee1f8c6ecce2d6e4edb3ca29ca06c5","3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b","7dd748bb245633a8195281556bb0e68a6ea97d18"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, org.apache.lucene.search.ScoreMode.COMPLETE);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, org.apache.lucene.search.ScoreMode.COMPLETE);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, true);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createWeight(indexSearcher.rewrite(blockJoinQuery), org.apache.lucene.search.ScoreMode.COMPLETE, 1);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, org.apache.lucene.search.ScoreMode.COMPLETE);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToChildBjq().mjava","sourceNew":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createWeight(indexSearcher.rewrite(blockJoinQuery), org.apache.lucene.search.ScoreMode.COMPLETE, 1);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToChildBjq() throws Exception {\n    Query parentQuery = new MatchAllDocsQuery();\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    final LeafReaderContext context = indexSearcher.getIndexReader().leaves().get(0);\n    Weight weight = indexSearcher.createNormalizedWeight(blockJoinQuery, org.apache.lucene.search.ScoreMode.COMPLETE);\n    Scorer scorer = weight.scorer(context);\n    final Bits parentDocs = parentsFilter.getBitSet(context);\n\n    int target;\n    do {\n      // make the parent scorer advance to a doc ID which is not a parent\n      target = TestUtil.nextInt(random(), 0, context.reader().maxDoc() - 2);\n    } while (parentDocs.get(target + 1));\n\n    final int illegalTarget = target;\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      scorer.iterator().advance(illegalTarget);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b5c9d76390ee1f8c6ecce2d6e4edb3ca29ca06c5":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["fb17639909a369c1e64866842e5c213440acc17e"],"05fe562aa248790944d43cdd478f512572835ba0":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b3915945926c0bf7def01b0c504977709d3aed3":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"417142ff08fda9cf0b72d5133e63097a166c6458":["05fe562aa248790944d43cdd478f512572835ba0","9fc47cb7b4346802411bb432f501ed0673d7119e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fb17639909a369c1e64866842e5c213440acc17e","3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["b5c9d76390ee1f8c6ecce2d6e4edb3ca29ca06c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["05fe562aa248790944d43cdd478f512572835ba0"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["4b3915945926c0bf7def01b0c504977709d3aed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"b5c9d76390ee1f8c6ecce2d6e4edb3ca29ca06c5":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"05fe562aa248790944d43cdd478f512572835ba0":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["fb17639909a369c1e64866842e5c213440acc17e"],"4b3915945926c0bf7def01b0c504977709d3aed3":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b5c9d76390ee1f8c6ecce2d6e4edb3ca29ca06c5"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["4b3915945926c0bf7def01b0c504977709d3aed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}