{"path":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","commits":[{"id":"c7c19b4ecf30c060f4d2e29c25f027e73262713d","date":1400023065,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final AtomicReader wrapped = wrap((AtomicReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final AtomicReader wrapped = wrap((AtomicReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final AtomicReader wrapped = wrap((AtomicReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final AtomicReader wrapped = wrap((AtomicReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs, needsScores);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","bugFix":["c7c19b4ecf30c060f4d2e29c25f027e73262713d","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs, needsScores);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}