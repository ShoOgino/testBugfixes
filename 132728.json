{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":["31d9b46cad4c17a1079c050a11068965b0221231"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          wrapper = new ServerWrapper(server);\n          wrapper.lastUsed = System.currentTimeMillis();\n          wrapper.standard = false;\n          zombieServers.put(wrapper.getKey(), wrapper);\n          startAliveCheckExecutor();\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        zombieServers.remove(wrapper.getKey());\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      CommonsHttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d9b46cad4c17a1079c050a11068965b0221231","date":1392593363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = e;\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n       \n       // TODO: consider using below above - currently does cause a problem with distrib updates:\n       // seems to match up against a failed forward to leader exception as well...\n       //     || e.getMessage().contains(\"java.net.SocketException\")\n       //     || e.getMessage().contains(\"java.net.ConnectException\")\n      } catch (SocketException e) {\n        ex = addZombie(server, e);\n      } catch (SocketTimeoutException e) {\n        ex = addZombie(server, e);\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 - you can see this on solr shutdown\n        if (e.code() == 404 || e.code() == 403 || e.code() == 503 || e.code() == 500) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        ex = e;\n      } catch (SocketTimeoutException e) {\n        ex = e;\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (rootCause instanceof IOException) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = e;\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<ServerWrapper>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = e;\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"025fa7514432c0e36c3b3a945bd87b643d5db43b","date":1396217098,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n      if (ex == null) {\n         return rsp; // SUCCESS\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = e;\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n      if (ex == null) {\n         return rsp; // SUCCESS\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      try {\n        rsp.rsp = server.request(req.getRequest());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = addZombie(server, e);\n        } else {\n          // Server is alive but the request was likely malformed or invalid\n          throw e;\n        }\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = addZombie(server, e);\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = addZombie(server, e);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      try {\n        rsp.rsp = wrapper.solrServer.request(req.getRequest());\n        zombieServers.remove(wrapper.getKey());\n        return rsp; // SUCCESS\n      } catch (SolrException e) {\n        // we retry on 404 or 403 or 503 or 500\n        // unless it's an update - then we only retry on connect exceptions\n        if (!isUpdate && RETRY_CODES.contains(e.code())) {\n          ex = e;\n          // already a zombie, no need to re-add\n        } else {\n          // Server is alive but the request was malformed or invalid\n          zombieServers.remove(wrapper.getKey());\n          throw e;\n        }\n\n      } catch (SocketException e) {\n        if (!isUpdate || e instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SocketTimeoutException e) {\n        if (!isUpdate) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (SolrServerException e) {\n        Throwable rootCause = e.getRootCause();\n        if (!isUpdate && rootCause instanceof IOException) {\n          ex = e;\n        } else if (isUpdate && rootCause instanceof ConnectException) {\n          ex = e;\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52b5440eaf5932d47d045122c0da775dbb4469b1","date":1412832726,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n      if (ex == null) {\n         return rsp; // SUCCESS\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        if (skipped.size() < req.getNumDeadServersToTry())\n          skipped.add(wrapper);\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    for (ServerWrapper wrapper : skipped) {\n      ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n      if (ex == null) {\n         return rsp; // SUCCESS\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrClient client = makeSolrClient(serverStr);\n\n      ex = doRequest(client, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.client, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isUpdate = req.request instanceof IsUpdateRequest;\n    List<ServerWrapper> skipped = null;\n\n    for (String serverStr : req.getServers()) {\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      rsp.server = serverStr;\n      HttpSolrServer server = makeServer(serverStr);\n\n      ex = doRequest(server, req, rsp, isUpdate, false, null);\n      if (ex == null) {\n        return rsp; // SUCCESS\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        ex = doRequest(wrapper.solrServer, req, rsp, isUpdate, true, wrapper.getKey());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["4a66009e1f5c17a77d75a6381cacdf9c893b2d8f","0ef98d81d4d9ab6b358b8179f4f95181eaa0c803"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","025fa7514432c0e36c3b3a945bd87b643d5db43b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["31d9b46cad4c17a1079c050a11068965b0221231"],"55980207f1977bd1463465de1659b821347e2fa8":["025fa7514432c0e36c3b3a945bd87b643d5db43b","52b5440eaf5932d47d045122c0da775dbb4469b1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"025fa7514432c0e36c3b3a945bd87b643d5db43b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bafca15d8e408346a67f4282ad1143b88023893b":["52b5440eaf5932d47d045122c0da775dbb4469b1"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"52b5440eaf5932d47d045122c0da775dbb4469b1":["025fa7514432c0e36c3b3a945bd87b643d5db43b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"31d9b46cad4c17a1079c050a11068965b0221231":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["31d9b46cad4c17a1079c050a11068965b0221231"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","025fa7514432c0e36c3b3a945bd87b643d5db43b"],"55980207f1977bd1463465de1659b821347e2fa8":[],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"025fa7514432c0e36c3b3a945bd87b643d5db43b":["5eb2511ababf862ea11e10761c70ee560cd84510","55980207f1977bd1463465de1659b821347e2fa8","52b5440eaf5932d47d045122c0da775dbb4469b1"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"52b5440eaf5932d47d045122c0da775dbb4469b1":["55980207f1977bd1463465de1659b821347e2fa8","bafca15d8e408346a67f4282ad1143b88023893b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"31d9b46cad4c17a1079c050a11068965b0221231":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","55980207f1977bd1463465de1659b821347e2fa8","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}