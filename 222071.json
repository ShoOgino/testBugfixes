{"path":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = new DefaultFacetIndexingParams();\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams);\n    \n    // Add the facet requests of interest to the search params\n    for (FacetRequest frq : facetRequests) {\n      facetSearchParams.addFacetRequest(frq);\n    }\n\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = new DefaultFacetIndexingParams();\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams);\n    \n    // Add the facet requests of interest to the search params\n    for (FacetRequest frq : facetRequests) {\n      facetSearchParams.addFacetRequest(frq);\n    }\n\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = new DefaultFacetIndexingParams();\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams);\n    \n    // Add the facet requests of interest to the search params\n    for (FacetRequest frq : facetRequests) {\n      facetSearchParams.addFacetRequest(frq);\n    }\n\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","sourceNew":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = new DefaultFacetIndexingParams();\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams);\n    \n    // Add the facet requests of interest to the search params\n    for (FacetRequest frq : facetRequests) {\n      facetSearchParams.addFacetRequest(frq);\n    }\n\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = new DefaultFacetIndexingParams();\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams);\n    \n    // Add the facet requests of interest to the search params\n    for (FacetRequest frq : facetRequests) {\n      facetSearchParams.addFacetRequest(frq);\n    }\n\n    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}