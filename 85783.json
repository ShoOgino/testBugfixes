{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fcfd8b392582391d5804daa94c05f917c7fbdc7","date":1370873427,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };) {\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };) {\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };) {\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6dffeb9665eb433bf45523ed358afef21c7f83","date":1540558771,"type":3,"author":"Marvin Bredal Lillehaug","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n        private int nestedLevel;\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          nestedLevel++;\n          SolrDocument doc = super.readSolrDocument(dis);\n          nestedLevel--;\n          if (nestedLevel == 0) {\n            // parent document\n            callback.streamSolrDocument(doc);\n            return null;\n          } else {\n            // child document\n            return doc;\n          }\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };) {\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };) {\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    if (callback != null) {\n      return streamDocs(body);\n    } else {\n      try {\n        return fastStreamDocs(body, fastCallback);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Unable to parse\", e);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n        private int nestedLevel;\n\n        @Override\n        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n          nestedLevel++;\n          SolrDocument doc = super.readSolrDocument(dis);\n          nestedLevel--;\n          if (nestedLevel == 0) {\n            // parent document\n            callback.streamSolrDocument(doc);\n            return null;\n          } else {\n            // child document\n            return doc;\n          }\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };) {\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"220577719e3753e52195ed66dc9af6c4e65e2873":["1e6dffeb9665eb433bf45523ed358afef21c7f83"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e6dffeb9665eb433bf45523ed358afef21c7f83":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["2fcfd8b392582391d5804daa94c05f917c7fbdc7","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["2fcfd8b392582391d5804daa94c05f917c7fbdc7","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["220577719e3753e52195ed66dc9af6c4e65e2873"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"220577719e3753e52195ed66dc9af6c4e65e2873":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e6dffeb9665eb433bf45523ed358afef21c7f83":["220577719e3753e52195ed66dc9af6c4e65e2873"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e6dffeb9665eb433bf45523ed358afef21c7f83"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}