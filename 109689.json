{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet).mjava","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal, splitOnNumerics, stemEnglishPossessive, protWords);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal, splitOnNumerics, stemEnglishPossessive, protWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1acb945fb5751735f5c9482576c8760d97b6ab","date":1315370590,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet).mjava","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   * @deprecated Use {@link #WordDelimiterFilter(TokenStream, int, CharArraySet)}\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal, splitOnNumerics, stemEnglishPossessive, protWords);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal, splitOnNumerics, stemEnglishPossessive, protWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b4be7bc344ec2c6b504ffcb62920e100d7e045","date":1315497361,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   * @deprecated Use {@link #WordDelimiterFilter(TokenStream, int, CharArraySet)}\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal, splitOnNumerics, stemEnglishPossessive, protWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45b4be7bc344ec2c6b504ffcb62920e100d7e045":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45b4be7bc344ec2c6b504ffcb62920e100d7e045"]},"commit2Childs":{"45b4be7bc344ec2c6b504ffcb62920e100d7e045":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["45b4be7bc344ec2c6b504ffcb62920e100d7e045"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}