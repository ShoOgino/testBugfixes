{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1dcb481c1d36eb918fd5685a875aa54cd72e400","date":1342796663,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<>(q[i], q[i+1]);\n      }\n      NamedList nl = new NamedList(entries);\n      if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), nl);\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<>(q[i], q[i+1]);\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList nl = new NamedList(entries);\n      if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), nl);\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     *\n     * TODO: this isn't really safe in the presense of core reloads!\n     * Perhaps the best we could do is increment the core reference count\n     * and decrement it in the request close() method?\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<>(q[i], q[i+1]);\n      }\n      NamedList nl = new NamedList(entries);\n      if(nl.get(\"wt\" ) == null) nl.add(\"wt\",\"xml\");\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), nl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["c26f00b574427b55127e869b935845554afde1fa","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1dcb481c1d36eb918fd5685a875aa54cd72e400":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b1dcb481c1d36eb918fd5685a875aa54cd72e400":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}