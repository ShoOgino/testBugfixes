{"path":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","date":1355410999,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.info(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98ef9d9ecf768191e0c139463409e9297f8367de","date":1356019463,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.debug(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.info(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.debug(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1af881a1691e32ac2275b4008656709aa96e369","date":1404496493,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        if (r.getException() != null) {\n          // This should only happen in case of using shards.tolerant=true. Omit this ShardResponse\n          continue;\n        }\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.debug(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.debug(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"ShardRequest.response.size: {}\", sreq.responses.size());\n      }\n      for (ShardResponse r : sreq.responses) {\n        if (r.getException() != null) {\n          // This should only happen in case of using shards.tolerant=true. Omit this ShardResponse\n          continue;\n        }\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        if (log.isDebugEnabled()) {\n          log.debug(\"ShardRequest.response.shard: {}\", r.getShard());\n        }\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"id: '{}' Query: '{}'\", entry.getKey(), entry.getValue());\n            }\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"MLT Query returned: {}\", r.getSolrResponse().getResponse());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0\n        && rb.req.getParams().getBool(COMPONENT_NAME, false)) {\n      log.debug(\"ShardRequest.response.size: \" + sreq.responses.size());\n      for (ShardResponse r : sreq.responses) {\n        if (r.getException() != null) {\n          // This should only happen in case of using shards.tolerant=true. Omit this ShardResponse\n          continue;\n        }\n        NamedList<?> moreLikeThisReponse = (NamedList<?>) r.getSolrResponse()\n            .getResponse().get(\"moreLikeThis\");\n        log.debug(\"ShardRequest.response.shard: \" + r.getShard());\n        if (moreLikeThisReponse != null) {\n          for (Entry<String,?> entry : moreLikeThisReponse) {\n            log.debug(\"id: \\\"\" + entry.getKey() + \"\\\" Query: \\\"\"\n                + entry.getValue() + \"\\\"\");\n            ShardRequest s = buildShardQuery(rb, (String) entry.getValue(),\n                entry.getKey());\n            rb.addRequest(this, s);\n          }\n        }\n      }\n    }\n    \n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_MLT_RESULTS) != 0) {\n      for (ShardResponse r : sreq.responses) {\n        log.debug(\"MLT Query returned: \"\n            + r.getSolrResponse().getResponse().toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98ef9d9ecf768191e0c139463409e9297f8367de"],"98ef9d9ecf768191e0c139463409e9297f8367de":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["c1af881a1691e32ac2275b4008656709aa96e369"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"c1af881a1691e32ac2275b4008656709aa96e369":["98ef9d9ecf768191e0c139463409e9297f8367de"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"98ef9d9ecf768191e0c139463409e9297f8367de":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c1af881a1691e32ac2275b4008656709aa96e369"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["98ef9d9ecf768191e0c139463409e9297f8367de"],"c1af881a1691e32ac2275b4008656709aa96e369":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}