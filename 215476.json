{"path":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","commits":[{"id":"0d2039f9b69cef7b394370ee828e100bc25233e1","date":1205614161,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\t\t   SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n\t       TokenizerChain tchain = (TokenizerChain)analyzer;\n\t       TokenizerFactory tfac = tchain.getTokenizerFactory();\n\t       tokenizer.add(\"className\", tfac.getClass().getName());\n\t       tokenizer.add(\"args\", tfac.getArgs());\n\t       aninfo.add(\"tokenizer\", tokenizer);\n\t       TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n\t       \n\t       List<Map<String, Object>> filters = new ArrayList<Map<String, Object>>();\n\t       for (TokenFilterFactory filtfac : filtfacs) {\n\t    \t   Map<String, Object> tok = new HashMap<String, Object>();\n\t    \t   tok.put(\"className\", filtfac.getClass().getName());\n\t    \t   tok.put(\"args\", filtfac.getArgs());\n\t    \t   filters.add(tok);\n\t       }\n\t       if (!filters.isEmpty()) {\n\t    \t   aninfo.add(\"filters\", filters);\n\t       }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a345c7aa5a3be11b064d7123059f0c5546700897"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8b03d9e181f123ee3b03ac4e7c833116adf0766","date":1205798279,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\t\t   SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n\t       TokenizerChain tchain = (TokenizerChain)analyzer;\n\t       TokenizerFactory tfac = tchain.getTokenizerFactory();\n\t       tokenizer.add(\"className\", tfac.getClass().getName());\n\t       tokenizer.add(\"args\", tfac.getArgs());\n\t       aninfo.add(\"tokenizer\", tokenizer);\n\t       TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n\t       \n        SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n        for (TokenFilterFactory filtfac : filtfacs) {\n\t    \t   Map<String, Object> tok = new HashMap<String, Object>();\n           String className = filtfac.getClass().getName();\n           tok.put(\"className\", className);\n\t    \t   tok.put(\"args\", filtfac.getArgs());\n\t    \t   filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n\t       }\n\t       if (filters.size() > 0) {\n\t    \t   aninfo.add(\"filters\", filters);\n\t       }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\t\t   SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n\t       TokenizerChain tchain = (TokenizerChain)analyzer;\n\t       TokenizerFactory tfac = tchain.getTokenizerFactory();\n\t       tokenizer.add(\"className\", tfac.getClass().getName());\n\t       tokenizer.add(\"args\", tfac.getArgs());\n\t       aninfo.add(\"tokenizer\", tokenizer);\n\t       TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n\t       \n\t       List<Map<String, Object>> filters = new ArrayList<Map<String, Object>>();\n\t       for (TokenFilterFactory filtfac : filtfacs) {\n\t    \t   Map<String, Object> tok = new HashMap<String, Object>();\n\t    \t   tok.put(\"className\", filtfac.getClass().getName());\n\t    \t   tok.put(\"args\", filtfac.getArgs());\n\t    \t   filters.add(tok);\n\t       }\n\t       if (!filters.isEmpty()) {\n\t    \t   aninfo.add(\"filters\", filters);\n\t       }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":["a345c7aa5a3be11b064d7123059f0c5546700897"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a345c7aa5a3be11b064d7123059f0c5546700897","date":1259166515,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\t\t   SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n\t       TokenizerChain tchain = (TokenizerChain)analyzer;\n\t       TokenizerFactory tfac = tchain.getTokenizerFactory();\n\t       tokenizer.add(\"className\", tfac.getClass().getName());\n\t       tokenizer.add(\"args\", tfac.getArgs());\n\t       aninfo.add(\"tokenizer\", tokenizer);\n\t       TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n\t       \n        SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n        for (TokenFilterFactory filtfac : filtfacs) {\n\t    \t   Map<String, Object> tok = new HashMap<String, Object>();\n           String className = filtfac.getClass().getName();\n           tok.put(\"className\", className);\n\t    \t   tok.put(\"args\", filtfac.getArgs());\n\t    \t   filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n\t       }\n\t       if (filters.size() > 0) {\n\t    \t   aninfo.add(\"filters\", filters);\n\t       }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":["e8b03d9e181f123ee3b03ac4e7c833116adf0766","0d2039f9b69cef7b394370ee828e100bc25233e1"],"bugIntro":["1486037b0fcc4d552ab91d319279d41d68fe6a94","1486037b0fcc4d552ab91d319279d41d68fe6a94","1486037b0fcc4d552ab91d319279d41d68fe6a94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8b03d9e181f123ee3b03ac4e7c833116adf0766":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"0d2039f9b69cef7b394370ee828e100bc25233e1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a345c7aa5a3be11b064d7123059f0c5546700897":["e8b03d9e181f123ee3b03ac4e7c833116adf0766"],"ad94625fb8d088209f46650c8097196fec67f00c":["a345c7aa5a3be11b064d7123059f0c5546700897"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e8b03d9e181f123ee3b03ac4e7c833116adf0766":["a345c7aa5a3be11b064d7123059f0c5546700897"],"0d2039f9b69cef7b394370ee828e100bc25233e1":["e8b03d9e181f123ee3b03ac4e7c833116adf0766"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a345c7aa5a3be11b064d7123059f0c5546700897":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}