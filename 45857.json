{"path":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}