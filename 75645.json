{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#decodeRefinementValuePath(String).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#decodeRefinementValuePath(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decodes a value path string specified for refinement.\n   *\n   * @see #encodeRefinementValuePath\n   */\n  public static List<String> decodeRefinementValuePath(String valuePath) {\n    List <String> rawvals = StrUtils.splitSmart(valuePath, \",\", true);\n    // special case: empty list => empty string\n    if (rawvals.isEmpty()) return rawvals;\n\n    List<String> out = new ArrayList<String>(rawvals.size());\n    for (String raw : rawvals) {\n      assert 0 < raw.length();\n      if ('^' == raw.charAt(0)) {\n        assert 1 == raw.length();\n        out.add(null);\n      } else {\n        assert '~' == raw.charAt(0);\n        out.add(raw.substring(1));\n      }\n    }\n\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c169312e8f621502de0661c48a43e492983cd28a","date":1423728604,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#decodeRefinementValuePath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#decodeRefinementValuePath(String).mjava","sourceNew":"  /**\n   * Decodes a value path string specified for refinement.\n   *\n   * @see #encodeRefinementValuePath\n   */\n  public static List<String> decodeRefinementValuePath(String valuePath) {\n    List <String> rawvals = StrUtils.splitSmart(valuePath, \",\", true);\n    // special case: empty list => empty string\n    if (rawvals.isEmpty()) return rawvals;\n\n    List<String> out = new ArrayList<>(rawvals.size());\n    for (String raw : rawvals) {\n      assert 0 < raw.length();\n      if ('^' == raw.charAt(0)) {\n        assert 1 == raw.length();\n        out.add(null);\n      } else {\n        assert '~' == raw.charAt(0);\n        out.add(raw.substring(1));\n      }\n    }\n\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Decodes a value path string specified for refinement.\n   *\n   * @see #encodeRefinementValuePath\n   */\n  public static List<String> decodeRefinementValuePath(String valuePath) {\n    List <String> rawvals = StrUtils.splitSmart(valuePath, \",\", true);\n    // special case: empty list => empty string\n    if (rawvals.isEmpty()) return rawvals;\n\n    List<String> out = new ArrayList<String>(rawvals.size());\n    for (String raw : rawvals) {\n      assert 0 < raw.length();\n      if ('^' == raw.charAt(0)) {\n        assert 1 == raw.length();\n        out.add(null);\n      } else {\n        assert '~' == raw.charAt(0);\n        out.add(raw.substring(1));\n      }\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#decodeRefinementValuePath(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#decodeRefinementValuePath(String).mjava","sourceNew":"  /**\n   * Decodes a value path string specified for refinement.\n   *\n   * @see #encodeRefinementValuePath\n   */\n  public static List<String> decodeRefinementValuePath(String valuePath) {\n    List<String> rawvals = StrUtils.splitSmart(valuePath, \",\", true);\n    // special case: empty list => empty string\n    if (rawvals.isEmpty()) return rawvals;\n\n    List<String> out = new ArrayList<>(rawvals.size());\n    for (String raw : rawvals) {\n      assert 0 < raw.length();\n      if ('^' == raw.charAt(0)) {\n        assert 1 == raw.length();\n        out.add(null);\n      } else {\n        assert '~' == raw.charAt(0);\n        out.add(raw.substring(1));\n      }\n    }\n\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Decodes a value path string specified for refinement.\n   *\n   * @see #encodeRefinementValuePath\n   */\n  public static List<String> decodeRefinementValuePath(String valuePath) {\n    List <String> rawvals = StrUtils.splitSmart(valuePath, \",\", true);\n    // special case: empty list => empty string\n    if (rawvals.isEmpty()) return rawvals;\n\n    List<String> out = new ArrayList<>(rawvals.size());\n    for (String raw : rawvals) {\n      assert 0 < raw.length();\n      if ('^' == raw.charAt(0)) {\n        assert 1 == raw.length();\n        out.add(null);\n      } else {\n        assert '~' == raw.charAt(0);\n        out.add(raw.substring(1));\n      }\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["c169312e8f621502de0661c48a43e492983cd28a"],"c169312e8f621502de0661c48a43e492983cd28a":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["c169312e8f621502de0661c48a43e492983cd28a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c169312e8f621502de0661c48a43e492983cd28a":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}