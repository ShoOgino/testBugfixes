{"path":"src/lucene_extras/org/apache/lucene/analysis/TestSynonymFilter#testMatching().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/lucene_extras/org/apache/lucene/analysis/TestSynonymFilter#testMatching().mjava","pathOld":"/dev/null","sourceNew":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    // System.out.println(map);\n    // System.out.println(getTokList(map,\"a\",false));\n\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"aa\"));\n    assertTokEqual(getTokList(map,\"a $\",false), tokens(\"aa $\"));\n    assertTokEqual(getTokList(map,\"$ a\",false), tokens(\"$ aa\"));\n    assertTokEqual(getTokList(map,\"a a\",false), tokens(\"aa aa\"));\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"bb\"));\n    assertTokEqual(getTokList(map,\"z x c v\",false), tokens(\"zxcv\"));\n    assertTokEqual(getTokList(map,\"z x c $\",false), tokens(\"z xc $\"));\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a b\",false), tokens(\"ab\"));\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo $ zoo\"));\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo zoo zoo $ zoo zoo\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4494badf9b14fe0d151e58b627ae27bb543278b","date":1138579258,"type":4,"author":"Yoav Shapira","isMerge":false,"pathNew":"/dev/null","pathOld":"src/lucene_extras/org/apache/lucene/analysis/TestSynonymFilter#testMatching().mjava","sourceNew":null,"sourceOld":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    // System.out.println(map);\n    // System.out.println(getTokList(map,\"a\",false));\n\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"aa\"));\n    assertTokEqual(getTokList(map,\"a $\",false), tokens(\"aa $\"));\n    assertTokEqual(getTokList(map,\"$ a\",false), tokens(\"$ aa\"));\n    assertTokEqual(getTokList(map,\"a a\",false), tokens(\"aa aa\"));\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"bb\"));\n    assertTokEqual(getTokList(map,\"z x c v\",false), tokens(\"zxcv\"));\n    assertTokEqual(getTokList(map,\"z x c $\",false), tokens(\"z xc $\"));\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a b\",false), tokens(\"ab\"));\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo $ zoo\"));\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo zoo zoo $ zoo zoo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d4494badf9b14fe0d151e58b627ae27bb543278b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["d4494badf9b14fe0d151e58b627ae27bb543278b"],"d4494badf9b14fe0d151e58b627ae27bb543278b":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4494badf9b14fe0d151e58b627ae27bb543278b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}