{"path":"backwards/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"/dev/null","sourceNew":"    public void test() throws IOException {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        //we have 2 documents with the term all in them, one document for all the other values\n        final List docs = new ArrayList();\n        //must call next first\n\n\n        ts.score(new Collector() {\n            private int base = 0;\n            private Scorer scorer;\n            @Override\n            public void setScorer(Scorer scorer) throws IOException {\n              this.scorer = scorer; \n            }\n\n            @Override\n            public void collect(int doc) throws IOException {\n              float score = scorer.score();\n              doc = doc + base;\n              docs.add(new TestHit(doc, score));\n              assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n              assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n                            doc == 0 || doc == 5);\n            }\n            @Override\n            public void setNextReader(IndexReader reader, int docBase) {\n              base = docBase;\n            }\n            @Override\n            public boolean acceptsDocsOutOfOrder() {\n              return true;\n            }\n        });\n        assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n        TestHit doc0 = (TestHit) docs.get(0);\n        TestHit doc5 = (TestHit) docs.get(1);\n        //The scores should be the same\n        assertTrue(doc0.score + \" does not equal: \" + doc5.score, doc0.score == doc5.score);\n        /*\n        Score should be (based on Default Sim.:\n        All floats are approximate\n        tf = 1\n        numDocs = 6\n        docFreq(all) = 2\n        idf = ln(6/3) + 1 = 1.693147\n        idf ^ 2 = 2.8667\n        boost = 1\n        lengthNorm = 1 //there is 1 term in every document\n        coord = 1\n        sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n        queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n\n         score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n\n        */\n        assertTrue(doc0.score + \" does not equal: \" + 1.6931472f, doc0.score == 1.6931472f);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"    public void test() throws IOException {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        //we have 2 documents with the term all in them, one document for all the other values\n        final List docs = new ArrayList();\n        //must call next first\n\n\n        ts.score(new Collector() {\n            private int base = 0;\n            private Scorer scorer;\n            @Override\n            public void setScorer(Scorer scorer) throws IOException {\n              this.scorer = scorer; \n            }\n\n            @Override\n            public void collect(int doc) throws IOException {\n              float score = scorer.score();\n              doc = doc + base;\n              docs.add(new TestHit(doc, score));\n              assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n              assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n                            doc == 0 || doc == 5);\n            }\n            @Override\n            public void setNextReader(IndexReader reader, int docBase) {\n              base = docBase;\n            }\n            @Override\n            public boolean acceptsDocsOutOfOrder() {\n              return true;\n            }\n        });\n        assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n        TestHit doc0 = (TestHit) docs.get(0);\n        TestHit doc5 = (TestHit) docs.get(1);\n        //The scores should be the same\n        assertTrue(doc0.score + \" does not equal: \" + doc5.score, doc0.score == doc5.score);\n        /*\n        Score should be (based on Default Sim.:\n        All floats are approximate\n        tf = 1\n        numDocs = 6\n        docFreq(all) = 2\n        idf = ln(6/3) + 1 = 1.693147\n        idf ^ 2 = 2.8667\n        boost = 1\n        lengthNorm = 1 //there is 1 term in every document\n        coord = 1\n        sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n        queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n\n         score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n\n        */\n        assertTrue(doc0.score + \" does not equal: \" + 1.6931472f, doc0.score == 1.6931472f);\n    }\n\n","sourceOld":"    public void test() throws IOException {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        //we have 2 documents with the term all in them, one document for all the other values\n        final List docs = new ArrayList();\n        //must call next first\n\n\n        ts.score(new Collector() {\n            private int base = 0;\n            private Scorer scorer;\n            @Override\n            public void setScorer(Scorer scorer) throws IOException {\n              this.scorer = scorer; \n            }\n\n            @Override\n            public void collect(int doc) throws IOException {\n              float score = scorer.score();\n              doc = doc + base;\n              docs.add(new TestHit(doc, score));\n              assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n              assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n                            doc == 0 || doc == 5);\n            }\n            @Override\n            public void setNextReader(IndexReader reader, int docBase) {\n              base = docBase;\n            }\n            @Override\n            public boolean acceptsDocsOutOfOrder() {\n              return true;\n            }\n        });\n        assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n        TestHit doc0 = (TestHit) docs.get(0);\n        TestHit doc5 = (TestHit) docs.get(1);\n        //The scores should be the same\n        assertTrue(doc0.score + \" does not equal: \" + doc5.score, doc0.score == doc5.score);\n        /*\n        Score should be (based on Default Sim.:\n        All floats are approximate\n        tf = 1\n        numDocs = 6\n        docFreq(all) = 2\n        idf = ln(6/3) + 1 = 1.693147\n        idf ^ 2 = 2.8667\n        boost = 1\n        lengthNorm = 1 //there is 1 term in every document\n        coord = 1\n        sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n        queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n\n         score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n\n        */\n        assertTrue(doc0.score + \" does not equal: \" + 1.6931472f, doc0.score == 1.6931472f);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}