{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fa5babdf54832351c1e9c77942f3d8402acf793","date":1412436540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else if (field.getIndexOptions() != IndexOptions.DOCS) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else {\n        sumTotalTermFreq = in.readVLong();\n      }\n      // if frequencies are omitted, sumDocFreq = sumTotalTermFreq and we only write one value.\n      if (field.getIndexOptions() == IndexOptions.DOCS) {\n        sumDocFreq = sumTotalTermFreq;\n      } else {\n        sumDocFreq = in.readVLong();\n      }\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else if (field.getIndexOptions() != IndexOptions.DOCS) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else {\n        sumTotalTermFreq = in.readVLong();\n      }\n      // if frequencies are omitted, sumDocFreq = sumTotalTermFreq and we only write one value.\n      if (field.getIndexOptions() == IndexOptions.DOCS) {\n        sumDocFreq = sumTotalTermFreq;\n      } else {\n        sumDocFreq = in.readVLong();\n      }\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else if (field.getIndexOptions() != IndexOptions.DOCS) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":null,"sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field == null) {\n        throw new CorruptIndexException(\"invalid field number: \" + fieldNumber, in);\n      } else {\n        sumTotalTermFreq = in.readVLong();\n      }\n      // if frequencies are omitted, sumDocFreq = sumTotalTermFreq and we only write one value.\n      if (field.getIndexOptions() == IndexOptions.DOCS) {\n        sumDocFreq = sumTotalTermFreq;\n      } else {\n        sumDocFreq = in.readVLong();\n      }\n      docCount = in.readVInt();\n      \n      fst = new FST<>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"086ffe31d8fba0110227db122974163709ecc1b4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["2bb2842e561df4e8e9ad89010605fc86ac265465","086ffe31d8fba0110227db122974163709ecc1b4"],"24f89e8a6aac05753cde4c83d62a74356098200d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6fa5babdf54832351c1e9c77942f3d8402acf793"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["9bb9a29a5e71a90295f175df8919802993142c9a"],"6fa5babdf54832351c1e9c77942f3d8402acf793":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9bb9a29a5e71a90295f175df8919802993142c9a","6fa5babdf54832351c1e9c77942f3d8402acf793"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["24f89e8a6aac05753cde4c83d62a74356098200d"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9bb9a29a5e71a90295f175df8919802993142c9a":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"6fa5babdf54832351c1e9c77942f3d8402acf793":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}