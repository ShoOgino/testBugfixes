{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    assertEquals(childsNum, resultChilds.size());\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      assertEquals(childIndex * 2, grandChilds.size());\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    assertEquals(childsNum, resultChilds.size());\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      assertEquals(childIndex * 2, grandChilds.size());\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f38beb59576e91118ab20f7bf3bda40a9c7b040d","date":1379007849,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    assertEquals(childsNum, resultChilds.size());\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      assertEquals(childIndex * 2, grandChilds.size());\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(topDocument, os);\n    }\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    SolrInputDocument result;\n    try (JavaBinCodec jbc = new JavaBinCodec(); InputStream is = new ByteArrayInputStream(buffer)) {\n      result = (SolrInputDocument) jbc.unmarshal(is);\n    }\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(topDocument, os);\n    }\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    SolrInputDocument result;\n    try (JavaBinCodec jbc = new JavaBinCodec(); InputStream is = new ByteArrayInputStream(buffer)) {\n      result = (SolrInputDocument) jbc.unmarshal(is);\n    }\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(topDocument, os);\n    }\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    SolrInputDocument result;\n    try (JavaBinCodec jbc = new JavaBinCodec(); InputStream is = new ByteArrayInputStream(buffer)) {\n      result = (SolrInputDocument) jbc.unmarshal(is);\n    }\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(topDocument, os);\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    InputStream is = new ByteArrayInputStream(buffer);\n    SolrInputDocument result = (SolrInputDocument) new JavaBinCodec().unmarshal(is);\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testJavaBinCodec().mjava","sourceNew":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n\n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(topDocument, os);\n    }\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    SolrInputDocument result;\n    try (JavaBinCodec jbc = new JavaBinCodec(); InputStream is = new ByteArrayInputStream(buffer)) {\n      result = (SolrInputDocument) jbc.unmarshal(is);\n    }\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n\n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n\n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n\n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJavaBinCodec() throws IOException { //actually this test must be in other test class\n    SolrInputDocument topDocument = new SolrInputDocument();\n    topDocument.addField(\"parent_f1\", \"v1\");\n    topDocument.addField(\"parent_f2\", \"v2\");\n    \n    int childsNum = atLeast(10);\n    for (int index = 0; index < childsNum; ++index) {\n      addChildren(\"child\", topDocument, index, false);\n    }\n    \n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(topDocument, os);\n    }\n    byte[] buffer = os.toByteArray();\n    //now read the Object back\n    SolrInputDocument result;\n    try (JavaBinCodec jbc = new JavaBinCodec(); InputStream is = new ByteArrayInputStream(buffer)) {\n      result = (SolrInputDocument) jbc.unmarshal(is);\n    }\n    assertEquals(2, result.size());\n    assertEquals(\"v1\", result.getFieldValue(\"parent_f1\"));\n    assertEquals(\"v2\", result.getFieldValue(\"parent_f2\"));\n    \n    List<SolrInputDocument> resultChilds = result.getChildDocuments();\n    int resultChildsSize = resultChilds == null ? 0 : resultChilds.size();\n    assertEquals(childsNum, resultChildsSize);\n    \n    for (int childIndex = 0; childIndex < childsNum; ++childIndex) {\n      SolrInputDocument child = resultChilds.get(childIndex);\n      for (int fieldNum = 0; fieldNum < childIndex; ++fieldNum) {\n        assertEquals(childIndex + \"value\" + fieldNum, child.getFieldValue(childIndex + \"child\" + fieldNum));\n      }\n      \n      List<SolrInputDocument> grandChilds = child.getChildDocuments();\n      int grandChildsSize = grandChilds == null ? 0 : grandChilds.size();\n\n      assertEquals(childIndex * 2, grandChildsSize);\n      for (int grandIndex = 0; grandIndex < childIndex * 2; ++grandIndex) {\n        SolrInputDocument grandChild = grandChilds.get(grandIndex);\n        assertFalse(grandChild.hasChildDocuments());\n        for (int fieldNum = 0; fieldNum < grandIndex; ++fieldNum) {\n          assertEquals(grandIndex + \"value\" + fieldNum, grandChild.getFieldValue(grandIndex + \"grand\" + fieldNum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["f38beb59576e91118ab20f7bf3bda40a9c7b040d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1a5eff758fefcac883606f32579ae501a14119":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f38beb59576e91118ab20f7bf3bda40a9c7b040d":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"28288370235ed02234a64753cdbf0c6ec096304a":["f38beb59576e91118ab20f7bf3bda40a9c7b040d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["f38beb59576e91118ab20f7bf3bda40a9c7b040d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f38beb59576e91118ab20f7bf3bda40a9c7b040d"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"f38beb59576e91118ab20f7bf3bda40a9c7b040d":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["bb1a5eff758fefcac883606f32579ae501a14119"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}