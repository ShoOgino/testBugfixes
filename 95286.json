{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler).mjava","commits":[{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler).mjava","pathOld":"/dev/null","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"deleting replica from from node {} \", Utils.toJSONString(sourceReplica));\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", \"could not delete because  \" + deleteResult.get(\"failure\") + \"  \" + Utils.toJSONString(sourceReplica));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.info(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.info(\"Waiting for deletes to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fac11578d87e86ac41841e07ba8db185cedf92c","date":1471085468,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"deleting replica from from node {} \", Utils.toJSONString(sourceReplica));\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", \"could not delete because  \" + deleteResult.get(\"failure\") + \"  \" + Utils.toJSONString(sourceReplica));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.info(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.info(\"Waiting for deletes to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"deleting replica from from node {} \", Utils.toJSONString(sourceReplica));\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", \"could not delete because  \" + deleteResult.get(\"failure\") + \"  \" + Utils.toJSONString(sourceReplica));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.info(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.info(\"Waiting for deletes to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["b1777912fb613f51063554d81f71c1b70d6bcd77","9fac11578d87e86ac41841e07ba8db185cedf92c"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1777912fb613f51063554d81f71c1b70d6bcd77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":[],"b1777912fb613f51063554d81f71c1b70d6bcd77":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9fac11578d87e86ac41841e07ba8db185cedf92c"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}