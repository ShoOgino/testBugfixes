{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#squaredEuclideanDistance(double[],double[]).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#squaredEuclideanDistance(double[],double[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#squaredEuclideanDistance(double[],double[]).mjava","sourceNew":"  /**\n   * The square of the Euclidean Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared Euclidean distance\n   */\n  public static double squaredEuclideanDistance(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","sourceOld":"  public static double squaredEuclideanDistance(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#squaredEuclideanDistance(double[],double[]).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#squaredEuclideanDistance(double[],double[]).mjava","sourceNew":"  /**\n   * The square of the Euclidean Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared Euclidean distance\n   */\n  public static double squaredEuclideanDistance(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * The square of the Euclidean Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared Euclidean distance\n   */\n  public static double squaredEuclideanDistance(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"459be89020f9023e3b60066066a892c7edb5de58":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["459be89020f9023e3b60066066a892c7edb5de58"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["459be89020f9023e3b60066066a892c7edb5de58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"459be89020f9023e3b60066066a892c7edb5de58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}