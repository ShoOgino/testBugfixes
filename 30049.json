{"path":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#equals(Object).mjava","commits":[{"id":"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","date":1444426023,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    GraphQuery other = (GraphQuery) obj;\n    if (fromField == null) {\n      if (other.fromField != null)\n        return false;\n    } else if (!fromField.equals(other.fromField))\n      return false;\n    if (maxDepth != other.maxDepth)\n      return false;\n    if (onlyLeafNodes != other.onlyLeafNodes)\n      return false;\n    if (q == null) {\n      if (other.q != null)\n        return false;\n    } else if (!q.equals(other.q))\n      return false;\n    if (returnRoot != other.returnRoot)\n      return false;\n    if (toField == null) {\n      if (other.toField != null)\n        return false;\n    } else if (!toField.equals(other.toField))\n      return false;\n    if (traversalFilter == null) {\n      if (other.traversalFilter != null)\n        return false;\n    } else if (!traversalFilter.equals(other.traversalFilter))\n      return false;\n    if (useAutn != other.useAutn)\n      return false;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    GraphQuery other = (GraphQuery) obj;\n    if (fromField == null) {\n      if (other.fromField != null)\n        return false;\n    } else if (!fromField.equals(other.fromField))\n      return false;\n    if (maxDepth != other.maxDepth)\n      return false;\n    if (onlyLeafNodes != other.onlyLeafNodes)\n      return false;\n    if (q == null) {\n      if (other.q != null)\n        return false;\n    } else if (!q.equals(other.q))\n      return false;\n    if (returnRoot != other.returnRoot)\n      return false;\n    if (toField == null) {\n      if (other.toField != null)\n        return false;\n    } else if (!toField.equals(other.toField))\n      return false;\n    if (traversalFilter == null) {\n      if (other.traversalFilter != null)\n        return false;\n    } else if (!traversalFilter.equals(other.traversalFilter))\n      return false;\n    if (useAutn != other.useAutn)\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    GraphQuery other = (GraphQuery) obj;\n    if (fromField == null) {\n      if (other.fromField != null)\n        return false;\n    } else if (!fromField.equals(other.fromField))\n      return false;\n    if (maxDepth != other.maxDepth)\n      return false;\n    if (onlyLeafNodes != other.onlyLeafNodes)\n      return false;\n    if (q == null) {\n      if (other.q != null)\n        return false;\n    } else if (!q.equals(other.q))\n      return false;\n    if (returnRoot != other.returnRoot)\n      return false;\n    if (toField == null) {\n      if (other.toField != null)\n        return false;\n    } else if (!toField.equals(other.toField))\n      return false;\n    if (traversalFilter == null) {\n      if (other.traversalFilter != null)\n        return false;\n    } else if (!traversalFilter.equals(other.traversalFilter))\n      return false;\n    if (useAutn != other.useAutn)\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}