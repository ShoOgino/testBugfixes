{"path":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testNodeConfigConstructor().mjava","commits":[{"id":"2252a4efd304715a7a65ac0c9b167d312d09997a","date":1427361661,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testNodeConfigConstructor().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeConfigConstructor() throws Exception {\n    Path path = createTempDir();\n\n    SolrResourceLoader loader = new SolrResourceLoader(path.toString());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testnode\", loader)\n        .setConfigSetBaseDirectory(Paths.get(TEST_HOME()).resolve(\"configsets\").toString())\n        .build();\n\n    try (EmbeddedSolrServer server = new EmbeddedSolrServer(config, \"newcore\")) {\n\n      CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n      createRequest.setCoreName(\"newcore\");\n      createRequest.setConfigSet(\"minimal\");\n      server.request(createRequest);\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"articleid\", \"test\");\n      server.add(\"newcore\", doc);\n      server.commit();\n\n      assertEquals(1, server.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      assertEquals(1, server.query(\"newcore\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d192c9952bd92597f8c2e36a0fcfeb50944eef35","date":1427401464,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerConstructors#testNodeConfigConstructor().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testNodeConfigConstructor().mjava","sourceNew":"  @Test\n  public void testNodeConfigConstructor() throws Exception {\n    Path path = createTempDir();\n\n    SolrResourceLoader loader = new SolrResourceLoader(path.toString());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testnode\", loader)\n        .setConfigSetBaseDirectory(Paths.get(TEST_HOME()).resolve(\"configsets\").toString())\n        .build();\n\n    try (EmbeddedSolrServer server = new EmbeddedSolrServer(config, \"newcore\")) {\n\n      CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n      createRequest.setCoreName(\"newcore\");\n      createRequest.setConfigSet(\"minimal\");\n      server.request(createRequest);\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"articleid\", \"test\");\n      server.add(\"newcore\", doc);\n      server.commit();\n\n      assertEquals(1, server.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      assertEquals(1, server.query(\"newcore\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeConfigConstructor() throws Exception {\n    Path path = createTempDir();\n\n    SolrResourceLoader loader = new SolrResourceLoader(path.toString());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testnode\", loader)\n        .setConfigSetBaseDirectory(Paths.get(TEST_HOME()).resolve(\"configsets\").toString())\n        .build();\n\n    try (EmbeddedSolrServer server = new EmbeddedSolrServer(config, \"newcore\")) {\n\n      CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\n      createRequest.setCoreName(\"newcore\");\n      createRequest.setConfigSet(\"minimal\");\n      server.request(createRequest);\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"articleid\", \"test\");\n      server.add(\"newcore\", doc);\n      server.commit();\n\n      assertEquals(1, server.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      assertEquals(1, server.query(\"newcore\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d192c9952bd92597f8c2e36a0fcfeb50944eef35":["2252a4efd304715a7a65ac0c9b167d312d09997a"],"2252a4efd304715a7a65ac0c9b167d312d09997a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d192c9952bd92597f8c2e36a0fcfeb50944eef35"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2252a4efd304715a7a65ac0c9b167d312d09997a"],"d192c9952bd92597f8c2e36a0fcfeb50944eef35":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2252a4efd304715a7a65ac0c9b167d312d09997a":["d192c9952bd92597f8c2e36a0fcfeb50944eef35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}