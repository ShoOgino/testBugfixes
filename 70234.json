{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteEnwikiLineDocTaskTest#testCategoryLines().mjava","commits":[{"id":"f11aff2ac25cc001599c10577012e84297104c48","date":1355045169,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteEnwikiLineDocTaskTest#testCategoryLines().mjava","pathOld":"/dev/null","sourceNew":"  public void testCategoryLines() throws Exception {\n    // WriteLineDocTask replaced only \\t characters w/ a space, since that's its\n    // separator char. However, it didn't replace newline characters, which\n    // resulted in errors in LineDocSource.\n    File file = new File(getWorkDir(), \"two-lines-each.txt\");\n    PerfRunData runData = createPerfRunData(file, WriteLineCategoryDocMaker.class.getName());\n    WriteLineDocTask wldt = new WriteEnwikiLineDocTask(runData);\n    for (int i=0; i<4; i++) { // four times so that each file should have 2 lines. \n      wldt.doLogic();\n    }\n    wldt.close();\n    \n    doReadTest(file, \"title text\", \"date text\", \"body text\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteEnwikiLineDocTaskTest#testCategoryLines().mjava","pathOld":"/dev/null","sourceNew":"  public void testCategoryLines() throws Exception {\n    // WriteLineDocTask replaced only \\t characters w/ a space, since that's its\n    // separator char. However, it didn't replace newline characters, which\n    // resulted in errors in LineDocSource.\n    File file = new File(getWorkDir(), \"two-lines-each.txt\");\n    PerfRunData runData = createPerfRunData(file, WriteLineCategoryDocMaker.class.getName());\n    WriteLineDocTask wldt = new WriteEnwikiLineDocTask(runData);\n    for (int i=0; i<4; i++) { // four times so that each file should have 2 lines. \n      wldt.doLogic();\n    }\n    wldt.close();\n    \n    doReadTest(file, \"title text\", \"date text\", \"body text\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteEnwikiLineDocTaskTest#testCategoryLines().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteEnwikiLineDocTaskTest#testCategoryLines().mjava","sourceNew":"  public void testCategoryLines() throws Exception {\n    // WriteLineDocTask replaced only \\t characters w/ a space, since that's its\n    // separator char. However, it didn't replace newline characters, which\n    // resulted in errors in LineDocSource.\n    Path file = getWorkDir().resolve(\"two-lines-each.txt\");\n    PerfRunData runData = createPerfRunData(file, WriteLineCategoryDocMaker.class.getName());\n    WriteLineDocTask wldt = new WriteEnwikiLineDocTask(runData);\n    for (int i=0; i<4; i++) { // four times so that each file should have 2 lines. \n      wldt.doLogic();\n    }\n    wldt.close();\n    \n    doReadTest(file, \"title text\", \"date text\", \"body text\");\n  }\n\n","sourceOld":"  public void testCategoryLines() throws Exception {\n    // WriteLineDocTask replaced only \\t characters w/ a space, since that's its\n    // separator char. However, it didn't replace newline characters, which\n    // resulted in errors in LineDocSource.\n    File file = new File(getWorkDir(), \"two-lines-each.txt\");\n    PerfRunData runData = createPerfRunData(file, WriteLineCategoryDocMaker.class.getName());\n    WriteLineDocTask wldt = new WriteEnwikiLineDocTask(runData);\n    for (int i=0; i<4; i++) { // four times so that each file should have 2 lines. \n      wldt.doLogic();\n    }\n    wldt.close();\n    \n    doReadTest(file, \"title text\", \"date text\", \"body text\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f11aff2ac25cc001599c10577012e84297104c48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f11aff2ac25cc001599c10577012e84297104c48"],"f4abec28b874149a7223e32cc7a01704c27790de":["f11aff2ac25cc001599c10577012e84297104c48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"f11aff2ac25cc001599c10577012e84297104c48":["407687e67faf6e1f02a211ca078d8e3eed631027","f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f11aff2ac25cc001599c10577012e84297104c48","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}