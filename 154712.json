{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","commits":[{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testDetails().mjava","sourceNew":"  private void doTestDetails() throws Exception {\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n    {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDetails() throws Exception {\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n    {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a59489bd57cb6434aab4e536a03b260fec1d47f3","date":1361571364,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n    {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","sourceOld":"  private void doTestDetails() throws Exception {\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n    {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf1be442b5dca0e925ff53f3d2ca8da696128ff1","date":1362537707,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n    {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","bugFix":["0b11f32acac13cc087cc735808dfe19c2b52673b"],"bugIntro":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\"), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\"), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(\"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\"), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrServer repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrServer(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e48bb0af7b982aecd8dbafdbeded231282bfdee2","date":1423717438,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      try { \n        if (repeater != null) repeater.tearDown();\n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":["0b11f32acac13cc087cc735808dfe19c2b52673b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c94d2661bc1c14426980ec7882e951fdcff08d0","date":1427167177,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":["bf1be442b5dca0e925ff53f3d2ca8da696128ff1"],"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(SnapPuller.TIMES_FAILED);\n      assertEquals(\"slave has fetch error count\",\n                   null, timesFailed);\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0ca74ae423fe45e31cb4c02b83262f0549f52f5","date":1482969139,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n      if (i > 0) {\n        assertEquals(i, replicatedAtCount.size());\n      }\n\n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n      if (i > 0) {\n        assertEquals(i, replicatedAtCount.size());\n      }\n\n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      \n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n      if (i > 0) {\n        assertEquals(i, replicatedAtCount.size());\n      }\n\n      assertEquals(\"slave isMaster?\", \n                   \"false\", details.get(\"isMaster\"));\n      assertEquals(\"slave isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"slave has slave section\", \n                    details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(\"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":["f0ca74ae423fe45e31cb4c02b83262f0549f52f5","0b11f32acac13cc087cc735808dfe19c2b52673b","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9","date":1523040621,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62115b9e45c213699273acb13af242762232e4","date":1523184285,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createAndStartJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":["0b11f32acac13cc087cc735808dfe19c2b52673b","ad28156288ac00b91352582904d97e6653205757"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createAndStartJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createAndStartJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.currentThread().sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createAndStartJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        @SuppressWarnings({\"rawtypes\"})\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createAndStartJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestDetails().mjava","sourceNew":"  @Test\n  public void doTestDetails() throws Exception {\n    followerJetty.stop();\n    \n    follower.setTestPort(leaderJetty.getLocalPort());\n    follower.copyConfigFile(CONF_DIR + \"solrconfig-follower.xml\", \"solrconfig.xml\");\n    followerJetty = createAndStartJetty(follower);\n    \n    followerClient.close();\n    leaderClient.close();\n    leaderClient = createNewSolrClient(leaderJetty.getLocalPort());\n    followerClient = createNewSolrClient(followerJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(leaderClient);\n      \n      assertEquals(\"leader isLeader?\",\n                   \"true\", details.get(\"isLeader\"));\n      assertEquals(\"leader isFollower?\",\n                   \"false\", details.get(\"isFollower\"));\n      assertNotNull(\"leader has leader section\",\n                    details.get(\"leader\"));\n    }\n\n    // check details on the follower a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(followerClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"follower\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", followerClient);\n        @SuppressWarnings({\"rawtypes\"})\n        List replicatedAtCount = (List) ((NamedList) details.get(\"follower\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.sleep(1000);\n          details = getDetails(followerClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"follower\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the follower has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"follower isLeader?\", \"false\", details.get(\"isLeader\"));\n      assertEquals(i + \": \" + \"follower isFollower?\", \"true\", details.get(\"isFollower\"));\n      assertNotNull(i + \": \" + \"follower has follower section\", details.get(\"follower\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"follower\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"follower has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n        leaderClient.commit();\n        pullFromTo(leaderJetty, followerJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", leaderJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isLeader?\",\n                   \"true\", details.get(\"isLeader\"));\n      assertEquals(\"repeater isFollower?\",\n                   \"true\", details.get(\"isFollower\"));\n      assertNotNull(\"repeater has leader section\",\n                    details.get(\"leader\"));\n      assertNotNull(\"repeater has follower section\",\n                    details.get(\"follower\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestDetails() throws Exception {\n    slaveJetty.stop();\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty = createAndStartJetty(slave);\n    \n    slaveClient.close();\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    clearIndexWithReplication();\n    { \n      NamedList<Object> details = getDetails(masterClient);\n      \n      assertEquals(\"master isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"master isSlave?\", \n                   \"false\", details.get(\"isSlave\"));\n      assertNotNull(\"master has master section\", \n                    details.get(\"master\"));\n    }\n\n    // check details on the slave a couple of times before & after fetching\n    for (int i = 0; i < 3; i++) {\n      NamedList<Object> details = getDetails(slaveClient);\n      assertNotNull(i + \": \" + details);\n      assertNotNull(i + \": \" + details.toString(), details.get(\"slave\"));\n\n      if (i > 0) {\n        rQuery(i, \"*:*\", slaveClient);\n        @SuppressWarnings({\"rawtypes\"})\n        List replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        int tries = 0;\n        while ((replicatedAtCount == null || replicatedAtCount.size() < i) && tries++ < 5) {\n          Thread.sleep(1000);\n          details = getDetails(slaveClient);\n          replicatedAtCount = (List) ((NamedList) details.get(\"slave\")).get(\"indexReplicatedAtList\");\n        }\n        \n        assertNotNull(\"Expected to see that the slave has replicated\" + i + \": \" + details.toString(), replicatedAtCount);\n        \n        // we can have more replications than we added docs because a replication can legally fail and try \n        // again (sometimes we cannot merge into a live index and have to try again)\n        assertTrue(\"i:\" + i + \" replicationCount:\" + replicatedAtCount.size(), replicatedAtCount.size() >= i); \n      }\n\n      assertEquals(i + \": \" + \"slave isMaster?\", \"false\", details.get(\"isMaster\"));\n      assertEquals(i + \": \" + \"slave isSlave?\", \"true\", details.get(\"isSlave\"));\n      assertNotNull(i + \": \" + \"slave has slave section\", details.get(\"slave\"));\n      // SOLR-2677: assert not false negatives\n      Object timesFailed = ((NamedList)details.get(\"slave\")).get(IndexFetcher.TIMES_FAILED);\n      // SOLR-7134: we can have a fail because some mock index files have no checksum, will\n      // always be downloaded, and may not be able to be moved into the existing index\n      assertTrue(i + \": \" + \"slave has fetch error count: \" + (String)timesFailed, timesFailed == null || ((String) timesFailed).equals(\"1\"));\n\n      if (3 != i) {\n        // index & fetch\n        index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n        masterClient.commit();\n        pullFromTo(masterJetty, slaveJetty);\n      }\n    }\n\n    SolrInstance repeater = null;\n    JettySolrRunner repeaterJetty = null;\n    SolrClient repeaterClient = null;\n    try {\n      repeater = new SolrInstance(createTempDir(\"solr-instance\").toFile(), \"repeater\", masterJetty.getLocalPort());\n      repeater.setUp();\n      repeaterJetty = createAndStartJetty(repeater);\n      repeaterClient = createNewSolrClient(repeaterJetty.getLocalPort());\n\n      \n      NamedList<Object> details = getDetails(repeaterClient);\n      \n      assertEquals(\"repeater isMaster?\", \n                   \"true\", details.get(\"isMaster\"));\n      assertEquals(\"repeater isSlave?\", \n                   \"true\", details.get(\"isSlave\"));\n      assertNotNull(\"repeater has master section\", \n                    details.get(\"master\"));\n      assertNotNull(\"repeater has slave section\", \n                    details.get(\"slave\"));\n\n    } finally {\n      try { \n        if (repeaterJetty != null) repeaterJetty.stop(); \n      } catch (Exception e) { /* :NOOP: */ }\n      if (repeaterClient != null) repeaterClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["f0ca74ae423fe45e31cb4c02b83262f0549f52f5"],"1bf853f0385a540ee0fb220fd272f2c362432294":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"aa62115b9e45c213699273acb13af242762232e4":["ad28156288ac00b91352582904d97e6653205757","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["aa62115b9e45c213699273acb13af242762232e4"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"b7605579001505896d48b07160075a5c8b8e128e":["4c7856260bc28f285ae7bfefa99b28db4dca6daf","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"f0ca74ae423fe45e31cb4c02b83262f0549f52f5":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"f4abec28b874149a7223e32cc7a01704c27790de":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9":["ad28156288ac00b91352582904d97e6653205757"],"e98520789adb1d5ad05afb4956eca0944a929688":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["6c94d2661bc1c14426980ec7882e951fdcff08d0","f0ca74ae423fe45e31cb4c02b83262f0549f52f5"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e48bb0af7b982aecd8dbafdbeded231282bfdee2","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["e48bb0af7b982aecd8dbafdbeded231282bfdee2"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bf1be442b5dca0e925ff53f3d2ca8da696128ff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e48bb0af7b982aecd8dbafdbeded231282bfdee2":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bf1be442b5dca0e925ff53f3d2ca8da696128ff1":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["1bf853f0385a540ee0fb220fd272f2c362432294"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["aa62115b9e45c213699273acb13af242762232e4","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9"],"1bf853f0385a540ee0fb220fd272f2c362432294":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa62115b9e45c213699273acb13af242762232e4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["f0ca74ae423fe45e31cb4c02b83262f0549f52f5","f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f0ca74ae423fe45e31cb4c02b83262f0549f52f5":["ad28156288ac00b91352582904d97e6653205757","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9":["aa62115b9e45c213699273acb13af242762232e4"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","f4abec28b874149a7223e32cc7a01704c27790de"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bf853f0385a540ee0fb220fd272f2c362432294"],"e48bb0af7b982aecd8dbafdbeded231282bfdee2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e48bb0af7b982aecd8dbafdbeded231282bfdee2"],"bf1be442b5dca0e925ff53f3d2ca8da696128ff1":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["bf1be442b5dca0e925ff53f3d2ca8da696128ff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}