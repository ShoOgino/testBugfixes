{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBufferUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBufferUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRequestBufferUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    log.info(\"Starting to buffer updates on core:\" + cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.ACTIVE)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in active state\");\n      }\n      updateLog.bufferUpdates();\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFERING\");\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not start buffering updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBufferUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBufferUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestBufferUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    log.info(\"Starting to buffer updates on core:\" + cname);\n\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core == null)\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Core [\" + cname + \"] does not exist\");\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.ACTIVE)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in active state\");\n      }\n      updateLog.bufferUpdates();\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFERING\");\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not start buffering updates\", e);\n    } finally {\n      if (req != null) req.close();\n    }\n  }\n\n","sourceOld":"  private void handleRequestBufferUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    log.info(\"Starting to buffer updates on core:\" + cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.ACTIVE)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in active state\");\n      }\n      updateLog.bufferUpdates();\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFERING\");\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not start buffering updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestBufferUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleRequestBufferUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    log.info(\"Starting to buffer updates on core:\" + cname);\n\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core == null)\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Core [\" + cname + \"] does not exist\");\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.ACTIVE)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in active state\");\n      }\n      updateLog.bufferUpdates();\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFERING\");\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not start buffering updates\", e);\n    } finally {\n      if (req != null) req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da888af1ab894358122a22229051215f58cf4d54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["da888af1ab894358122a22229051215f58cf4d54"],"fa0876236f0bd8be403747120d248bdd42b75a96":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"da888af1ab894358122a22229051215f58cf4d54":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da888af1ab894358122a22229051215f58cf4d54"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["fa0876236f0bd8be403747120d248bdd42b75a96"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}