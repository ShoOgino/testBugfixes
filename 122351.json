{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get replica properties (if the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get replica properties (if the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","sourceOld":"  /**\n   * Get replica properties (if the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","sourceOld":"  /**\n   * Get replica properties (if the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName, boolean cachedOnly) {\n    DocCollection coll = stateReader.getCollection(collection,cachedOnly);\n    return coll == null? null: coll.getReplica(coreNodeName);\n  }\n\n","sourceOld":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String,boolean).mjava","sourceNew":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","sourceOld":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName, boolean cachedOnly) {\n    DocCollection coll = stateReader.getCollection(collection,cachedOnly);\n    return coll == null? null: coll.getReplica(coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(getCollectionOrNull(collection), coreNodeName);\n  }\n\n","sourceOld":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(collectionStates.get(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":"  /**\n   * Gets the replica by the core node name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   *\n   * @deprecated use {@link DocCollection#getReplica(String)} instead\n   */\n  @Deprecated\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    for (Slice slice : coll.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(getCollectionOrNull(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":"  /**\n   * Gets the replica by the core node name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   *\n   * @deprecated use {@link DocCollection#getReplica(String)} instead\n   */\n  @Deprecated\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    for (Slice slice : coll.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Gets the replica by the core name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   */\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    return getReplica(getCollectionOrNull(collection), coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets the replica by the core node name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   *\n   * @deprecated use {@link DocCollection#getReplica(String)} instead\n   */\n  @Deprecated\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    for (Slice slice : coll.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getReplica(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Gets the replica by the core node name (assuming the slice is unknown) or null if replica is not found.\n   * If the slice is known, do not use this method.\n   * coreNodeName is the same as replicaName\n   *\n   * @deprecated use {@link DocCollection#getReplica(String)} instead\n   */\n  @Deprecated\n  public Replica getReplica(final String collection, final String coreNodeName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    for (Slice slice : coll.getSlices()) {\n      Replica replica = slice.getReplica(coreNodeName);\n      if (replica != null) return replica;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"344b0840364d990b29b97467bfcc766ff8325d11":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["9279b175e5e66258442d2123a50f052219a9cc1b","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5a558d54519c651068ddb202f03befefb1514a7"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","344b0840364d990b29b97467bfcc766ff8325d11"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["c5a558d54519c651068ddb202f03befefb1514a7"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["344b0840364d990b29b97467bfcc766ff8325d11"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}