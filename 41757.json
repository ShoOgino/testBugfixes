{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","sourceNew":"    /**\n     * <p>Sets this circular number's value to the first member of the \n     * circular sequence\n     * <p><code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     */\n    public void reset() {\n      value = minValue;\n    }\n\n","sourceOld":"    /**\n     * <p>Sets this circular number's value to the first member of the \n     * circular sequence\n     * <p><code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     */\n    public void reset() {\n      value = minValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f79c103683b18eae3b9f62a8c61e675d8984b092","date":1272893294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","sourceNew":"    /**\n     * <p>Sets this circular number's value to the first member of the \n     * circular sequence\n     * <p><code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     */\n    public void reset() {\n      previousValue = value = minValue;\n    }\n\n","sourceOld":"    /**\n     * <p>Sets this circular number's value to the first member of the \n     * circular sequence\n     * <p><code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     */\n    public void reset() {\n      value = minValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.CircularSequence#reset().mjava","sourceNew":"    /**\n     * <p>Sets this circular number's value to the first member of the \n     * circular sequence\n     * <p><code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     */\n    public void reset() {\n      previousValue = value = minValue;\n    }\n\n","sourceOld":"    /**\n     * <p>Sets this circular number's value to the first member of the \n     * circular sequence\n     * <p><code>gramSize</code> will take on values from the circular sequence\n     * <b>{ [ 1, ] {@link #minShingleSize} [ , ... , {@link #maxShingleSize} ] }</b>.\n     * <p>1 is included in the circular sequence only if \n     * {@link #outputUnigrams} = true.\n     */\n    public void reset() {\n      previousValue = value = minValue;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}