{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","commits":[{"id":"10005c6013abbd1102f2463cf95604d4c8774c99","date":1469460814,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08973aa47f2cf98a588293a53af4e948952ccfb","date":1469518724,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      if (values instanceof MutablePointsReader) {\n        final long fp = writer.writeField(dataOut, fieldInfo.name, (MutablePointsReader) values);\n        if (fp != -1) {\n          indexFPs.put(fieldInfo.name, fp);\n        }\n        return;\n      }\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0567940defa1ea6eb8a039d9d36e3682063f8a4","date":1469815320,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      if (values instanceof MutablePointsReader) {\n        final long fp = writer.writeField(dataOut, fieldInfo.name, (MutablePointsReader) values);\n        if (fp != -1) {\n          indexFPs.put(fieldInfo.name, fp);\n        }\n        return;\n      }\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      if (values instanceof MutablePointsReader) {\n        final long fp = writer.writeField(dataOut, fieldInfo.name, (MutablePointsReader) values);\n        if (fp != -1) {\n          indexFPs.put(fieldInfo.name, fp);\n        }\n        return;\n      }\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsWriter#writeField(FieldInfo,PointsReader,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException {\n\n    boolean singleValuePerDoc = values.size(fieldInfo.name) == values.getDocCount(fieldInfo.name);\n\n    try (BKDWriter writer = new BKDWriter(writeState.segmentInfo.maxDoc(),\n                                          writeState.directory,\n                                          writeState.segmentInfo.name,\n                                          fieldInfo.getPointDimensionCount(),\n                                          fieldInfo.getPointNumBytes(),\n                                          maxPointsInLeafNode,\n                                          maxMBSortInHeap,\n                                          values.size(fieldInfo.name),\n                                          singleValuePerDoc)) {\n\n      values.intersect(fieldInfo.name, new IntersectVisitor() {\n          @Override\n          public void visit(int docID) {\n            throw new IllegalStateException();\n          }\n\n          public void visit(int docID, byte[] packedValue) throws IOException {\n            writer.add(packedValue, docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return Relation.CELL_CROSSES_QUERY;\n          }\n        });\n\n      // We could have 0 points on merge since all docs with dimensional fields may be deleted:\n      if (writer.getPointCount() > 0) {\n        indexFPs.put(fieldInfo.name, writer.finish(dataOut));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10005c6013abbd1102f2463cf95604d4c8774c99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10005c6013abbd1102f2463cf95604d4c8774c99"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d08973aa47f2cf98a588293a53af4e948952ccfb","b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0567940defa1ea6eb8a039d9d36e3682063f8a4"]},"commit2Childs":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10005c6013abbd1102f2463cf95604d4c8774c99","d08973aa47f2cf98a588293a53af4e948952ccfb"],"10005c6013abbd1102f2463cf95604d4c8774c99":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}