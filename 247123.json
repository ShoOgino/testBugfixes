{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","commits":[{"id":"0957b9b8725b7ad93845495d2512df18cd240731","date":1482658887,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsEncryptedAndResolved() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    \n    String user = \"Fred\";\n    String plainPassword = \"MyPassword\";\n    String encryptedPassword = \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\";\n    String propsNamespace = \"exampleNamespace\";\n    \n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    \n    props.put(\"user\", \"${\" +propsNamespace +\".user}\");\n    props.put(\"encryptKeyFile\", \"${\" +propsNamespace +\".encryptKeyFile}\");\n    props.put(\"password\", \"${\" +propsNamespace +\".password}\");\n    \n    EasyMock.expect(dataSource.getConnection(user, plainPassword)).andReturn(\n             connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"user\", user);\n    values.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    values.put(\"password\", encryptedPassword);\n    context.getVariableResolver().addNamespace(propsNamespace, values);\n    \n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    //connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsEncryptedAndResolved() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    \n    String user = \"Fred\";\n    String plainPassword = \"MyPassword\";\n    String encryptedPassword = \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\";\n    String propsNamespace = \"exampleNamespace\";\n    \n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    \n    props.put(\"user\", \"${\" +propsNamespace +\".user}\");\n    props.put(\"encryptKeyFile\", \"${\" +propsNamespace +\".encryptKeyFile}\");\n    props.put(\"password\", \"${\" +propsNamespace +\".password}\");\n    \n    EasyMock.expect(dataSource.getConnection(user, plainPassword)).andReturn(\n             connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"user\", user);\n    values.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    values.put(\"password\", encryptedPassword);\n    context.getVariableResolver().addNamespace(propsNamespace, values);\n    \n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    //connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsEncryptedAndResolved() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    String user = \"Fred\";\n    String plainPassword = \"MyPassword\";\n    String encryptedPassword = \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\";\n    String propsNamespace = \"exampleNamespace\";\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    props.put(\"user\", \"${\" +propsNamespace +\".user}\");\n    props.put(\"encryptKeyFile\", \"${\" +propsNamespace +\".encryptKeyFile}\");\n    props.put(\"password\", \"${\" +propsNamespace +\".password}\");\n\n    when(dataSource.getConnection(user, plainPassword)).thenReturn(\n             connection);\n\n    Map<String,Object> values = new HashMap<>();\n    values.put(\"user\", user);\n    values.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    values.put(\"password\", encryptedPassword);\n    context.getVariableResolver().addNamespace(propsNamespace, values);\n\n    jdbcDataSource.init(context, props);\n    Connection conn = jdbcDataSource.getConnection();\n\n    verify(connection).setAutoCommit(false);\n    verify(dataSource).getConnection(user, plainPassword);\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsEncryptedAndResolved() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n    \n    String user = \"Fred\";\n    String plainPassword = \"MyPassword\";\n    String encryptedPassword = \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\";\n    String propsNamespace = \"exampleNamespace\";\n    \n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    \n    props.put(\"user\", \"${\" +propsNamespace +\".user}\");\n    props.put(\"encryptKeyFile\", \"${\" +propsNamespace +\".encryptKeyFile}\");\n    props.put(\"password\", \"${\" +propsNamespace +\".password}\");\n    \n    EasyMock.expect(dataSource.getConnection(user, plainPassword)).andReturn(\n             connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"user\", user);\n    values.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    values.put(\"password\", encryptedPassword);\n    context.getVariableResolver().addNamespace(propsNamespace, values);\n    \n    jdbcDataSource.init(context, props);\n\n    connection.setAutoCommit(false);\n    //connection.setHoldability(1);\n\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.getConnection();\n\n    mockControl.verify();\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsEncryptedAndResolved().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsEncryptedAndResolved() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    String user = \"Fred\";\n    String plainPassword = \"MyPassword\";\n    String encryptedPassword = \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\";\n    String propsNamespace = \"exampleNamespace\";\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    props.put(\"user\", \"${\" +propsNamespace +\".user}\");\n    props.put(\"encryptKeyFile\", \"${\" +propsNamespace +\".encryptKeyFile}\");\n    props.put(\"password\", \"${\" +propsNamespace +\".password}\");\n\n    when(dataSource.getConnection(user, plainPassword)).thenReturn(\n             connection);\n\n    Map<String,Object> values = new HashMap<>();\n    values.put(\"user\", user);\n    values.put(\"encryptKeyFile\", createEncryptionKeyFile());\n    values.put(\"password\", encryptedPassword);\n    context.getVariableResolver().addNamespace(propsNamespace, values);\n\n    jdbcDataSource.init(context, props);\n    Connection conn = jdbcDataSource.getConnection();\n\n    verify(connection).setAutoCommit(false);\n    verify(dataSource).getConnection(user, plainPassword);\n\n    assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0957b9b8725b7ad93845495d2512df18cd240731"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"0957b9b8725b7ad93845495d2512df18cd240731":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0957b9b8725b7ad93845495d2512df18cd240731"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0957b9b8725b7ad93845495d2512df18cd240731","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"0957b9b8725b7ad93845495d2512df18cd240731":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}