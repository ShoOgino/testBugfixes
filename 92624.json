{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":["a6a5c1c40529f15b445e6720dfde1967e139bff1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2d9523abb6906938bf5685963ce2d30d541cd7","date":1544417732,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(220000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(45000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef3f6b8f4762c5909de07fd79efa66ad1ba9a9d","date":1544457778,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(320000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(220000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460e835293fb6c26202eea1ba4ac24739db1755b","date":1544540322,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(320000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0abaca9e5481b5c3660805111683e8ce53bef3","date":1544554124,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(320000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\")\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3904abfa513b750aabc2b2fba5336ba86ed32490","date":1547515000,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\")\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215b6316d63375fce4dfbf1f55967c739795a2f9","date":1551465498,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    String newNode = cluster.simAddNode();\n\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(420000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger1',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger2',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    String newNode = cluster.simAddNode();\n\n    assertTrue(\"Both triggers did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger1',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_lost_trigger2',\" +\n       \"'event' : 'nodeLost',\" +\n       \"'waitFor' : '0s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // wait until the two instances of action are created\n    assertTrue(\"Two TriggerAction instances were not created \"+\n               \"even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    // AwaitsFix - maybe related to leaders not always getting elected in sim\n//    if (!triggerFiredLatch.await(34000 / SPEED, TimeUnit.MILLISECONDS)) {\n//      fail(\"Both triggers should have fired by now\");\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"460e835293fb6c26202eea1ba4ac24739db1755b":["8ef3f6b8f4762c5909de07fd79efa66ad1ba9a9d"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef2d9523abb6906938bf5685963ce2d30d541cd7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"8ef3f6b8f4762c5909de07fd79efa66ad1ba9a9d":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["8ef3f6b8f4762c5909de07fd79efa66ad1ba9a9d","460e835293fb6c26202eea1ba4ac24739db1755b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"]},"commit2Childs":{"460e835293fb6c26202eea1ba4ac24739db1755b":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ef2d9523abb6906938bf5685963ce2d30d541cd7":["8ef3f6b8f4762c5909de07fd79efa66ad1ba9a9d"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"8ef3f6b8f4762c5909de07fd79efa66ad1ba9a9d":["460e835293fb6c26202eea1ba4ac24739db1755b","7e0abaca9e5481b5c3660805111683e8ce53bef3"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3f504512a03d978990cbff30db0522b354e846db"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}