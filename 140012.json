{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Number-&-Comparable[T]]_calculateNumberStat(ArrayList[T],String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Number-&-Comparable[T]]_calculateNumberStat(ArrayList[T],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Number-&-Comparable[T]]_calculateNumberStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Number & Comparable<T>> Double calculateNumberStat(ArrayList<T> list, String stat) {\n    Double result;\n    if (stat.equals(\"median\")) {\n      result = MedianCalculator.getMedian(list);\n    } else if (stat.equals(\"mean\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d/list.size());\n    } else if (stat.equals(\"sum\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"sumOfSquares\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue()*element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"stddev\")) {\n      double sum = 0;\n      double sumSquares = 0;\n      for (T element : list) {\n        sum += element.doubleValue();\n        sumSquares += element.doubleValue()*element.doubleValue();\n      }\n      result = Math.sqrt(sumSquares/list.size()-sum*sum/(list.size()*list.size()));\n    } else {\n      throw new IllegalArgumentException();\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Number & Comparable<T>> Double calculateNumberStat(ArrayList<T> list, String stat) {\n    Double result;\n    if (stat.equals(\"median\")) {\n      result = MedianCalculator.getMedian(list);\n    } else if (stat.equals(\"mean\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d/list.size());\n    } else if (stat.equals(\"sum\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"sumOfSquares\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue()*element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"stddev\")) {\n      double sum = 0;\n      double sumSquares = 0;\n      for (T element : list) {\n        sum += element.doubleValue();\n        sumSquares += element.doubleValue()*element.doubleValue();\n      }\n      result = Math.sqrt(sumSquares/list.size()-sum*sum/(list.size()*list.size()));\n    } else {\n      throw new IllegalArgumentException();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyAbstractAnalyticsTest#[T-extends-Number-&-Comparable[T]]_calculateNumberStat(ArrayList[T],String).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Number-&-Comparable[T]]_calculateNumberStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Number & Comparable<T>> Double calculateNumberStat(ArrayList<T> list, String stat) {\n    Double result;\n    if (stat.equals(\"median\")) {\n      result = MedianCalculator.getMedian(list);\n    } else if (stat.equals(\"mean\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d/list.size());\n    } else if (stat.equals(\"sum\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"sumOfSquares\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue()*element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"stddev\")) {\n      double sum = 0;\n      double sumSquares = 0;\n      for (T element : list) {\n        sum += element.doubleValue();\n        sumSquares += element.doubleValue()*element.doubleValue();\n      }\n      result = Math.sqrt(sumSquares/list.size()-sum*sum/(list.size()*list.size()));\n    } else {\n      throw new IllegalArgumentException();\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Number & Comparable<T>> Double calculateNumberStat(ArrayList<T> list, String stat) {\n    Double result;\n    if (stat.equals(\"median\")) {\n      result = MedianCalculator.getMedian(list);\n    } else if (stat.equals(\"mean\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d/list.size());\n    } else if (stat.equals(\"sum\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"sumOfSquares\")) {\n      double d = 0;\n      for (T element : list) {\n        d += element.doubleValue()*element.doubleValue();\n      }\n      result = Double.valueOf(d);\n    } else if (stat.equals(\"stddev\")) {\n      double sum = 0;\n      double sumSquares = 0;\n      for (T element : list) {\n        sum += element.doubleValue();\n        sumSquares += element.doubleValue()*element.doubleValue();\n      }\n      result = Math.sqrt(sumSquares/list.size()-sum*sum/(list.size()*list.size()));\n    } else {\n      throw new IllegalArgumentException();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}