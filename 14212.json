{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,StandardPostingsWriter).mjava","sourceNew":"  /** If docFreq <= maxPulsingDocFreq, its postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPulsingDocFreq, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pendingDocs = new Document[maxPulsingDocFreq];\n    for(int i=0;i<maxPulsingDocFreq;i++) {\n      pendingDocs[i] = new Document();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when doc freq is higher than our cutoff\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If docFreq <= maxPulsingDocFreq, its postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPulsingDocFreq, StandardPostingsWriter wrappedPostingsWriter) throws IOException {\n    super();\n\n    pendingDocs = new Document[maxPulsingDocFreq];\n    for(int i=0;i<maxPulsingDocFreq;i++) {\n      pendingDocs[i] = new Document();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when doc freq is higher than our cutoff\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"/dev/null","sourceNew":"  /** If docFreq <= maxPulsingDocFreq, its postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPulsingDocFreq, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pendingDocs = new Document[maxPulsingDocFreq];\n    for(int i=0;i<maxPulsingDocFreq;i++) {\n      pendingDocs[i] = new Document();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when doc freq is higher than our cutoff\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If docFreq <= maxPulsingDocFreq, its postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPulsingDocFreq, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pendingDocs = new Document[maxPulsingDocFreq];\n    for(int i=0;i<maxPulsingDocFreq;i++) {\n      pendingDocs[i] = new Document();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when doc freq is higher than our cutoff\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If docFreq <= maxPulsingDocFreq, its postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPulsingDocFreq, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pendingDocs = new Document[maxPulsingDocFreq];\n    for(int i=0;i<maxPulsingDocFreq;i++) {\n      pendingDocs[i] = new Document();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when doc freq is higher than our cutoff\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If docFreq <= maxPulsingDocFreq, its postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPulsingDocFreq, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pendingDocs = new Document[maxPulsingDocFreq];\n    for(int i=0;i<maxPulsingDocFreq;i++) {\n      pendingDocs[i] = new Document();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when doc freq is higher than our cutoff\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    super();\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#PulsingPostingsWriterImpl(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriterImpl(int maxPositions, PostingsWriterBase wrappedPostingsWriter) throws IOException {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["efb7a19703a037c29e30440260d393500febc1f4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["3d53c3f769ca0f9e7434937b792877770271aecf","efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["3d53c3f769ca0f9e7434937b792877770271aecf"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["99cf56f3a650b908f7017a72f9d23940418f8a52","3d53c3f769ca0f9e7434937b792877770271aecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3d53c3f769ca0f9e7434937b792877770271aecf"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"efb7a19703a037c29e30440260d393500febc1f4":["60ba444201d2570214b6fcf1d15600dc1a01f548","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"3d53c3f769ca0f9e7434937b792877770271aecf":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","efb7a19703a037c29e30440260d393500febc1f4","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["29ef99d61cda9641b6250bf9567329a6e65f901d","3d53c3f769ca0f9e7434937b792877770271aecf","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}