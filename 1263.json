{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n      \n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.result, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.result, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.result[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n      \n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.result, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.result, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.result[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n      \n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.result, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n      \n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.result, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.result, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.result[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testAllUnicodeChars().mjava","sourceNew":null,"sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n      \n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.result, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}