{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7424161ac990ef8f959f09ee516148e4d12c48bc","date":1336236796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["7424161ac990ef8f959f09ee516148e4d12c48bc","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}