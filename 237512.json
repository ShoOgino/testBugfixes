{"path":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42fa1b1a7816a1e1853b685183b07a976bc37560","date":1356094868,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, List<Object>>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, List<Object>>>();\n              Map<String, List<Object>> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, List<Object>>(1);\n                updateMap.put(name, extendedValues);\n              }\n              List<Object> values = extendedValues.get(update);\n              if (values == null) {\n                values = new ArrayList<Object>();\n                extendedValues.put(update, values);\n              }\n              values.add(v);\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, List<Object>>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, List<Object>> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["87f599a2859f134da31a0566d51ae9171110b849"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87f599a2859f134da31a0566d51ae9171110b849","date":1356707023,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, List<Object>>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, List<Object>>>();\n              Map<String, List<Object>> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, List<Object>>(1);\n                updateMap.put(name, extendedValues);\n              }\n              List<Object> values = extendedValues.get(update);\n              if (values == null) {\n                values = new ArrayList<Object>();\n                extendedValues.put(update, values);\n              }\n              values.add(v);\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, List<Object>>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, List<Object>> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":["42fa1b1a7816a1e1853b685183b07a976bc37560"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe45a4a378d86ff4d0ce63d3355382ed0d9f6204","date":1363237005,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          isNull = false;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              log.warn(\"unexpected XML tag doc/\" + localName);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"unexpected XML tag doc/\" + localName);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"Unknown attribute doc/field/@\" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          isNull = false;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              log.warn(\"unexpected XML tag doc/\" + localName);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"unexpected XML tag doc/\" + localName);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"Unknown attribute doc/field/@\" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          isNull = false;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0","date":1392228582,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              log.warn(\"unexpected XML tag doc/\" + localName);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"unexpected XML tag doc/\" + localName);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"Unknown attribute doc/field/@\" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<String, Map<String, Object>>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<String, Object>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<Object>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (\"name\".equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v);\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            boost = 1.0f;\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                boost = Float.parseFloat(attrVal);\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value, 1.0f);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05216852560771de14a5513cd4afd45c8655d1ee","date":1533664331,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    boolean isLabeledChildDoc = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            if(!isLabeledChildDoc){\n              // only add data if this is not a childDoc, since it was added already\n              doc.addField(name, v);\n            } else {\n              // reset so next field is not treated as child doc\n              isLabeledChildDoc = false;\n            }\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if(name != null) {\n              // flag to prevent spaces after doc from being added\n              isLabeledChildDoc = true;\n              if(!doc.containsKey(name)) {\n                doc.setField(name, Lists.newArrayList());\n              }\n              doc.addField(name, readDoc(parser));\n              break;\n            }\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            doc.addField(name, v);\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr: {}\", attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    boolean isLabeledChildDoc = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            if(!isLabeledChildDoc){\n              // only add data if this is not a childDoc, since it was added already\n              doc.addField(name, v);\n            } else {\n              // reset so next field is not treated as child doc\n              isLabeledChildDoc = false;\n            }\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if(name != null) {\n              // flag to prevent spaces after doc from being added\n              isLabeledChildDoc = true;\n              if(!doc.containsKey(name)) {\n                doc.setField(name, Lists.newArrayList());\n              }\n              doc.addField(name, readDoc(parser));\n              break;\n            }\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: {}\", attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr:\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    boolean isLabeledChildDoc = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            if(!isLabeledChildDoc){\n              // only add data if this is not a childDoc, since it was added already\n              doc.addField(name, v);\n            } else {\n              // reset so next field is not treated as child doc\n              isLabeledChildDoc = false;\n            }\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if(name != null) {\n              // flag to prevent spaces after doc from being added\n              isLabeledChildDoc = true;\n              if(!doc.containsKey(name)) {\n                doc.setField(name, Lists.newArrayList());\n              }\n              doc.addField(name, readDoc(parser));\n              break;\n            }\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: \" + attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr: {}\", attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    boolean isLabeledChildDoc = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  @SuppressWarnings({\"rawtypes\"})\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            if(!isLabeledChildDoc){\n              // only add data if this is not a childDoc, since it was added already\n              doc.addField(name, v);\n            } else {\n              // reset so next field is not treated as child doc\n              isLabeledChildDoc = false;\n            }\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if(name != null) {\n              // flag to prevent spaces after doc from being added\n              isLabeledChildDoc = true;\n              if(!doc.containsKey(name)) {\n                doc.setField(name, Lists.newArrayList());\n              }\n              doc.addField(name, readDoc(parser));\n              break;\n            }\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: {}\", attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        String message = \"Ignoring document boost: \" + parser.getAttributeValue(i) + \" as index-time boosts are not supported anymore\";\n        if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n          log.warn(message);\n        } else {\n          log.debug(message);\n        }\n      } else {\n        log.warn(\"XML element <doc> has invalid XML attr: {}\", attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    boolean isNull = false;\n    boolean isLabeledChildDoc = false;\n    String update = null;\n    Collection<SolrInputDocument> subDocs = null;\n    Map<String, Map<String, Object>> updateMap = null;\n    boolean complete = false;\n    while (!complete) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            if (subDocs != null && !subDocs.isEmpty()) {\n              doc.addChildDocuments(subDocs);\n              subDocs = null;\n            }\n            complete = true;\n            break;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            // should I warn in some text has been found too\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              if (updateMap == null) updateMap = new HashMap<>();\n              Map<String, Object> extendedValues = updateMap.get(name);\n              if (extendedValues == null) {\n                extendedValues = new HashMap<>(1);\n                updateMap.put(name, extendedValues);\n              }\n              Object val = extendedValues.get(update);\n              if (val == null) {\n                extendedValues.put(update, v);\n              } else {\n                // multiple val are present\n                if (val instanceof List) {\n                  List list = (List) val;\n                  list.add(v);\n                } else {\n                  List<Object> values = new ArrayList<>();\n                  values.add(val);\n                  values.add(v);\n                  extendedValues.put(update, values);\n                }\n              }\n              break;\n            }\n            if(!isLabeledChildDoc){\n              // only add data if this is not a childDoc, since it was added already\n              doc.addField(name, v);\n            } else {\n              // reset so next field is not treated as child doc\n              isLabeledChildDoc = false;\n            }\n            // field is over\n            name = null;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (\"doc\".equals(localName)) {\n            if(name != null) {\n              // flag to prevent spaces after doc from being added\n              isLabeledChildDoc = true;\n              if(!doc.containsKey(name)) {\n                doc.setField(name, Lists.newArrayList());\n              }\n              doc.addField(name, readDoc(parser));\n              break;\n            }\n            if (subDocs == null)\n              subDocs = Lists.newArrayList();\n            subDocs.add(readDoc(parser));\n          }\n          else {\n            if (!\"field\".equals(localName)) {\n              String msg = \"XML element <doc> has invalid XML child element: \" + localName;\n              log.warn(msg);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                      msg);\n            }\n            update = null;\n            isNull = false;\n            String attrVal = \"\";\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              attrName = parser.getAttributeLocalName(i);\n              attrVal = parser.getAttributeValue(i);\n              if (NAME.equals(attrName)) {\n                name = attrVal;\n              } else if (\"boost\".equals(attrName)) {\n                String message = \"Ignoring field boost: \" + attrVal + \" as index-time boosts are not supported anymore\";\n                if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {\n                  log.warn(message);\n                } else {\n                  log.debug(message);\n                }\n              } else if (\"null\".equals(attrName)) {\n                isNull = StrUtils.parseBoolean(attrVal);\n              } else if (\"update\".equals(attrName)) {\n                update = attrVal;\n              } else {\n                log.warn(\"XML element <field> has invalid XML attr: {}\", attrName);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    if (updateMap != null)  {\n      for (Map.Entry<String, Map<String, Object>> entry : updateMap.entrySet()) {\n        name = entry.getKey();\n        Map<String, Object> value = entry.getValue();\n        doc.addField(name, value);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["042e4d934397657ba04c82b46cc5665076bc5c58","87f599a2859f134da31a0566d51ae9171110b849"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3949dec17d80cd3a4c6be8999f4e0f44583b3c0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["fe45a4a378d86ff4d0ce63d3355382ed0d9f6204","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["fe45a4a378d86ff4d0ce63d3355382ed0d9f6204"],"87f599a2859f134da31a0566d51ae9171110b849":["42fa1b1a7816a1e1853b685183b07a976bc37560"],"575e66bd4b2349209027f6801184da7fc3cba13f":["05216852560771de14a5513cd4afd45c8655d1ee"],"05216852560771de14a5513cd4afd45c8655d1ee":["acd9883560fd89e6448b2b447302fe543040cd4f"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["575e66bd4b2349209027f6801184da7fc3cba13f"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1390137e395d2f07f9ba5b8c43d293befe84d563"],"42fa1b1a7816a1e1853b685183b07a976bc37560":["042e4d934397657ba04c82b46cc5665076bc5c58"],"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"fe45a4a378d86ff4d0ce63d3355382ed0d9f6204":["87f599a2859f134da31a0566d51ae9171110b849"],"acd9883560fd89e6448b2b447302fe543040cd4f":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d3949dec17d80cd3a4c6be8999f4e0f44583b3c0"],"87f599a2859f134da31a0566d51ae9171110b849":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe45a4a378d86ff4d0ce63d3355382ed0d9f6204"],"575e66bd4b2349209027f6801184da7fc3cba13f":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"05216852560771de14a5513cd4afd45c8655d1ee":["575e66bd4b2349209027f6801184da7fc3cba13f"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"042e4d934397657ba04c82b46cc5665076bc5c58":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42fa1b1a7816a1e1853b685183b07a976bc37560"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"42fa1b1a7816a1e1853b685183b07a976bc37560":["87f599a2859f134da31a0566d51ae9171110b849"],"d3949dec17d80cd3a4c6be8999f4e0f44583b3c0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe45a4a378d86ff4d0ce63d3355382ed0d9f6204":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"acd9883560fd89e6448b2b447302fe543040cd4f":["05216852560771de14a5513cd4afd45c8655d1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}