{"path":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":["7cdac6591b64f43f87663e70518d79dd137454b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      try {\n        log.info(\"newest commit = \" + newest.getGeneration() + newest.getFileNames().toString());\n      } catch (IOException e1) {\n        throw new RuntimeException();\n      }\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      try {\n        log.info(\"newest commit = \" + newest.getGeneration() + newest.getFileNames().toString());\n      } catch (IOException e1) {\n        throw new RuntimeException();\n      }\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getGeneration());\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0b323190a01ef99516cc372f1ac90ac6e467501","date":1366744839,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      // SOLR-4547: Removed the filenames from this log entry because this\n      // method is only called from methods that have just logged them\n      // at DEBUG.\n      log.info(\"newest commit generation = \" + newest.getGeneration());\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      try {\n        log.info(\"newest commit = \" + newest.getGeneration() + newest.getFileNames().toString());\n      } catch (IOException e1) {\n        throw new RuntimeException();\n      }\n\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7951c2882ffa4f7ac92f0af23dac5c66a981f89c","date":1371494272,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[#-extends-IndexCommit]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<? extends IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      // SOLR-4547: Removed the filenames from this log entry because this\n      // method is only called from methods that have just logged them\n      // at DEBUG.\n      log.info(\"newest commit generation = \" + newest.getGeneration());\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      // SOLR-4547: Removed the filenames from this log entry because this\n      // method is only called from methods that have just logged them\n      // at DEBUG.\n      log.info(\"newest commit generation = \" + newest.getGeneration());\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":null,"sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      // SOLR-4547: Removed the filenames from this log entry because this\n      // method is only called from methods that have just logged them\n      // at DEBUG.\n      log.info(\"newest commit generation = \" + newest.getGeneration());\n      int singleSegKept = (newest.getSegmentCount() == 1) ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.ROOT);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (IndexDeletionPolicyWrapper.getCommitTimestamp(commit) < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (singleSegKept < maxOptimizedCommitsToKeep && commit.getSegmentCount() == 1) {\n          totalKept++;\n          singleSegKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["e0b323190a01ef99516cc372f1ac90ac6e467501","7951c2882ffa4f7ac92f0af23dac5c66a981f89c"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c26f00b574427b55127e869b935845554afde1fa"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","2acf500f78aa12b92e371fd89c719291986b6b90"],"e0b323190a01ef99516cc372f1ac90ac6e467501":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","2acf500f78aa12b92e371fd89c719291986b6b90"],"7951c2882ffa4f7ac92f0af23dac5c66a981f89c":["e0b323190a01ef99516cc372f1ac90ac6e467501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["2acf500f78aa12b92e371fd89c719291986b6b90","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7951c2882ffa4f7ac92f0af23dac5c66a981f89c"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","817882884229bace7dc5d1b75f6b0e4aa1e47122","fe33227f6805edab2036cbb80645cc4e2d1fa424","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c26f00b574427b55127e869b935845554afde1fa":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["e0b323190a01ef99516cc372f1ac90ac6e467501","f2126b84bd093fa3d921582a109a0ee578c28126"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d9405f486872f1e416304dfe389741f4ee2f8a4d","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","f2126b84bd093fa3d921582a109a0ee578c28126"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"e0b323190a01ef99516cc372f1ac90ac6e467501":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7951c2882ffa4f7ac92f0af23dac5c66a981f89c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"7951c2882ffa4f7ac92f0af23dac5c66a981f89c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","817882884229bace7dc5d1b75f6b0e4aa1e47122","fe33227f6805edab2036cbb80645cc4e2d1fa424","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}