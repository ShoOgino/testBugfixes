{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c7c5f2319949ba567dd867f78f86ea8ff0f1476","date":1375469665,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    readRootArcs(cachedRootArcs);\n    \n    assert setAssertingRootArcs(cachedRootArcs);\n    assert assertRootArcs();\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    readRootArcs(cachedRootArcs);\n    \n    assert setAssertingRootArcs(cachedRootArcs);\n    assert assertRootArcs();\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b90cb97974607dd1213a42df0918898461711","date":1408023569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    readRootArcs(cachedRootArcs);\n    cachedArcsBytesUsed += ramBytesUsed(cachedRootArcs);\n    \n    assert setAssertingRootArcs(cachedRootArcs);\n    assert assertRootArcs();\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    readRootArcs(cachedRootArcs);\n    \n    assert setAssertingRootArcs(cachedRootArcs);\n    assert assertRootArcs();\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f32ed90e12610550e1363aea43afe3d6e292cf9","date":1418230105,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target, arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < arcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    readRootArcs(cachedRootArcs);\n    cachedArcsBytesUsed += ramBytesUsed(cachedRootArcs);\n    \n    assert setAssertingRootArcs(cachedRootArcs);\n    assert assertRootArcs();\n  }\n\n","bugFix":["296b90cb97974607dd1213a42df0918898461711","3c7c5f2319949ba567dd867f78f86ea8ff0f1476","b3be20ca1091c0b7cdb2308b9023606a5e451cec","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target(), arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label() != END_LABEL;\n        if (arc.label() < arcs.length) {\n          arcs[arc.label()] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","sourceOld":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target, arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < arcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target(), arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label() != END_LABEL;\n        if (arc.label() < arcs.length) {\n          arcs[arc.label()] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","sourceOld":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target, arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < arcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target(), arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label() != END_LABEL;\n        if (arc.label() < arcs.length) {\n          arcs[arc.label()] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","sourceOld":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target(), arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label() != END_LABEL;\n        if (arc.label() < arcs.length) {\n          arcs[arc.label()] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfe04a006c42318f41df58bdd061cc1065b5f688","date":1574780842,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":null,"sourceOld":"  // Optionally caches first 128 labels\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  private void cacheRootArcs() throws IOException {\n    // We should only be called once per FST:\n    assert cachedArcsBytesUsed == 0;\n\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    if (targetHasArcs(arc)) {\n      final BytesReader in = getBytesReader();\n      Arc<T>[] arcs = (Arc<T>[]) new Arc[0x80];\n      readFirstRealTargetArc(arc.target(), arc, in);\n      int count = 0;\n      while(true) {\n        assert arc.label() != END_LABEL;\n        if (arc.label() < arcs.length) {\n          arcs[arc.label()] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n        count++;\n      }\n\n      int cacheRAM = (int) ramBytesUsed(arcs);\n\n      // Don't cache if there are only a few arcs or if the cache would use > 20% RAM of the FST itself:\n      if (count >= FIXED_LENGTH_ARC_SHALLOW_NUM_ARCS && cacheRAM < ramBytesUsed()/5) {\n        cachedRootArcs = arcs;\n        cachedArcsBytesUsed = cacheRAM;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82557a475db3e0849171dc0be5b02e3ae0745ddb":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71d31a7d5773508492505519bb5230b87c8937ad":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"296b90cb97974607dd1213a42df0918898461711":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7f32ed90e12610550e1363aea43afe3d6e292cf9","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cfe04a006c42318f41df58bdd061cc1065b5f688":["71d31a7d5773508492505519bb5230b87c8937ad"],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["296b90cb97974607dd1213a42df0918898461711"]},"commit2Childs":{"82557a475db3e0849171dc0be5b02e3ae0745ddb":["c4015cd39dff8d4dec562d909f9766debac53aa6","3c7c5f2319949ba567dd867f78f86ea8ff0f1476","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["296b90cb97974607dd1213a42df0918898461711"],"71d31a7d5773508492505519bb5230b87c8937ad":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"296b90cb97974607dd1213a42df0918898461711":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cfe04a006c42318f41df58bdd061cc1065b5f688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["f8061ddd97f3352007d927dae445884a6f3d857b","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f8061ddd97f3352007d927dae445884a6f3d857b","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}