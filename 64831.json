{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","commits":[{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#setBottom(int).mjava","sourceNew":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = encodeLatitude(box.minLat);\n      maxLat = encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = encodeLongitude(box.minLon);\n      } else {\n        minLon = encodeLongitude(box.minLon);\n        maxLon = encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","sourceOld":"  @Override\n  public void setBottom(int slot) {\n    bottom = values[slot];\n    // make bounding box(es) to exclude non-competitive hits, but start\n    // sampling if we get called way too much: don't make gobs of bounding\n    // boxes if comparator hits a worst case order (e.g. backwards distance order)\n    if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n      Rectangle box = Rectangle.fromPointDistance(latitude, longitude, haversin2(bottom));\n      // pre-encode our box to our integer encoding, so we don't have to decode \n      // to double values for uncompetitive hits. This has some cost!\n      minLat = encodeLatitude(box.minLat);\n      maxLat = encodeLatitude(box.maxLat);\n      if (box.crossesDateline()) {\n        // box1\n        minLon = Integer.MIN_VALUE;\n        maxLon = encodeLongitude(box.maxLon);\n        // box2\n        minLon2 = encodeLongitude(box.minLon);\n      } else {\n        minLon = encodeLongitude(box.minLon);\n        maxLon = encodeLongitude(box.maxLon);\n        // disable box2\n        minLon2 = Integer.MAX_VALUE;\n      }\n    }\n    setBottomCounter++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}