{"path":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c","date":1378490020,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        cache.put(field, uifPlaceholder); // This thread will load this field, don't let other threads try.\n      } else {\n        if (uif.isPlaceholder == false) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif.isPlaceholder == false) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  //////////////////////////////////////////////////////////////////\n  //////////////////////////// caching /////////////////////////////\n  //////////////////////////////////////////////////////////////////\n  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n\n    UnInvertedField uif = cache.get(field);\n    if (uif == null) {\n      synchronized (cache) {\n        uif = cache.get(field);\n        if (uif == null) {\n          uif = new UnInvertedField(field, searcher);\n          cache.put(field, uif);\n        }\n      }\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e5082b22185dc45d91bf92af6c331b02409dad","date":1405981771,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        /**\n         * We use this place holder object to pull the UninvertedField construction out of the sync\n         * so that if many fields are accessed in a short time, the UninvertedField can be\n         * built for these fields in parallel rather than sequentially.\n         */\n        cache.put(field, uifPlaceholder);\n      } else {\n        if (uif != uifPlaceholder) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif != uifPlaceholder) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        cache.put(field, uifPlaceholder); // This thread will load this field, don't let other threads try.\n      } else {\n        if (uif.isPlaceholder == false) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif.isPlaceholder == false) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        /**\n         * We use this place holder object to pull the UninvertedField construction out of the sync\n         * so that if many fields are accessed in a short time, the UninvertedField can be\n         * built for these fields in parallel rather than sequentially.\n         */\n        cache.put(field, uifPlaceholder);\n      } else {\n        if (uif != uifPlaceholder) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif != uifPlaceholder) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        /**\n         * We use this place holder object to pull the UninvertedField construction out of the sync\n         * so that if many fields are accessed in a short time, the UninvertedField can be\n         * built for these fields in parallel rather than sequentially.\n         */\n        cache.put(field, uifPlaceholder);\n      } else {\n        if (uif != uifPlaceholder) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif != uifPlaceholder) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#getUnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        /**\n         * We use this place holder object to pull the UninvertedField construction out of the sync\n         * so that if many fields are accessed in a short time, the UninvertedField can be\n         * built for these fields in parallel rather than sequentially.\n         */\n        cache.put(field, uifPlaceholder);\n      } else {\n        if (uif != uifPlaceholder) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif != uifPlaceholder) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","sourceOld":"  public static UnInvertedField getUnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    SolrCache<String,UnInvertedField> cache = searcher.getFieldValueCache();\n    if (cache == null) {\n      return new UnInvertedField(field, searcher);\n    }\n    UnInvertedField uif = null;\n    Boolean doWait = false;\n    synchronized (cache) {\n      uif = cache.get(field);\n      if (uif == null) {\n        /**\n         * We use this place holder object to pull the UninvertedField construction out of the sync\n         * so that if many fields are accessed in a short time, the UninvertedField can be\n         * built for these fields in parallel rather than sequentially.\n         */\n        cache.put(field, uifPlaceholder);\n      } else {\n        if (uif != uifPlaceholder) {\n          return uif;\n        }\n        doWait = true; // Someone else has put the place holder in, wait for that to complete.\n      }\n    }\n    while (doWait) {\n      try {\n        synchronized (cache) {\n          uif = cache.get(field); // Should at least return the placeholder, NPE if not is OK.\n          if (uif != uifPlaceholder) { // OK, another thread put this in the cache we should be good.\n            return uif;\n          }\n          cache.wait();\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted in getUninvertedField.\");\n      }\n    }\n\n    uif = new UnInvertedField(field, searcher);\n    synchronized (cache) {\n      cache.put(field, uif); // Note, this cleverly replaces the placeholder.\n      cache.notifyAll();\n    }\n\n    return uif;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["23e5082b22185dc45d91bf92af6c331b02409dad","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23e5082b22185dc45d91bf92af6c331b02409dad":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["23e5082b22185dc45d91bf92af6c331b02409dad"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"23e5082b22185dc45d91bf92af6c331b02409dad":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["23e5082b22185dc45d91bf92af6c331b02409dad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}