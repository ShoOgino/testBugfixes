{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t    NamedList response, boolean suggestionsMayOverlap) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations, suggestionsMayOverlap);\n    //by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ad9ec888e587ca9a3279368245cdf00aabdc108":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ad9ec888e587ca9a3279368245cdf00aabdc108"]},"commit2Childs":{"0ad9ec888e587ca9a3279368245cdf00aabdc108":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}