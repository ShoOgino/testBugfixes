{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","commits":[{"id":"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","date":1320437768,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      IndexReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd328b3cdb3f944c5c765d81bb246545f85932dd","date":1327857991,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      IndexReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      IndexReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd328b3cdb3f944c5c765d81bb246545f85932dd":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","bd328b3cdb3f944c5c765d81bb246545f85932dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"bd328b3cdb3f944c5c765d81bb246545f85932dd":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["bd328b3cdb3f944c5c765d81bb246545f85932dd","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}