{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34ca474b88b90218279fc4b893727bcefbb1f725","date":1327855341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    DirectoryReader r = IndexReader.open(benchmark.getRunData().getDirectory());\n    DocTermsIndex idx = FieldCache.DEFAULT.getTermsIndex(new SlowCompositeReaderWrapper(r), \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    BytesRef br = new BytesRef();\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.getTerm(i, br));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"34ca474b88b90218279fc4b893727bcefbb1f725":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","34ca474b88b90218279fc4b893727bcefbb1f725"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","70ad682703b8585f5d0a637efec044d57ec05efb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"34ca474b88b90218279fc4b893727bcefbb1f725":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["34ca474b88b90218279fc4b893727bcefbb1f725","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}