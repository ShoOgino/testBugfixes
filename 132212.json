{"path":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","commits":[{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * When this method is used the {@link #explain(int)} method should not be\n   * used. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * When this method is used the {@link #explain(int)} method should not be\n   * used. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * When this method is used the {@link #explain(int)} method should not be\n   * used. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * When this method is used the {@link #explain(int)} method should not be\n   * used. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Advances to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return the document whose number is greater than or equal to the given\n   *         target, or -1 if none exist.\n   */\n  @Override\n  public int advance(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return currentDoc = NO_MORE_DOCS;\n    }\n    if (target <= currentDoc) {\n      return currentDoc;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent() ? currentDoc : (currentDoc = NO_MORE_DOCS);\n      } else if (!scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return currentDoc = NO_MORE_DOCS;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"30a558487f2298c2c19ceca9103c1b6865d64708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}