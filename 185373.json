{"path":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6d5c544b159d10e466963873aff1582863f2b6e","date":1293373542,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#commit(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    synchronized (this) {\n      pset.clear();\n      closeSearcher();  // flush any deletes\n      if (cmd.optimize || cmd.expungeDeletes) {\n        openWriter();  // writer needs to be open to optimize\n        if(cmd.optimize) writer.optimize(cmd.maxOptimizeSegments);\n        if(cmd.expungeDeletes) writer.expungeDeletes(cmd.expungeDeletes);\n      }\n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n\n      core.getSearcher(true,false,waitSearcher);\n    }\n\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n      try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["28427ef110c4c5bf5b4057731b83110bd1e13724","e6d5c544b159d10e466963873aff1582863f2b6e"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["5f4e87790277826a2aea119328600dfb07761f32","e6d5c544b159d10e466963873aff1582863f2b6e"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e6d5c544b159d10e466963873aff1582863f2b6e":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["1da8d55113b689b06716246649de6f62430f15c0"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","28427ef110c4c5bf5b4057731b83110bd1e13724"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6d5c544b159d10e466963873aff1582863f2b6e"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["70ad682703b8585f5d0a637efec044d57ec05efb","e6d5c544b159d10e466963873aff1582863f2b6e","5f4e87790277826a2aea119328600dfb07761f32"],"e6d5c544b159d10e466963873aff1582863f2b6e":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}