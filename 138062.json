{"path":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#testOptimizer().mjava","commits":[{"id":"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2","date":1505775734,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#testOptimizer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOptimizer() {\n    RetrieveFieldsOptimizer optimizer = new RetrieveFieldsOptimizer(\n        new HashSet<>(Arrays.asList(\"id\", \"title\")),\n        new HashSet<>()\n    );\n    optimizer.optimize(new HashSet<>(Arrays.asList(\"id\", \"title\")));\n    assertTrue(optimizer.returnDVFields());\n    assertFalse(optimizer.returnStoredFields());\n\n    optimizer = new RetrieveFieldsOptimizer(\n        new HashSet<>(Arrays.asList(\"id\", \"title\")),\n        new HashSet<>()\n    );\n    optimizer.optimize(new HashSet<>(Collections.singletonList(\"title\")));\n    assertFalse(optimizer.returnDVFields());\n    assertTrue(optimizer.returnStoredFields());\n\n    optimizer = new RetrieveFieldsOptimizer(\n        null,\n        new HashSet<>(Collections.singletonList(\"id\"))\n    );\n    optimizer.optimize(new HashSet<>(Collections.singletonList(\"id\")));\n    assertNull(optimizer.getStoredFields());\n    assertTrue(optimizer.getDvFields().contains(\"id\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#testOptimizer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOptimizer() {\n    RetrieveFieldsOptimizer optimizer = new RetrieveFieldsOptimizer(\n        new HashSet<>(Arrays.asList(\"id\", \"title\")),\n        new HashSet<>()\n    );\n    optimizer.optimize(new HashSet<>(Arrays.asList(\"id\", \"title\")));\n    assertTrue(optimizer.returnDVFields());\n    assertFalse(optimizer.returnStoredFields());\n\n    optimizer = new RetrieveFieldsOptimizer(\n        new HashSet<>(Arrays.asList(\"id\", \"title\")),\n        new HashSet<>()\n    );\n    optimizer.optimize(new HashSet<>(Collections.singletonList(\"title\")));\n    assertFalse(optimizer.returnDVFields());\n    assertTrue(optimizer.returnStoredFields());\n\n    optimizer = new RetrieveFieldsOptimizer(\n        null,\n        new HashSet<>(Collections.singletonList(\"id\"))\n    );\n    optimizer.optimize(new HashSet<>(Collections.singletonList(\"id\")));\n    assertNull(optimizer.getStoredFields());\n    assertTrue(optimizer.getDvFields().contains(\"id\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/response/TestRetrieveFieldsOptimizer#testOptimizer().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testOptimizer() {\n    RetrieveFieldsOptimizer optimizer = new RetrieveFieldsOptimizer(\n        new HashSet<>(Arrays.asList(\"id\", \"title\")),\n        new HashSet<>()\n    );\n    optimizer.optimize(new HashSet<>(Arrays.asList(\"id\", \"title\")));\n    assertTrue(optimizer.returnDVFields());\n    assertFalse(optimizer.returnStoredFields());\n\n    optimizer = new RetrieveFieldsOptimizer(\n        new HashSet<>(Arrays.asList(\"id\", \"title\")),\n        new HashSet<>()\n    );\n    optimizer.optimize(new HashSet<>(Collections.singletonList(\"title\")));\n    assertFalse(optimizer.returnDVFields());\n    assertTrue(optimizer.returnStoredFields());\n\n    optimizer = new RetrieveFieldsOptimizer(\n        null,\n        new HashSet<>(Collections.singletonList(\"id\"))\n    );\n    optimizer.optimize(new HashSet<>(Collections.singletonList(\"id\")));\n    assertNull(optimizer.getStoredFields());\n    assertTrue(optimizer.getDvFields().contains(\"id\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ecd141e96e7a7a65822d7fada5ddc585b21149"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["96ecd141e96e7a7a65822d7fada5ddc585b21149","04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}