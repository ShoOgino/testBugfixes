{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,AutoScaling.EventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, AutoScaling.EventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      dataProvider.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      cloudManager.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      dataProvider.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      cloudManager.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      log.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      cloudManager.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      cloudManager.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      log.warn(\"Exception sending request for event {}\", event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      cloudManager.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      log.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    Map<String, String> headers = new HashMap<>();\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        headers.put(k, headerVal);\n      }\n    });\n    headers.put(\"Content-Type\", type);\n    try {\n      cloudManager.httpRequest(url, SolrRequest.METHOD.POST, headers, payload, timeout, followRedirects);\n    } catch (IOException e) {\n      log.warn(\"Exception sending request for event {}\", event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"e35f2dde06b35aa9904949a3a93fabd090371077":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}