{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#registerNode(int,char[]).mjava","commits":[{"id":"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4","date":1449124064,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#registerNode(int,char[]).mjava","pathOld":"/dev/null","sourceNew":"  private void registerNode(int node, char[] fragment) {\n    int left = lattice.nodeLeft[node];\n    int right = lattice.nodeRight[node];\n    Type type = lattice.nodeDicType[node];\n    if (!discardPunctuation || !isPunctuation(fragment[left])) {\n      if (type == Type.USER) {\n        // The code below are based on backtrace().\n        //\n        // Expand the phraseID we recorded into the actual segmentation:\n        final int[] wordIDAndLength = userDictionary.lookupSegmentation(lattice.nodeWordID[node]);\n        int wordID = wordIDAndLength[0];\n        pending.add(new Token(wordID,\n                              fragment,\n                              left,\n                              right - left,\n                              Type.USER,\n                              lattice.rootBase + left,\n                              userDictionary));\n        // Output compound\n        int current = 0;\n        for (int j = 1; j < wordIDAndLength.length; j++) {\n          final int len = wordIDAndLength[j];\n          if (len < right - left) {\n            pending.add(new Token(wordID + j - 1,\n                                  fragment,\n                                  current + left,\n                                  len,\n                                  Type.USER,\n                                  lattice.rootBase + current + left,\n                                  userDictionary));\n          }\n          current += len;\n        }\n      } else {\n        pending.add(new Token(lattice.nodeWordID[node],\n                              fragment,\n                              left,\n                              right - left,\n                              type,\n                              lattice.rootBase + left,\n                              getDict(type)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}