{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.log(Level.SEVERE, DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","5101aff20e65c9a285c274627ec956eb5409d253","5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.log(Level.SEVERE, DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f8c38ac26359dc90605e71c2bfd327e6c18362c","date":1233040912,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8a5eb53fdb9b644b0938ea8d04a2a5a7dd7edec","date":1245670073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b79a8564c48f8e93b532f893bfae2253efa8f0b","date":1245993623,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4b79a8564c48f8e93b532f893bfae2253efa8f0b":["f8a5eb53fdb9b644b0938ea8d04a2a5a7dd7edec"],"f8a5eb53fdb9b644b0938ea8d04a2a5a7dd7edec":["4f8c38ac26359dc90605e71c2bfd327e6c18362c"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4f8c38ac26359dc90605e71c2bfd327e6c18362c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"ad94625fb8d088209f46650c8097196fec67f00c":["4b79a8564c48f8e93b532f893bfae2253efa8f0b"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4b79a8564c48f8e93b532f893bfae2253efa8f0b":["ad94625fb8d088209f46650c8097196fec67f00c"],"f8a5eb53fdb9b644b0938ea8d04a2a5a7dd7edec":["4b79a8564c48f8e93b532f893bfae2253efa8f0b"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4f8c38ac26359dc90605e71c2bfd327e6c18362c":["f8a5eb53fdb9b644b0938ea8d04a2a5a7dd7edec"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["4f8c38ac26359dc90605e71c2bfd327e6c18362c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}