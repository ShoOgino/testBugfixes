{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","commits":[{"id":"61ac0dce4a88019c61f1217b42753d505b9d9c84","date":1399218479,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(500);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<Automaton>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = BasicOperations.union(automata);\n    if (random().nextBoolean()) {\n      Automaton.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumberOfStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a.determinize();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.reduce\");\n      }\n      a.reduce();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.getNumberedStates\");\n      }\n      a.getNumberedStates();\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa9f329cc4d0dde7d538f67ba093029dafef755a","date":1399287078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<Automaton>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = BasicOperations.union(automata);\n    if (random().nextBoolean()) {\n      Automaton.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumberOfStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a.determinize();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.reduce\");\n      }\n      a.reduce();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.getNumberedStates\");\n      }\n      a.getNumberedStates();\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(500);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<Automaton>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = BasicOperations.union(automata);\n    if (random().nextBoolean()) {\n      Automaton.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumberOfStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a.determinize();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.reduce\");\n      }\n      a.reduce();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.getNumberedStates\");\n      }\n      a.getNumberedStates();\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<LightAutomaton> automata = new ArrayList<>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeStringLight(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    LightAutomaton a = BasicOperations.unionLight(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadTransitions\");\n      }\n      a = BasicOperations.removeDeadTransitions(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<Automaton>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = BasicOperations.union(automata);\n    if (random().nextBoolean()) {\n      Automaton.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumberOfStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a.determinize();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.reduce\");\n      }\n      a.reduce();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.getNumberedStates\");\n      }\n      a.getNumberedStates();\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<LightAutomaton> automata = new ArrayList<>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeStringLight(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    LightAutomaton a = BasicOperations.unionLight(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = BasicOperations.removeDeadStates(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<LightAutomaton> automata = new ArrayList<>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeStringLight(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    LightAutomaton a = BasicOperations.unionLight(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadTransitions\");\n      }\n      a = BasicOperations.removeDeadTransitions(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(Automata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = Operations.union(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperations.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = Operations.determinize(a);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = Operations.removeDeadStates(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<LightAutomaton> automata = new ArrayList<>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeStringLight(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    LightAutomaton a = BasicOperations.unionLight(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = BasicOperations.removeDeadStates(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testRandomFiniteStrings1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testRandomFiniteStrings1().mjava","sourceNew":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(Automata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = Operations.union(automata);\n    if (random().nextBoolean()) {\n      a = MinimizationOperations.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a = Operations.determinize(a);\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.removeDeadStates\");\n      }\n      a = Operations.removeDeadStates(a);\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","sourceOld":"  public void testRandomFiniteStrings1() {\n\n    int numStrings = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: numStrings=\" + numStrings);\n    }\n\n    Set<IntsRef> strings = new HashSet<IntsRef>();\n    List<Automaton> automata = new ArrayList<Automaton>();\n    for(int i=0;i<numStrings;i++) {\n      String s = TestUtil.randomSimpleString(random(), 1, 200);\n      automata.add(BasicAutomata.makeString(s));\n      IntsRef scratch = new IntsRef();\n      Util.toUTF32(s.toCharArray(), 0, s.length(), scratch);\n      strings.add(scratch);\n      if (VERBOSE) {\n        System.out.println(\"  add string=\" + s);\n      }\n    }\n\n    // TODO: we could sometimes use\n    // DaciukMihovAutomatonBuilder here\n\n    // TODO: what other random things can we do here...\n    Automaton a = BasicOperations.union(automata);\n    if (random().nextBoolean()) {\n      Automaton.minimize(a);\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.minimize numStates=\" + a.getNumberOfStates());\n      }\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.determinize\");\n      }\n      a.determinize();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.reduce\");\n      }\n      a.reduce();\n    } else if (random().nextBoolean()) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: a.getNumberedStates\");\n      }\n      a.getNumberedStates();\n    }\n\n    Set<IntsRef> actual = getFiniteStrings(a, -1, true);\n    if (strings.equals(actual) == false) {\n      System.out.println(\"strings.size()=\" + strings.size() + \" actual.size=\" + actual.size());\n      List<IntsRef> x = new ArrayList<>(strings);\n      Collections.sort(x);\n      List<IntsRef> y = new ArrayList<>(actual);\n      Collections.sort(y);\n      int end = Math.min(x.size(), y.size());\n      for(int i=0;i<end;i++) {\n        System.out.println(\"  i=\" + i + \" string=\" + toString(x.get(i)) + \" actual=\" + toString(y.get(i)));\n      }\n      fail(\"wrong strings found\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["fa9f329cc4d0dde7d538f67ba093029dafef755a"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"fa9f329cc4d0dde7d538f67ba093029dafef755a":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"61ac0dce4a88019c61f1217b42753d505b9d9c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"5c84485629d80d203608e8975a1139de9933cc38":["fa9f329cc4d0dde7d538f67ba093029dafef755a","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"fa9f329cc4d0dde7d538f67ba093029dafef755a":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"61ac0dce4a88019c61f1217b42753d505b9d9c84":["fa9f329cc4d0dde7d538f67ba093029dafef755a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}