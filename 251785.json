{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","commits":[{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","pathOld":"/dev/null","sourceNew":"    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams, InputStream in) throws Exception {\n      final Map<String,String[]> map = new HashMap<>();\n\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n            totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n\n      try {\n        in = FastInputStream.wrap( in == null ? req.getInputStream() : in);\n\n        final long bytesRead = parseFormDataContent(in, maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n\n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","pathOld":"/dev/null","sourceNew":"    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams, InputStream in) throws Exception {\n      final Map<String,String[]> map = new HashMap<>();\n\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n            totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n\n      try {\n        in = FastInputStream.wrap( in == null ? req.getInputStream() : in);\n\n        final long bytesRead = parseFormDataContent(in, maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n\n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","date":1461254038,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","sourceNew":"    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams, InputStream in) throws Exception {\n      final Map<String,String[]> map = new HashMap<>();\n\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n            totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n\n      try {\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        in = FastInputStream.wrap( in == null ? new CloseShieldInputStream(req.getInputStream()) : in );\n\n        final long bytesRead = parseFormDataContent(in, maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n\n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams, InputStream in) throws Exception {\n      final Map<String,String[]> map = new HashMap<>();\n\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n            totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n\n      try {\n        in = FastInputStream.wrap( in == null ? req.getInputStream() : in);\n\n        final long bytesRead = parseFormDataContent(in, maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n\n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":["0d17ec5164debc23076db7fd11d0331f201583b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream],InputStream).mjava","sourceNew":"    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams, InputStream in) throws Exception {\n      final Map<String,String[]> map = new HashMap<>();\n\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n            totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n\n      try {\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        in = FastInputStream.wrap( in == null ? new CloseShieldInputStream(req.getInputStream()) : in );\n\n        final long bytesRead = parseFormDataContent(in, maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n\n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams, InputStream in) throws Exception {\n      final Map<String,String[]> map = new HashMap<>();\n\n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n\n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n            totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n\n      try {\n        in = FastInputStream.wrap( in == null ? req.getInputStream() : in);\n\n        final long bytesRead = parseFormDataContent(in, maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n\n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d17ec5164debc23076db7fd11d0331f201583b5"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["0d17ec5164debc23076db7fd11d0331f201583b5","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["0d17ec5164debc23076db7fd11d0331f201583b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}