{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to do tests on that segment's reader.\n   * This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders.length != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.length + \" segments instead of exactly one\");\n    assertTrue(subReaders[0] instanceof SegmentReader);\n    return (SegmentReader) subReaders[0];\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to do tests on that segment's reader.\n   * This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders.length != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.length + \" segments instead of exactly one\");\n    assertTrue(subReaders[0] instanceof SegmentReader);\n    return (SegmentReader) subReaders[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders.length != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.length + \" segments instead of exactly one\");\n    assertTrue(subReaders[0] instanceof SegmentReader);\n    return (SegmentReader) subReaders[0];\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to do tests on that segment's reader.\n   * This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders.length != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.length + \" segments instead of exactly one\");\n    assertTrue(subReaders[0] instanceof SegmentReader);\n    return (SegmentReader) subReaders[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<? extends IndexReader> subReaders = reader.getSequentialSubReaders();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final IndexReader r = subReaders.get(0);\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders.length != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.length + \" segments instead of exactly one\");\n    assertTrue(subReaders[0] instanceof SegmentReader);\n    return (SegmentReader) subReaders[0];\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<AtomicReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final AtomicReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<? extends IndexReader> subReaders = reader.getSequentialSubReaders();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final IndexReader r = subReaders.get(0);\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<AtomicReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final AtomicReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<? extends IndexReader> subReaders = reader.getSequentialSubReaders();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final IndexReader r = subReaders.get(0);\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<AtomicReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final AtomicReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<? extends IndexReader> subReaders = reader.getSequentialSubReaders();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final IndexReader r = subReaders.get(0);\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final LeafReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<AtomicReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final AtomicReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb5791a757485f13c42e3d32746a440306f28c4","date":1412765145,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1) {\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    }\n    final LeafReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final LeafReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1) {\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    }\n    final LeafReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1)\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    final LeafReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlyLeafReader(IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getOnlySegmentReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static LeafReader getOnlyLeafReader(IndexReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1) {\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    }\n    return subReaders.get(0).reader();\n  }\n\n","sourceOld":"  /**\n   * Some tests expect the directory to contain a single segment, and want to \n   * do tests on that segment's reader. This is an utility method to help them.\n   */\n  public static SegmentReader getOnlySegmentReader(DirectoryReader reader) {\n    List<LeafReaderContext> subReaders = reader.leaves();\n    if (subReaders.size() != 1) {\n      throw new IllegalArgumentException(reader + \" has \" + subReaders.size() + \" segments instead of exactly one\");\n    }\n    final LeafReader r = subReaders.get(0).reader();\n    assertTrue(r instanceof SegmentReader);\n    return (SegmentReader) r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4bb5791a757485f13c42e3d32746a440306f28c4"],"55980207f1977bd1463465de1659b821347e2fa8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","4bb5791a757485f13c42e3d32746a440306f28c4"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4bb5791a757485f13c42e3d32746a440306f28c4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["55980207f1977bd1463465de1659b821347e2fa8","4bb5791a757485f13c42e3d32746a440306f28c4"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4bb5791a757485f13c42e3d32746a440306f28c4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}