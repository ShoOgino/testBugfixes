{"path":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? collation.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }\n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    for (SpellCheckCorrection correction : corrections) {\n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      collation.replace(tok.startOffset() + offset, tok.endOffset() + offset,\n          correction.getCorrection());\n      offset += correction.getCorrection().length()\n          - (tok.endOffset() - tok.startOffset());\n    }\n    return collation.toString();\n  }\n\n","bugFix":null,"bugIntro":["a129ba8305f969b37c51a05f7307dac0fe1268c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0","date":1367858986,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? collation.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? collation.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a129ba8305f969b37c51a05f7307dac0fe1268c5","date":1374768243,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? origQuery.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? collation.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","bugFix":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? origQuery.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? collation.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd60ad4e8968dd23e5c5891b160ba5e4525d565","date":1525114039,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#getCollation(String,List[SpellCheckCorrection]).mjava","sourceNew":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {        \n        char previousChar = tok.startOffset()>0 ? origQuery.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          addParenthesis = true;\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","sourceOld":"  private String getCollation(String origQuery,\n                              List<SpellCheckCorrection> corrections) {\n    StringBuilder collation = new StringBuilder(origQuery);\n    int offset = 0;\n    String corr = \"\";\n    for(int i=0 ; i<corrections.size() ; i++) {\n      SpellCheckCorrection correction = corrections.get(i);   \n      Token tok = correction.getOriginal();\n      // we are replacing the query in order, but injected terms might cause\n      // illegal offsets due to previous replacements.\n      if (tok.getPositionIncrement() == 0)\n        continue;\n      corr = correction.getCorrection();\n      boolean addParenthesis = false;\n      Character requiredOrProhibited = null;\n      int indexOfSpace = corr.indexOf(' ');\n      StringBuilder corrSb = new StringBuilder(corr);\n      int bump = 1;\n      \n      //If the correction contains whitespace (because it involved breaking a word in 2+ words),\n      //then be sure all of the new words have the same optional/required/prohibited status in the query.\n      while(indexOfSpace>-1 && indexOfSpace<corr.length()-1) {\n        addParenthesis = true;\n        char previousChar = tok.startOffset()>0 ? origQuery.charAt(tok.startOffset()-1) : ' ';\n        if(previousChar=='-' || previousChar=='+') {\n          corrSb.insert(indexOfSpace + bump, previousChar);\n          if(requiredOrProhibited==null) {\n            requiredOrProhibited = previousChar;\n          }\n          bump++;\n        } else if ((tok.getFlags() & QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) == QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG) {\n          corrSb.insert(indexOfSpace + bump, \"AND \");\n          bump += 4;\n        }\n        indexOfSpace = correction.getCorrection().indexOf(' ', indexOfSpace + bump);\n      }\n      \n      int oneForReqOrProhib = 0;\n      if(addParenthesis) { \n        if(requiredOrProhibited!=null) {\n          corrSb.insert(0, requiredOrProhibited);\n          oneForReqOrProhib++;\n        }\n        corrSb.insert(0, '(');\n        corrSb.append(')');\n      }\n      corr = corrSb.toString();  \n      int startIndex = tok.startOffset() + offset - oneForReqOrProhib;\n      int endIndex = tok.endOffset() + offset;\n      collation.replace(startIndex, endIndex, corr);\n      offset += corr.length() - oneForReqOrProhib - (tok.endOffset() - tok.startOffset());      \n    }\n    return collation.toString();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["c26f00b574427b55127e869b935845554afde1fa"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0","a129ba8305f969b37c51a05f7307dac0fe1268c5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9cd60ad4e8968dd23e5c5891b160ba5e4525d565":["a129ba8305f969b37c51a05f7307dac0fe1268c5"],"a129ba8305f969b37c51a05f7307dac0fe1268c5":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cd60ad4e8968dd23e5c5891b160ba5e4525d565"]},"commit2Childs":{"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a129ba8305f969b37c51a05f7307dac0fe1268c5"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a129ba8305f969b37c51a05f7307dac0fe1268c5":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9cd60ad4e8968dd23e5c5891b160ba5e4525d565"],"9cd60ad4e8968dd23e5c5891b160ba5e4525d565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}