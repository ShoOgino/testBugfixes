{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random(), 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random(), 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random(), 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":["38dc812cdb844a46e522ae3af71f812ffe7ab082"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0),\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0),\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random(), 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random(), 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0),\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0),\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0),\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0),\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random(), 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0),\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0),\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0),\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0),\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.shutdown();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.shutdown();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null, true);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null, true);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null, true);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts.get(0), null, true);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, PostingsEnum.FLAG_FREQS);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, PostingsEnum.FLAG_FREQS);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, PostingsEnum.FLAG_FREQS);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, PostingsEnum.FLAG_FREQS);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q, true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q, true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0), null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0), null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), true);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), true);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createWeight(s.rewrite(q.build()), ScoreMode.COMPLETE, 1);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createWeight(s.rewrite(q.build()), ScoreMode.COMPLETE, 1);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createWeight(s.rewrite(q.build()), ScoreMode.COMPLETE, 1);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createWeight(s.rewrite(q.build()), ScoreMode.COMPLETE, 1);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random().nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random().nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random().nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random().nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random().nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = TestUtil.nextInt(random(), 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random().nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery.Builder q = new BooleanQuery.Builder();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n\n      Scorer scorer = weight.scorer(s.leafContexts.get(0));\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<>();\n      while(scorer.iterator().nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n        scorer = weight.scorer(s.leafContexts.get(0));\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random().nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.iterator().nextDoc();\n          } else {\n            // advance\n            int inc = TestUtil.nextInt(random(), 1, left - 1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.iterator().advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7dd748bb245633a8195281556bb0e68a6ea97d18","9fc47cb7b4346802411bb432f501ed0673d7119e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["25f698887111a682424e759ba36083180899a1fd"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["6613659748fe4411a7dcf85266e55db1f95f7315","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"25f698887111a682424e759ba36083180899a1fd":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["25f698887111a682424e759ba36083180899a1fd"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"25f698887111a682424e759ba36083180899a1fd":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}