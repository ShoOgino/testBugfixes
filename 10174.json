{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getRandomStringArrayWithInts(int length, boolean sorted) {\n    Set<Integer> set;\n    if (sorted) {\n      set = new TreeSet<>();\n    } else {\n      set = new HashSet<>();\n    }\n    while (set.size() < length) {\n      int number = random().nextInt(100);\n      if (random().nextBoolean()) {\n        number = number * -1;\n      }\n      set.add(number);\n    }\n    String[] stringArr = new String[length];\n    int i = 0;\n    for (int val:set) {\n      stringArr[i] = String.valueOf(val);\n      i++;\n    }\n    return stringArr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getRandomStringArrayWithInts(int length, boolean sorted) {\n    Set<Integer> set;\n    if (sorted) {\n      set = new TreeSet<>();\n    } else {\n      set = new HashSet<>();\n    }\n    while (set.size() < length) {\n      int number = random().nextInt(100);\n      if (random().nextBoolean()) {\n        number = number * -1;\n      }\n      set.add(number);\n    }\n    String[] stringArr = new String[length];\n    int i = 0;\n    for (int val:set) {\n      stringArr[i] = String.valueOf(val);\n      i++;\n    }\n    return stringArr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","sourceNew":null,"sourceOld":"  private String[] getRandomStringArrayWithInts(int length, boolean sorted) {\n    Set<Integer> set;\n    if (sorted) {\n      set = new TreeSet<>();\n    } else {\n      set = new HashSet<>();\n    }\n    while (set.size() < length) {\n      int number = random().nextInt(100);\n      if (random().nextBoolean()) {\n        number = number * -1;\n      }\n      set.add(number);\n    }\n    String[] stringArr = new String[length];\n    int i = 0;\n    for (int val:set) {\n      stringArr[i] = String.valueOf(val);\n      i++;\n    }\n    return stringArr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","sourceNew":null,"sourceOld":"  private String[] getRandomStringArrayWithInts(int length, boolean sorted) {\n    Set<Integer> set;\n    if (sorted) {\n      set = new TreeSet<>();\n    } else {\n      set = new HashSet<>();\n    }\n    while (set.size() < length) {\n      int number = random().nextInt(100);\n      if (random().nextBoolean()) {\n        number = number * -1;\n      }\n      set.add(number);\n    }\n    String[] stringArr = new String[length];\n    int i = 0;\n    for (int val:set) {\n      stringArr[i] = String.valueOf(val);\n      i++;\n    }\n    return stringArr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","sourceNew":null,"sourceOld":"  private String[] getRandomStringArrayWithInts(int length, boolean sorted) {\n    Set<Integer> set;\n    if (sorted) {\n      set = new TreeSet<>();\n    } else {\n      set = new HashSet<>();\n    }\n    while (set.size() < length) {\n      int number = random().nextInt(100);\n      if (random().nextBoolean()) {\n        number = number * -1;\n      }\n      set.add(number);\n    }\n    String[] stringArr = new String[length];\n    int i = 0;\n    for (int val:set) {\n      stringArr[i] = String.valueOf(val);\n      i++;\n    }\n    return stringArr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#getRandomStringArrayWithInts(int,boolean).mjava","sourceNew":null,"sourceOld":"  private String[] getRandomStringArrayWithInts(int length, boolean sorted) {\n    Set<Integer> set;\n    if (sorted) {\n      set = new TreeSet<>();\n    } else {\n      set = new HashSet<>();\n    }\n    while (set.size() < length) {\n      int number = random().nextInt(100);\n      if (random().nextBoolean()) {\n        number = number * -1;\n      }\n      set.add(number);\n    }\n    String[] stringArr = new String[length];\n    int i = 0;\n    for (int val:set) {\n      stringArr[i] = String.valueOf(val);\n      i++;\n    }\n    return stringArr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["46dc9ac8b3e748407baaef82453138ff3974480c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["46dc9ac8b3e748407baaef82453138ff3974480c","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"28288370235ed02234a64753cdbf0c6ec096304a":["46dc9ac8b3e748407baaef82453138ff3974480c","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["46dc9ac8b3e748407baaef82453138ff3974480c","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}