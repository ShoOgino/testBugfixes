{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","commits":[{"id":"1c6ce79c21a8da5e778ef9179243bc50d6d42c52","date":1324010267,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"broken offsets: see LUCENE-2208\")\n  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6c83606eeb639c95381fc0f64c6407159a4f9e1","date":1326483990,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  @Ignore(\"broken offsets: see LUCENE-2208\")\n  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0945066a2be0b47d65b9814a365af2318c6dd015","date":1326560376,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  @Ignore(\"broken offsets: see LUCENE-2208\")\n  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  @Ignore(\"broken offsets: see LUCENE-2208\")\n  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":["0945066a2be0b47d65b9814a365af2318c6dd015"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  @Ignore(\"broken offsets: see LUCENE-2208\")\n  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e477c2108982ba9974f73aa8800270c75cb4971","date":1327277332,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(reader));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(reader));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(reader));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","sourceOld":"  @Ignore(\"broken offsets: see LUCENE-2208\")\n  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6adf8ea59977891966389011f3905e09932183","date":1332622471,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, newTestAnalyzer(), numRounds);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(reader));\n      }\n    };\n    \n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, analyzer, numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random(), newTestAnalyzer(), numRounds);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random, newTestAnalyzer(), numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random(), newTestAnalyzer(), numRounds);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    int numRounds = RANDOM_MULTIPLIER * 10000;\n    checkRandomData(random(), newTestAnalyzer(), numRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0945066a2be0b47d65b9814a365af2318c6dd015","7e477c2108982ba9974f73aa8800270c75cb4971"],"7d6adf8ea59977891966389011f3905e09932183":["7e477c2108982ba9974f73aa8800270c75cb4971"],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0945066a2be0b47d65b9814a365af2318c6dd015":["a6c83606eeb639c95381fc0f64c6407159a4f9e1"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["0945066a2be0b47d65b9814a365af2318c6dd015","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"a6c83606eeb639c95381fc0f64c6407159a4f9e1":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["579dc30b5d3235c34cda518b2b6018d71a61879c","7e477c2108982ba9974f73aa8800270c75cb4971"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["0945066a2be0b47d65b9814a365af2318c6dd015"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7d6adf8ea59977891966389011f3905e09932183"],"7e477c2108982ba9974f73aa8800270c75cb4971":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7d6adf8ea59977891966389011f3905e09932183":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["a6c83606eeb639c95381fc0f64c6407159a4f9e1"],"0945066a2be0b47d65b9814a365af2318c6dd015":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["5a89676536a5d3e2e875a9eed6b3f22a63cca643"],"a6c83606eeb639c95381fc0f64c6407159a4f9e1":["0945066a2be0b47d65b9814a365af2318c6dd015"],"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["579dc30b5d3235c34cda518b2b6018d71a61879c","7e477c2108982ba9974f73aa8800270c75cb4971"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e477c2108982ba9974f73aa8800270c75cb4971":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7d6adf8ea59977891966389011f3905e09932183","5a89676536a5d3e2e875a9eed6b3f22a63cca643"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5a89676536a5d3e2e875a9eed6b3f22a63cca643","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}