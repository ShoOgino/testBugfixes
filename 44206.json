{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesAfterReopenAppend2().mjava","commits":[{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesAfterReopenAppend2().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedTypesAfterReopenAppend2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))) ;\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"foo\", new BytesRef(\"foo\")));\n    w.addDocument(doc);\n    w.close();\n\n    doc = new Document();\n    w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"foo\")));\n    try {\n      // NOTE: this case follows a different code path inside\n      // DefaultIndexingChain/FieldInfos, because the field (foo)\n      // is first added without DocValues:\n      w.addDocument(doc);\n      fail(\"did not get expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesAfterReopenAppend2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesAfterReopenAppend2().mjava","sourceNew":"  public void testMixedTypesAfterReopenAppend2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))) ;\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"foo\", new BytesRef(\"foo\")));\n    w.addDocument(doc);\n    w.close();\n\n    Document doc2 = new Document();\n    IndexWriter w2 = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    doc2.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    doc2.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"foo\")));\n    // NOTE: this case follows a different code path inside\n    // DefaultIndexingChain/FieldInfos, because the field (foo)\n    // is first added without DocValues:\n    expectThrows(IllegalArgumentException.class, () -> {\n      w2.addDocument(doc2);\n    });\n\n    w2.forceMerge(1);\n    w2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMixedTypesAfterReopenAppend2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))) ;\n    Document doc = new Document();\n    doc.add(new SortedSetDocValuesField(\"foo\", new BytesRef(\"foo\")));\n    w.addDocument(doc);\n    w.close();\n\n    doc = new Document();\n    w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    doc.add(new BinaryDocValuesField(\"foo\", new BytesRef(\"foo\")));\n    try {\n      // NOTE: this case follows a different code path inside\n      // DefaultIndexingChain/FieldInfos, because the field (foo)\n      // is first added without DocValues:\n      w.addDocument(doc);\n      fail(\"did not get expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}