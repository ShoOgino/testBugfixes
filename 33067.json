{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for(SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n      flushDeletesCount.incrementAndGet();\n      final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n          .applyDeletes(readerPool, segmentInfos);\n      if (result.anyDeletes) {\n        checkpoint();\n      }\n      if (!keepFullyDeletedSegments && result.allDeleted != null) {\n        if (infoStream != null) {\n          message(\"drop 100% deleted segments: \" + result.allDeleted);\n        }\n        for (SegmentInfo info : result.allDeleted) {\n          // If a merge has already registered for this\n          // segment, we leave it in the readerPool; the\n          // merge will skip merging it and will then drop\n          // it once it's done:\n          if (!mergingSegments.contains(info)) {\n            segmentInfos.remove(info);\n            if (readerPool != null) {\n              readerPool.drop(info);\n            }\n          }\n        }\n        checkpoint();\n      }\n      bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for(SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n      flushDeletesCount.incrementAndGet();\n      final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n          .applyDeletes(readerPool, segmentInfos);\n      if (result.anyDeletes) {\n        checkpoint();\n      }\n      if (!keepFullyDeletedSegments && result.allDeleted != null) {\n        if (infoStream != null) {\n          message(\"drop 100% deleted segments: \" + result.allDeleted);\n        }\n        for (SegmentInfo info : result.allDeleted) {\n          // If a merge has already registered for this\n          // segment, we leave it in the readerPool; the\n          // merge will skip merging it and will then drop\n          // it once it's done:\n          if (!mergingSegments.contains(info)) {\n            segmentInfos.remove(info);\n            if (readerPool != null) {\n              readerPool.drop(info);\n            }\n          }\n        }\n        checkpoint();\n      }\n      bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos);\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + result.allDeleted);\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result = bufferedDeletesStream\n      .applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":["f6f4cae61e16730201371ab7e9912721c19324e7","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        message(\"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          if (readerPool != null) {\n            readerPool.drop(info);\n          }\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"06584e6e98d592b34e1329b384182f368d2025e8":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"f6f4cae61e16730201371ab7e9912721c19324e7":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["06584e6e98d592b34e1329b384182f368d2025e8"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}