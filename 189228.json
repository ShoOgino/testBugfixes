{"path":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","commits":[{"id":"e6df93694b323143943a3cc9169775db9a920197","date":1414102503,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getCollectionZkPath ending in a /\n   * <p/>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getCollectionZkPath() + \"/\" :\n            loader.getConfigDir();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","sourceNew":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getConfigSetZkPath ending in a /\n   * <p/>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getConfigSetZkPath() + \"/\" :\n            loader.getConfigDir();\n  }\n\n","sourceOld":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getCollectionZkPath ending in a /\n   * <p/>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getCollectionZkPath() + \"/\" :\n            loader.getConfigDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","sourceNew":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getConfigSetZkPath ending in a /\n   * <p>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getConfigSetZkPath() + \"/\" :\n            loader.getConfigDir();\n  }\n\n","sourceOld":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getConfigSetZkPath ending in a /\n   * <p/>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getConfigSetZkPath() + \"/\" :\n            loader.getConfigDir();\n  }\n\n","bugFix":["e6df93694b323143943a3cc9169775db9a920197"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#unifiedResourcePath(SolrResourceLoader).mjava","sourceNew":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getConfigSetZkPath ending in a /\n   * <p>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getConfigSetZkPath() + \"/\" :\n            loader.getConfigDir() + File.separator;\n  }\n\n","sourceOld":"  /**\n   * Returns a displayable unified path to the given resource. For non-solrCloud that will be the\n   * same as getConfigDir, but for Cloud it will be getConfigSetZkPath ending in a /\n   * <p>\n   * <b>Note:</b> Do not use this to generate a valid file path, but for debug printing etc\n   * @param loader Resource loader instance\n   * @return a String of path to resource\n   */\n  public static String unifiedResourcePath(SolrResourceLoader loader) {\n    return (loader instanceof ZkSolrResourceLoader) ?\n            ((ZkSolrResourceLoader) loader).getConfigSetZkPath() + \"/\" :\n            loader.getConfigDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["e6df93694b323143943a3cc9169775db9a920197"],"e6df93694b323143943a3cc9169775db9a920197":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"e6df93694b323143943a3cc9169775db9a920197":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6df93694b323143943a3cc9169775db9a920197"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}