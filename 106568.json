{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","sourceNew":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = (TermState) currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","sourceOld":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = (TermState) currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","sourceNew":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","sourceOld":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = (TermState) currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","sourceNew":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","sourceOld":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#termState().mjava","sourceNew":null,"sourceOld":"      @Override\n      public TermState termState() throws IOException {\n        assert !eof;\n        currentFrame.decodeMetaData();\n        TermState ts = currentFrame.state.clone();\n        //if (DEBUG) System.out.println(\"BTTR.termState seg=\" + segment + \" state=\" + ts);\n        return ts;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["399d5903979ca52514d2bc7e3a362e1c45885c94","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}