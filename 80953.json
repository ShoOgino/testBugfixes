{"path":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTestBase#getAllMetrics().mjava","commits":[{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTestBase#getAllMetrics().mjava","pathOld":"/dev/null","sourceNew":"  protected Map<String, Double> getAllMetrics() throws URISyntaxException, IOException {\n    URI uri = new URI(\"http://localhost:\" + promtheusExporterPort + \"/metrics\");\n\n    HttpGet request = new HttpGet(uri);\n\n    Map<String, Double> metrics = new HashMap<>();\n\n    try (CloseableHttpResponse response = httpClient.execute(request)) {\n      assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n      try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {\n        String currentLine;\n\n        while ((currentLine = reader.readLine()) != null) {\n          // Lines that begin with a # are a comment in prometheus.\n          if (currentLine.startsWith(\"#\")) {\n            continue;\n          }\n\n          String[] parts = currentLine.split(\" \");\n\n          assertEquals(\"Metric must have name and value\", 2, parts.length);\n\n          metrics.put(parts[0], Double.valueOf(parts[1]));\n        }\n      }\n    }\n\n    return metrics;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebaf5b5a38c3262f01492578bd86fb79052e171f","date":1569259988,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTestBase#getAllMetrics().mjava","pathOld":"solr/contrib/prometheus-exporter/src/test/org/apache/solr/prometheus/exporter/SolrExporterTestBase#getAllMetrics().mjava","sourceNew":"  protected Map<String, Double> getAllMetrics() throws URISyntaxException, IOException {\n    URI uri = new URI(\"http://localhost:\" + promtheusExporterPort + \"/metrics\");\n\n    HttpGet request = new HttpGet(uri);\n\n    Map<String, Double> metrics = new HashMap<>();\n\n    try (CloseableHttpResponse response = httpClient.execute(request)) {\n      assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n      try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {\n        String currentLine;\n\n        while ((currentLine = reader.readLine()) != null) {\n          // Lines that begin with a # are a comment in prometheus.\n          if (currentLine.startsWith(\"#\")) {\n            continue;\n          }\n\n          String[] parts = currentLine.split(\" \");\n\n          assertEquals(\"Metric must have name and value: \" + currentLine, 2, parts.length);\n\n          metrics.put(parts[0], Double.valueOf(parts[1]));\n        }\n      }\n    }\n\n    return metrics;\n  }\n\n","sourceOld":"  protected Map<String, Double> getAllMetrics() throws URISyntaxException, IOException {\n    URI uri = new URI(\"http://localhost:\" + promtheusExporterPort + \"/metrics\");\n\n    HttpGet request = new HttpGet(uri);\n\n    Map<String, Double> metrics = new HashMap<>();\n\n    try (CloseableHttpResponse response = httpClient.execute(request)) {\n      assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n      try (BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {\n        String currentLine;\n\n        while ((currentLine = reader.readLine()) != null) {\n          // Lines that begin with a # are a comment in prometheus.\n          if (currentLine.startsWith(\"#\")) {\n            continue;\n          }\n\n          String[] parts = currentLine.split(\" \");\n\n          assertEquals(\"Metric must have name and value\", 2, parts.length);\n\n          metrics.put(parts[0], Double.valueOf(parts[1]));\n        }\n      }\n    }\n\n    return metrics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ebaf5b5a38c3262f01492578bd86fb79052e171f":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ebaf5b5a38c3262f01492578bd86fb79052e171f"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"ebaf5b5a38c3262f01492578bd86fb79052e171f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["ebaf5b5a38c3262f01492578bd86fb79052e171f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}