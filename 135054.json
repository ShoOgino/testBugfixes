{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[Document]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<Document> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}