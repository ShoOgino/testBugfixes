{"path":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","commits":[{"id":"05569170a222447d3aec8fad773feedf4429fdd5","date":1476800012,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b437b84da5e49daf1197c9cd533015490cdcb2c2","date":1476818430,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","sourceNew":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11122ff28c20e6e4e02cb1366eaa029a92f69ce","date":1477307742,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  /** Calculates an index fingerprint */\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, long maxVersion) throws IOException {\n    RTimer timer = new RTimer();\n\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n\n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = searcher.maxDoc();\n\n    // TODO: this could be parallelized, or even cached per-segment if performance becomes an issue\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {\n      int maxDoc = ctx.reader().maxDoc();\n      f.numDocs += ctx.reader().numDocs();\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      FunctionValues fv = vs.getValues(funcContext, ctx);\n      for (int doc = 0; doc < maxDoc; doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        long v = fv.longVal(doc);\n        f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n        if (v <= f.maxVersionSpecified) {\n          f.maxInHash = Math.max(v, f.maxInHash);\n          f.versionsHash += Hash.fmix64(v);\n          f.numVersions++;\n        }\n      }\n    }\n\n    final double duration = timer.stop();\n    log.info(\"IndexFingerprint millis:\" + duration + \" result:\" + f);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","sourceNew":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    @SuppressWarnings({\"rawtypes\"})\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/IndexFingerprint#getFingerprint(SolrIndexSearcher,LeafReaderContext,Long).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    @SuppressWarnings({\"rawtypes\"})\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  public static IndexFingerprint getFingerprint(SolrIndexSearcher searcher, LeafReaderContext ctx, Long maxVersion)\n      throws IOException {\n    SchemaField versionField = VersionInfo.getAndCheckVersionField(searcher.getSchema());\n    ValueSource vs = versionField.getType().getValueSource(versionField, null);\n    @SuppressWarnings({\"rawtypes\"})\n    Map funcContext = ValueSource.newContext(searcher);\n    vs.createWeight(funcContext, searcher);\n    \n    IndexFingerprint f = new IndexFingerprint();\n    f.maxVersionSpecified = maxVersion;\n    f.maxDoc = ctx.reader().maxDoc();\n    f.numDocs = ctx.reader().numDocs();\n    \n    int maxDoc = ctx.reader().maxDoc();\n    Bits liveDocs = ctx.reader().getLiveDocs();\n    FunctionValues fv = vs.getValues(funcContext, ctx);\n    for (int doc = 0; doc < maxDoc; doc++) {\n      if (liveDocs != null && !liveDocs.get(doc)) continue;\n      long v = fv.longVal(doc);\n      f.maxVersionEncountered = Math.max(v, f.maxVersionEncountered);\n      if (v <= f.maxVersionSpecified) {\n        f.maxInHash = Math.max(v, f.maxInHash);\n        f.versionsHash += Hash.fmix64(v);\n        f.numVersions++;\n      }\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["05569170a222447d3aec8fad773feedf4429fdd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"05569170a222447d3aec8fad773feedf4429fdd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["018a36ff4088cb91ab12cbe44f696d81d1fadd77","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","05569170a222447d3aec8fad773feedf4429fdd5"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"05569170a222447d3aec8fad773feedf4429fdd5":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}