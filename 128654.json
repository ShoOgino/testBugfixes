{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = new File(TEST_HOME());\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = new File(TEST_HOME());\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = new File(TEST_HOME());\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term.utf8ToString());\n      assertNotNull(k.term.utf8ToString(), val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(_TestUtil.bytesToCharSequence(k.term, random));\n      assertNotNull(k.term.utf8ToString(), val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term.utf8ToString());\n      assertNotNull(k.term.utf8ToString(), val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(_TestUtil.bytesToCharSequence(k.term, random));\n      assertNotNull(k.term.utf8ToString(), val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], (float) i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    float previous = Float.NEGATIVE_INFINITY;\n    for (TermFreq k : keys) {\n      Float val = (Float) lookup.get(k.term);\n      assertNotNull(k.term, val);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term, Float.valueOf(k.v), val);\n      } else {\n        assertTrue(val + \">=\" + previous, val >= previous);\n        previous = val.floatValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eda10679962159bc8bccd5b1069ae35d607ace25","date":1331148629,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(storeDir);\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(storeDir);\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","eda10679962159bc8bccd5b1069ae35d607ace25"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["e230a61047bc041516c811baa08a7174d6f8322a","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eda10679962159bc8bccd5b1069ae35d607ace25":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"6ecc52400551de6a7d8daf646be839487911627c":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["eda10679962159bc8bccd5b1069ae35d607ace25"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"e230a61047bc041516c811baa08a7174d6f8322a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d334a3e8e6b94298d8cf2802a403a096c06f0b92","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"eda10679962159bc8bccd5b1069ae35d607ace25":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["6ecc52400551de6a7d8daf646be839487911627c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","eda10679962159bc8bccd5b1069ae35d607ace25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}