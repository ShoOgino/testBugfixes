{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef68eed598a8494abdcad4ef076d62b12c4d89f4","date":1289177911,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (text.length() > 0 && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#parse(XMLStreamReader,Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * This is the method where all the XML parsing happens. For each \n     * tag/subtag read from the source, this method is called recursively.\n     *\n     */\n    private void parse(XMLStreamReader parser, \n                       Handler handler,\n                       Map<String, Object> values, \n                       Stack<Set<String>> stack, // lists of values to purge\n                       boolean recordStarted\n                       ) throws IOException, XMLStreamException {\n      Set<String> valuesAddedinThisFrame = null;\n      if (isRecord) {\n        // This Node is a match for an XPATH from a forEach attribute, \n        // prepare for the clean up that will occurr when the record\n        // is emitted after its END_ELEMENT is matched \n        recordStarted = true;\n        valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      } else if (recordStarted) {\n        // This node is a child of some parent which matched against forEach \n        // attribute. Continue to add values to an existing record.\n        valuesAddedinThisFrame = stack.peek();\n      }\n\n      try {\n        /* The input stream has deposited us at this Node in our tree of \n         * intresting nodes. Depending on how this node is of interest,\n         * process further tokens from the input stream and decide what\n         * we do next\n         */\n        if (attributes != null) {\n          // we interested in storing attributes from the input stream\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n        Set<Node> childrenFound = new HashSet<Node>();\n        int event = -1;\n        int flattenedStarts=0; // our tag depth when flattening elements\n        StringBuilder text = new StringBuilder();\n\n        while (true) {  \n          event = parser.next();\n   \n          if (event == END_ELEMENT) {\n            if (flattenedStarts > 0) flattenedStarts--;\n            else {\n              if (hasText && valuesAddedinThisFrame != null) {\n                valuesAddedinThisFrame.add(fieldName);\n                putText(values, text.toString(), fieldName, multiValued);\n              }\n              if (isRecord) handler.handle(getDeepCopy(values), forEachPath);\n              if (childNodes != null && recordStarted && !isRecord && !childrenFound.containsAll(childNodes)) {\n                // nonReccord nodes where we have not collected text for ALL\n                // the child nodes.\n                for (Node n : childNodes) {\n                  // For the multivalue child nodes where we could have, but\n                  // didnt, collect text. Push a null string into values.\n                  if (!childrenFound.contains(n)) n.putNulls(values);\n                }\n              }\n              return;\n            }\n          }\n          else if (hasText && (event==CDATA || event==CHARACTERS || event==SPACE)) {\n            text.append(parser.getText());\n          } \n          else if (event == START_ELEMENT) {\n            if ( flatten ) \n               flattenedStarts++;\n            else \n               handleStartElement(parser, childrenFound, handler, values, stack, recordStarted);\n          }\n          // END_DOCUMENT is least likely to appear and should be \n          // last in if-then-else skip chain\n          else if (event == END_DOCUMENT) return;\n          }\n        }finally {\n        if ((isRecord || !recordStarted) && !stack.empty()) {\n          Set<String> cleanThis = stack.pop();\n          if (cleanThis != null) {\n            for (String fld : cleanThis) values.remove(fld);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["ef68eed598a8494abdcad4ef076d62b12c4d89f4","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"c26f00b574427b55127e869b935845554afde1fa":["ef68eed598a8494abdcad4ef076d62b12c4d89f4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"85a883878c0af761245ab048babc63d099f835f3":["1da8d55113b689b06716246649de6f62430f15c0","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"ef68eed598a8494abdcad4ef076d62b12c4d89f4":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ef68eed598a8494abdcad4ef076d62b12c4d89f4"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"85a883878c0af761245ab048babc63d099f835f3":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ef68eed598a8494abdcad4ef076d62b12c4d89f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}