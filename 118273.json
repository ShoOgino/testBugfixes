{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","commits":[{"id":"467b33453dfbb7b9a5e2388723dc92cc4d7f830a","date":1499159523,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(AutoScaling.EventType.NODELOST,\n          \"mock_trigger_name\", TimeSource.CURRENT_TIME.getTime(), sourceNodeName);\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", TimeSource.CURRENT_TIME.getTime(), sourceNodeName);\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(AutoScaling.EventType.NODELOST,\n          \"mock_trigger_name\", TimeSource.CURRENT_TIME.getTime(), sourceNodeName);\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", TimeSource.CURRENT_TIME.getTime(), sourceNodeName);\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getClusterDataProvider(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getClusterDataProvider(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.LIST) {\n        @Override\n        public String processAsync(String asyncId, SolrClient client) throws IOException, SolrServerException {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          super.processAsync(asyncId, client);\n          return asyncId;\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), new NodeLostTrigger(\"xyz\", Collections.singletonMap(\"event\", TriggerEventType.NODELOST.name()), survivor.getCoreContainer(), survivor.getCoreContainer().getZkController()),\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n      CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      List<SolrRequest> operations = Collections.singletonList(moveReplica);\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(1, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.LIST) {\n        @Override\n        public String processAsync(String asyncId, SolrClient client) throws IOException, SolrServerException {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          super.processAsync(asyncId, client);\n          return asyncId;\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), new NodeLostTrigger(\"xyz\", Collections.singletonMap(\"event\", TriggerEventType.NODELOST.name()), survivor.getCoreContainer(), survivor.getCoreContainer().getZkController()),\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.LIST) {\n        @Override\n        public String processAsync(String asyncId, SolrClient client) throws IOException, SolrServerException {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          super.processAsync(asyncId, client);\n          return asyncId;\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), new NodeLostTrigger(\"xyz\", Collections.singletonMap(\"event\", TriggerEventType.NODELOST.name()), survivor.getCoreContainer(), survivor.getCoreContainer().getZkController()),\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.LIST) {\n        @Override\n        public String processAsync(String asyncId, SolrClient client) throws IOException, SolrServerException {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          super.processAsync(asyncId, client);\n          return asyncId;\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer(), new NodeLostTrigger(\"xyz\", Collections.singletonMap(\"event\", TriggerEventType.NODELOST.name()), survivor.getCoreContainer(), survivor.getCoreContainer().getZkController()),\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTime()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.init(Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName));\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc201e01d035a7370848d9d2451e0e27ee77df2e","date":1544724144,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent\n        (TriggerEventType.NODELOST, \"mock_trigger_name\",\n         Collections.singletonList(cloudManager.getTimeSource().getTimeNs()),\n         Collections.singletonList(sourceNodeName),\n         CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST,\n          \"mock_trigger_name\", Collections.singletonList(TimeSource.CURRENT_TIME.getTimeNs()),\n          Collections.singletonList(sourceNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                @SuppressWarnings({\"rawtypes\"})\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent\n        (TriggerEventType.NODELOST, \"mock_trigger_name\",\n         Collections.singletonList(cloudManager.getTimeSource().getTimeNs()),\n         Collections.singletonList(sourceNodeName),\n         CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      @SuppressWarnings({\"unchecked\"})\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent\n        (TriggerEventType.NODELOST, \"mock_trigger_name\",\n         Collections.singletonList(cloudManager.getTimeSource().getTimeNs()),\n         Collections.singletonList(sourceNodeName),\n         CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                @SuppressWarnings({\"rawtypes\"})\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent\n        (TriggerEventType.NODELOST, \"mock_trigger_name\",\n         Collections.singletonList(cloudManager.getTimeSource().getTimeNs()),\n         Collections.singletonList(sourceNodeName),\n         CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      @SuppressWarnings({\"unchecked\"})\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                @SuppressWarnings({\"rawtypes\"})\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent\n        (TriggerEventType.NODELOST, \"mock_trigger_name\",\n         Collections.singletonList(cloudManager.getTimeSource().getTimeNs()),\n         Collections.singletonList(sourceNodeName),\n         CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      @SuppressWarnings({\"unchecked\"})\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testExecute().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testExecute() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testExecute\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    JettySolrRunner sourceNode = cluster.getRandomJetty(random());\n    String sourceNodeName = sourceNode.getNodeName();\n    ClusterState clusterState = solrClient.getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<JettySolrRunner> otherJetties = cluster.getJettySolrRunners().stream()\n        .filter(jettySolrRunner -> jettySolrRunner != sourceNode).collect(Collectors.toList());\n    assertFalse(otherJetties.isEmpty());\n    JettySolrRunner survivor = otherJetties.get(0);\n\n    try (ExecutePlanAction action = new ExecutePlanAction()) {\n      action.configure(loader, cloudManager, Collections.singletonMap(\"name\", \"execute_plan\"));\n\n      // used to signal if we found that ExecutePlanAction did in fact create the right znode before executing the operation\n      AtomicBoolean znodeCreated = new AtomicBoolean(false);\n\n      CollectionAdminRequest.AsyncCollectionAdminRequest moveReplica = new CollectionAdminRequest.MoveReplica(collectionName, replicas.get(0).getName(), survivor.getNodeName());\n      CollectionAdminRequest.AsyncCollectionAdminRequest mockRequest = new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.OVERSEERSTATUS) {\n        @Override\n        public void setAsyncId(String asyncId) {\n          super.setAsyncId(asyncId);\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/xyz/execute_plan\";\n          try {\n            if (zkClient().exists(parentPath, true)) {\n              java.util.List<String> children = zkClient().getChildren(parentPath, null, true);\n              if (!children.isEmpty()) {\n                String child = children.get(0);\n                byte[] data = zkClient().getData(parentPath + \"/\" + child, null, null, true);\n                @SuppressWarnings({\"rawtypes\"})\n                Map m = (Map) Utils.fromJSON(data);\n                if (m.containsKey(\"requestid\")) {\n                  znodeCreated.set(m.get(\"requestid\").equals(asyncId));\n                }\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n\n        }\n      };\n      List<CollectionAdminRequest.AsyncCollectionAdminRequest> operations = Lists.asList(moveReplica, new CollectionAdminRequest.AsyncCollectionAdminRequest[]{mockRequest});\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = new NodeLostTrigger.NodeLostEvent\n        (TriggerEventType.NODELOST, \"mock_trigger_name\",\n         Collections.singletonList(cloudManager.getTimeSource().getTimeNs()),\n         Collections.singletonList(sourceNodeName),\n         CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext actionContext = new ActionContext(survivor.getCoreContainer().getZkController().getSolrCloudManager(), null,\n          new HashMap<>(Collections.singletonMap(\"operations\", operations)));\n      action.process(nodeLostEvent, actionContext);\n\n//      assertTrue(\"ExecutePlanAction should have stored the requestid in ZK before executing the request\", znodeCreated.get());\n      @SuppressWarnings({\"unchecked\"})\n      List<NamedList<Object>> responses = (List<NamedList<Object>>) actionContext.getProperty(\"responses\");\n      assertNotNull(responses);\n      assertEquals(2, responses.size());\n      NamedList<Object> response = responses.get(0);\n      assertNull(response.get(\"failure\"));\n      assertNotNull(response.get(\"success\"));\n    }\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"467b33453dfbb7b9a5e2388723dc92cc4d7f830a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["467b33453dfbb7b9a5e2388723dc92cc4d7f830a"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"467b33453dfbb7b9a5e2388723dc92cc4d7f830a":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","467b33453dfbb7b9a5e2388723dc92cc4d7f830a","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}