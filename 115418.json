{"path":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","commits":[{"id":"269c8e9f1563aaf046389326e061a3a2c6a62a73","date":1173126130,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldList an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\"}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8cebc5115f801fdf57b09e98e300d821a20cf633"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"443dbf788c8e55f43ce3dd5fc64a835e92d63eb9","date":1178043652,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","sourceNew":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldLists an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\"}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldList an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\"}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["8cebc5115f801fdf57b09e98e300d821a20cf633"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cebc5115f801fdf57b09e98e300d821a20cf633","date":1253649595,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","sourceNew":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldLists an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree^-0.4}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldTwo =&gt; null, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldLists an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\"}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","bugFix":["269c8e9f1563aaf046389326e061a3a2c6a62a73","443dbf788c8e55f43ce3dd5fc64a835e92d63eb9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoosts(String[]).mjava","sourceNew":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldLists an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree^-0.4}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldTwo =&gt; null, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Like <code>parseFieldBoosts(String)</code>, but parses all the strings\n   * in the provided array (which may be null).\n   *\n   * @param fieldLists an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree^-0.4}</code>\n   * @return Map of fieldOne =&gt; 2.3, fieldTwo =&gt; null, fieldThree =&gt; -0.4\n   */\n  public static Map<String,Float> parseFieldBoosts(String[] fieldLists) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n      return new HashMap<String,Float>();\n    }\n    Map<String, Float> out = new HashMap<String,Float>(7);\n    for (String in : fieldLists) {\n      if (null == in || \"\".equals(in.trim()))\n        continue;\n      String[] bb = in.trim().split(\"\\\\s+\");\n      for (String s : bb) {\n        String[] bbb = s.split(\"\\\\^\");\n        out.put(bbb[0], 1 == bbb.length ? null : Float.valueOf(bbb[1]));\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"269c8e9f1563aaf046389326e061a3a2c6a62a73":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"443dbf788c8e55f43ce3dd5fc64a835e92d63eb9":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"8cebc5115f801fdf57b09e98e300d821a20cf633":["443dbf788c8e55f43ce3dd5fc64a835e92d63eb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["8cebc5115f801fdf57b09e98e300d821a20cf633"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"269c8e9f1563aaf046389326e061a3a2c6a62a73":["443dbf788c8e55f43ce3dd5fc64a835e92d63eb9"],"443dbf788c8e55f43ce3dd5fc64a835e92d63eb9":["8cebc5115f801fdf57b09e98e300d821a20cf633"],"8cebc5115f801fdf57b09e98e300d821a20cf633":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}