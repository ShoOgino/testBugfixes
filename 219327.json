{"path":"lucene/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","commits":[{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}