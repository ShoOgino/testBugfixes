{"path":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],Searcher).mjava","sourceNew":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, IndexSearcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, Searcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, IndexSearcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, IndexSearcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, IndexSearcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, IndexSearcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#getScores(ScoreDoc[],IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private HashMap<String,Float> getScores (ScoreDoc[] hits, IndexSearcher searcher)\n  throws IOException {\n    HashMap<String,Float> scoreMap = new HashMap<String,Float>();\n    int n = hits.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(hits[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      assertEquals (v.length, 1);\n      scoreMap.put (v[0], Float.valueOf(hits[i].score));\n    }\n    return scoreMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}