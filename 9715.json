{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setIndexOptions(field.indexOptions());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8c18828cd7c43a8460d7f4046d8138278a7eaa","date":1311619509,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setIndexOptions(getIndexOptions(field, value.toString()));\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setIndexOptions(field.indexOptions());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    org.apache.lucene.document.FieldType ft = new org.apache.lucene.document.FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n    \n    final org.apache.lucene.document.NumericField f = new org.apache.lucene.document.NumericField(field.getName(), precisionStep, ft);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    final NumericField f = new NumericField(field.getName(), precisionStep, stored ? Field.Store.YES : Field.Store.NO, indexed);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setOmitNorms(field.omitNorms());\n    f.setIndexOptions(getIndexOptions(field, value.toString()));\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n    \n    final org.apache.lucene.document.NumericField f = new org.apache.lucene.document.NumericField(field.getName(), precisionStep, ft);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    org.apache.lucene.document.FieldType ft = new org.apache.lucene.document.FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n    \n    final org.apache.lucene.document.NumericField f = new org.apache.lucene.document.NumericField(field.getName(), precisionStep, ft);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericField.DataType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericField.DataType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericField.DataType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericField.DataType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericField.DataType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.NumericField f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n    \n    final org.apache.lucene.document.NumericField f = new org.apache.lucene.document.NumericField(field.getName(), precisionStep, ft);\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f.setIntValue(i);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f.setFloatValue(fl);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f.setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f.setDoubleValue(d);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f.setLongValue(date.getTime());\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericField.DataType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericField.DataType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericField.DataType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericField.DataType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericField.DataType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.NumericField f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.NumericField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : null);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : null);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setIndexed(indexed);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(getIndexOptions(field, value.toString()));\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NO);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : null);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NO);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateFormatUtil.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : dateField.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateFormatUtil.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(NumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(NumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(NumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(NumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new org.apache.lucene.document.IntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new org.apache.lucene.document.FloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new org.apache.lucene.document.DoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateFormatUtil.parseMath(null, value.toString());\n        f = new org.apache.lucene.document.LongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateFormatUtil.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateFormatUtil.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateFormatUtil.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    FieldType ft = new FieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(indexed ? getIndexOptions(field, value.toString()) : IndexOptions.NONE);\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(FieldType.LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(FieldType.LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(FieldType.LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c26f00b574427b55127e869b935845554afde1fa"],"409324b31a1419d7c05a38211168cf317e39be77":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["d3f6c7717a0f1decd1668144537943efcc70cd95","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"4e8c18828cd7c43a8460d7f4046d8138278a7eaa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["fa0f44f887719e97183771e977cfc4bfb485b766"],"1d028314cced5858683a1bb4741423d0f934257b":["a78a90fc9701e511308346ea29f4f5e548bb39fe","409324b31a1419d7c05a38211168cf317e39be77"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4e8c18828cd7c43a8460d7f4046d8138278a7eaa"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d3f6c7717a0f1decd1668144537943efcc70cd95","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"770342641f7b505eaa8dccdc666158bff2419109":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["73bb5a57dc75b54a39494f99986599cae7dff417"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d3f6c7717a0f1decd1668144537943efcc70cd95","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["73bb5a57dc75b54a39494f99986599cae7dff417","3184874f7f3aca850248483485b4995343066875"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["4e8c18828cd7c43a8460d7f4046d8138278a7eaa"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"c26f00b574427b55127e869b935845554afde1fa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4e8c18828cd7c43a8460d7f4046d8138278a7eaa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["770342641f7b505eaa8dccdc666158bff2419109"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fa0f44f887719e97183771e977cfc4bfb485b766":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["fa0f44f887719e97183771e977cfc4bfb485b766"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}