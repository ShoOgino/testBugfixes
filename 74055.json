{"path":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","commits":[{"id":"3a0b8ae4ac997de7adea27f34c380588fa28d646","date":1253188966,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"/dev/null","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 0),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 10),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 0),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 10),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 0),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 10),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 0),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) 10),new Byte((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",new Byte((byte) -20),new Byte((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter<Byte> fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}