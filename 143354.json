{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","commits":[{"id":"6afbfd2ecc6d7825f89bbcf75e25046650f937a6","date":1579085873,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n\n    // check internal node against query\n    return point2D.relate(minLon, maxLon, minLat, maxLat);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","date":1579089602,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n\n    // check internal node against query\n    return point2D.relate(minLon, maxLon, minLat, maxLat);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapePointQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n\n    // check internal node against query\n    return point2D.relate(minLon, maxLon, minLat, maxLat);\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    double minLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));\n    double minLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));\n    double maxLat = GeoEncodingUtils.decodeLatitude(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));\n    double maxLon = GeoEncodingUtils.decodeLongitude(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));\n\n    // check internal node against query\n    return point2D.relate(minLon, maxLon, minLat, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","09c1e6d465800c73af60624bf9d4459a19f7940c"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6","1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}