{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","commits":[{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446d2d126e2d0a9c63a498d792c4072c820c1e95","date":1363304661,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8e7bb86500fd3d522e286ba89fad6089161c687","date":1363307515,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    cd.getCloudDescriptor().setShardState(null);\n    cd.getCloudDescriptor().setShardRange(null);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bd6aa52c560df7d631f1e5182265481bbb883ff","date":1365451215,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    cd.getCloudDescriptor().setShardState(null);\n    cd.getCloudDescriptor().setShardRange(null);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41e1b8818332825c60cfbd7efa38294078eae898","date":1369337752,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(SolrCore).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      // set update log to buffer before publishing the core\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","date":1370818281,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n    // shardState and shardRange are for one-time use only, thereafter the actual values in the Slice should be used\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","5bd6aa52c560df7d631f1e5182265481bbb883ff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n    \n    String coreNodeName = getCoreNodeName(cd);\n\n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n    \n    String coreNodeName = getCoreNodeName(cd);\n\n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN, false);\n\n    String coreNodeName = getCoreNodeName(cd);\n    \n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cd.getCloudDescriptor().getCoreNodeName() != null ) {\n        //we were already registered\n        if(zkStateReader.getClusterState().hasCollection(cd.getCloudDescriptor().getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCloudDescriptor().getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cd.getCloudDescriptor().getShardId());\n           if(slice != null){\n             if(slice.getReplica(cd.getCloudDescriptor().getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,coreNodeName +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n    \n    String coreNodeName = getCoreNodeName(cd);\n\n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ffaf135d27c1297795cec4df7a74d78f2c025a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a2fe85c6c40fb0b4a245119e3c49bf23657ac8","date":1385969158,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cloudDesc.getCoreNodeName() != null ) {\n        //we were already registered\n        if(zkStateReader.getClusterState().hasCollection(cloudDesc.getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cloudDesc.getShardId());\n           if(slice != null){\n             if(slice.getReplica(cloudDesc.getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,cloudDesc.getCoreNodeName() +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cd.getCloudDescriptor().getCoreNodeName() != null ) {\n        //we were already registered\n        if(zkStateReader.getClusterState().hasCollection(cd.getCloudDescriptor().getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCloudDescriptor().getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cd.getCloudDescriptor().getShardId());\n           if(slice != null){\n             if(slice.getReplica(cd.getCloudDescriptor().getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,coreNodeName +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ffaf135d27c1297795cec4df7a74d78f2c025a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cloudDesc.getCoreNodeName() != null ) {\n        //we were already registered\n        if(zkStateReader.getClusterState().hasCollection(cloudDesc.getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cloudDesc.getShardId());\n           if(slice != null){\n             if(slice.getReplica(cloudDesc.getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,cloudDesc.getCoreNodeName() +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // make sure the node name is set on the descriptor\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cd.getCloudDescriptor().getCoreNodeName() != null ) {\n        //we were already registered\n        if(zkStateReader.getClusterState().hasCollection(cd.getCloudDescriptor().getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCloudDescriptor().getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cd.getCloudDescriptor().getShardId());\n           if(slice != null){\n             if(slice.getReplica(cd.getCloudDescriptor().getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,coreNodeName +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ffaf135d27c1297795cec4df7a74d78f2c025a8","date":1388377715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cloudDesc.getCoreNodeName() != null ) {\n        //we were already registered\n        if(zkStateReader.getClusterState().hasCollection(cloudDesc.getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cloudDesc.getShardId());\n           if(slice != null){\n             if(slice.getReplica(cloudDesc.getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,cloudDesc.getCoreNodeName() +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":["98a2fe85c6c40fb0b4a245119e3c49bf23657ac8","40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e68ffa1d3fb1890f32fe313f88b57877cf76eb87","date":1388983068,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    checkStateInZk(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"840fc95f31a25d020cd825e880018bcfa0bacc71","date":1393483822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    checkStateInZk(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.isExternal()  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.isExternal()  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat() >1  ){\n        log.info(\"Registering watch for collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat() >1  ){\n        log.info(\"Registering watch for collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat()>1  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["727701119ba83331e2715512702367dc549a0d4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat()>1  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat()>1  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        log.info(\"Registering watch for collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["727701119ba83331e2715512702367dc549a0d4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727701119ba83331e2715512702367dc549a0d4f","date":1461113194,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        log.info(\"Registering watch for collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809","9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        log.info(\"Registering watch for collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","date":1464965423,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) throws InterruptedException {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650d17e953fb1d54e644f9928e3202e68b88eeb1","date":1465215234,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws InterruptedException {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) throws InterruptedException {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["840fc95f31a25d020cd825e880018bcfa0bacc71","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["41e1b8818332825c60cfbd7efa38294078eae898"],"e68ffa1d3fb1890f32fe313f88b57877cf76eb87":["5ffaf135d27c1297795cec4df7a74d78f2c025a8"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"446d2d126e2d0a9c63a498d792c4072c820c1e95":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"5bd6aa52c560df7d631f1e5182265481bbb883ff":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"98a2fe85c6c40fb0b4a245119e3c49bf23657ac8":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"d8e7bb86500fd3d522e286ba89fad6089161c687":["446d2d126e2d0a9c63a498d792c4072c820c1e95"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a5093a9e893633cc091cf2f729d7863671c2b715":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3f767f8c99eaedb984df754fe61f21c5de260f94"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73","98a2fe85c6c40fb0b4a245119e3c49bf23657ac8"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["9b701e0fcef214f86bab1daf107adce0b0131212"],"41e1b8818332825c60cfbd7efa38294078eae898":["5bd6aa52c560df7d631f1e5182265481bbb883ff"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0ad30c6a479e764150a3316e57263319775f1df2":["9b701e0fcef214f86bab1daf107adce0b0131212","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"191128ac5b85671b1671e2c857437694283b6ebf":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","650d17e953fb1d54e644f9928e3202e68b88eeb1"],"5ffaf135d27c1297795cec4df7a74d78f2c025a8":["98a2fe85c6c40fb0b4a245119e3c49bf23657ac8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87","840fc95f31a25d020cd825e880018bcfa0bacc71"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9b701e0fcef214f86bab1daf107adce0b0131212","0ad30c6a479e764150a3316e57263319775f1df2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9279b175e5e66258442d2123a50f052219a9cc1b","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["191128ac5b85671b1671e2c857437694283b6ebf","962cd4f5e313777f35da8f521265323e84184929"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a5093a9e893633cc091cf2f729d7863671c2b715"],"727701119ba83331e2715512702367dc549a0d4f":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b701e0fcef214f86bab1daf107adce0b0131212":["1072b8e47b50f1c4fb039e1f54a736f381d6f809","727701119ba83331e2715512702367dc549a0d4f"],"962cd4f5e313777f35da8f521265323e84184929":["191128ac5b85671b1671e2c857437694283b6ebf"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["d8e7bb86500fd3d522e286ba89fad6089161c687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9b701e0fcef214f86bab1daf107adce0b0131212","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9279b175e5e66258442d2123a50f052219a9cc1b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["9279b175e5e66258442d2123a50f052219a9cc1b"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"e68ffa1d3fb1890f32fe313f88b57877cf76eb87":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"446d2d126e2d0a9c63a498d792c4072c820c1e95":["d8e7bb86500fd3d522e286ba89fad6089161c687"],"5bd6aa52c560df7d631f1e5182265481bbb883ff":["41e1b8818332825c60cfbd7efa38294078eae898"],"98a2fe85c6c40fb0b4a245119e3c49bf23657ac8":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","5ffaf135d27c1297795cec4df7a74d78f2c025a8"],"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["650d17e953fb1d54e644f9928e3202e68b88eeb1","191128ac5b85671b1671e2c857437694283b6ebf"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"d8e7bb86500fd3d522e286ba89fad6089161c687":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a5093a9e893633cc091cf2f729d7863671c2b715":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["446d2d126e2d0a9c63a498d792c4072c820c1e95"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["840fc95f31a25d020cd825e880018bcfa0bacc71"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"41e1b8818332825c60cfbd7efa38294078eae898":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","962cd4f5e313777f35da8f521265323e84184929"],"5ffaf135d27c1297795cec4df7a74d78f2c025a8":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["727701119ba83331e2715512702367dc549a0d4f","9b701e0fcef214f86bab1daf107adce0b0131212"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60","c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","3f767f8c99eaedb984df754fe61f21c5de260f94"],"727701119ba83331e2715512702367dc549a0d4f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"9b701e0fcef214f86bab1daf107adce0b0131212":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a","0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["5bd6aa52c560df7d631f1e5182265481bbb883ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["96ea64d994d340044e0d57aeb6a5871539d10ca5","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["9279b175e5e66258442d2123a50f052219a9cc1b"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["98a2fe85c6c40fb0b4a245119e3c49bf23657ac8","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b869898f50ca80263bac2e3ae0949f7700e5c977","8fd5be977c105554c6a7b68afcdbc511439723ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}