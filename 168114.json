{"path":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2cc9c0968d7f98c987726279617b99c53129ed","date":1319936406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      lock.lock();\n      try {\n        clazz = resolveEncoder(name);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      lock.lock();\n      try {\n        clazz = resolveEncoder(name);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      lock.lock();\n      try {\n        clazz = resolveEncoder(name);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e , false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      lock.lock();\n      try {\n        clazz = resolveEncoder(name);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new InitializationException(\"Error initializing: \" + name + \"/\" + clazz, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      lock.lock();\n      try {\n        clazz = resolveEncoder(name);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76cc9b4f652f477b113ac4dcf7593e1414108fcc","date":1336271018,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      lock.lock();\n      try {\n        clazz = resolveEncoder(name);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n      \n      // Try to set the maxCodeLength\n      String v = args.get( \"maxCodeLength\" );\n      if( v != null ) {\n        Method setter = encoder.getClass().getMethod( \"setMaxCodeLen\", int.class );\n        setter.invoke( encoder, Integer.parseInt( v ) );\n      }\n    } \n    catch (Exception e) {\n      throw new InitializationException(\"Error initializing: \" + name + \"/\" + clazz, e);\n    }\n  }\n\n","bugFix":["f180d0a9bb8516854d228e8cf9daa42572290f90","758a0ba5e213f4d1fc89087ae6e4678f7879e450","ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f","ae2cc9c0968d7f98c987726279617b99c53129ed","39d25aba1848c644c6d22b943d3d66f661445ac7","b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ENGLISH));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n\n    inject = getBoolean(INJECT, true);\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new InitializationException(\"Missing required parameter: \" + ENCODER\n          + \" [\" + registry.keySet() + \"]\");\n    }\n    clazz = registry.get(name.toUpperCase(Locale.ROOT));\n    if( clazz == null ) {\n      clazz = resolveEncoder(name);\n    }\n\n    String v = args.get(MAX_CODE_LENGTH);\n    if (v != null) {\n      maxCodeLength = Integer.valueOf(v);\n      try {\n        setMaxCodeLenMethod = clazz.getMethod(\"setMaxCodeLen\", int.class);\n      } catch (Exception e) {\n        throw new InitializationException(\"Encoder \" + name + \" / \" + clazz + \" does not support \" + MAX_CODE_LENGTH, e);\n      }\n    }\n\n    getEncoder();//trigger initialization for potential problems to be thrown now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae2cc9c0968d7f98c987726279617b99c53129ed":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"2acf500f78aa12b92e371fd89c719291986b6b90":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["2acf500f78aa12b92e371fd89c719291986b6b90","3241e06e642196396b80bb293acd9c0814d079e0"],"46d8ada1fff8d18cb197c38c7983225162599948":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","2acf500f78aa12b92e371fd89c719291986b6b90"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","5a1a22b1ad88b436661458df567f3fdb446392a4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"3241e06e642196396b80bb293acd9c0814d079e0":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"ae2cc9c0968d7f98c987726279617b99c53129ed":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"c26f00b574427b55127e869b935845554afde1fa":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5a1a22b1ad88b436661458df567f3fdb446392a4","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}