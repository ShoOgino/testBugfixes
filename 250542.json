{"path":"solr/core/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","sourceNew":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","sourceOld":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","sourceNew":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","sourceOld":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","sourceNew":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","sourceOld":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheRegenerator#regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object).mjava","sourceNew":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher,\n                                @SuppressWarnings({\"rawtypes\"})SolrCache newCache,\n                                @SuppressWarnings({\"rawtypes\"})SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","sourceOld":"  /**\n   * Regenerate an old cache item and insert it into <code>newCache</code>\n   *\n   * @param newSearcher the new searcher who's caches are being autowarmed\n   * @param newCache    where regenerated cache items should be stored. the target of the autowarming\n   * @param oldCache    the old cache being used as a source for autowarming\n   * @param oldKey      the key of the old cache item to regenerate in the new cache\n   * @param oldVal      the old value of the cache item\n   * @return true to continue with autowarming, false to stop\n   */\n  public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache, SolrCache oldCache, Object oldKey, Object oldVal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}