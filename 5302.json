{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    \n    // Basic w/aliases\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8","date":1499970586,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    System.out.println(\"ExpressionString: \" + expressionString.toString());\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    \n    // Basic w/aliases\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    \n    // Basic w/aliases\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    System.out.println(\"ExpressionString: \" + expressionString.toString());\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    \n    // Basic w/aliases\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    \n    // Basic w/aliases\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    String expressionString;\n    \n    // Basic test\n    try (CloudSolrStream stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      System.out.println(\"ExpressionString: \" + expressionString.toString());\n      assertTrue(expressionString.contains(\"search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n      assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    }\n    // Basic w/aliases\n    try (CloudSolrStream stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"id=izzy\"));\n      assertTrue(expressionString.contains(\"a_s=kayden\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    System.out.println(\"ExpressionString: \" + expressionString.toString());\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    \n    // Basic w/aliases\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["f00f1c5fad501b66705121feb623f8cfbb6712f9","79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["aaf90fc29510e72665ac7934f34c3d1c25efad64","79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8":["aaf90fc29510e72665ac7934f34c3d1c25efad64","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}