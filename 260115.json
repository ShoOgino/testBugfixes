{"path":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","commits":[{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** This method may return the reader back, if the\n   *  incoming reader is already atomic. */\n  public static IndexReader wrap(IndexReader reader) {\n    final List<IndexReader> subs = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subs, reader);\n    if (subs == null) {\n      // already an atomic reader\n      return reader;\n    } else if (subs.size() == 1) {\n      return subs.get(0);\n    } else {\n      return new SlowMultiReaderWrapper(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method may return the reader back, if the\n   *  incoming reader is already atomic. */\n  public static IndexReader wrap(IndexReader reader) throws IOException {\n    final List<IndexReader> subs = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subs, reader);\n    if (subs == null) {\n      // already an atomic reader\n      return reader;\n    } else if (subs.size() == 1) {\n      return subs.get(0);\n    } else {\n      return new SlowMultiReaderWrapper(reader);\n    }\n  }\n\n","sourceOld":"  /** This method may return the reader back, if the\n   *  incoming reader is already atomic. */\n  public static IndexReader wrap(IndexReader reader) {\n    final List<IndexReader> subs = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subs, reader);\n    if (subs == null) {\n      // already an atomic reader\n      return reader;\n    } else if (subs.size() == 1) {\n      return subs.get(0);\n    } else {\n      return new SlowMultiReaderWrapper(reader);\n    }\n  }\n\n","bugFix":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","sourceNew":null,"sourceOld":"  /** This method may return the reader back, if the\n   *  incoming reader is already atomic. */\n  public static IndexReader wrap(IndexReader reader) throws IOException {\n    final List<IndexReader> subs = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subs, reader);\n    if (subs == null) {\n      // already an atomic reader\n      return reader;\n    } else if (subs.size() == 1) {\n      return subs.get(0);\n    } else {\n      return new SlowMultiReaderWrapper(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","sourceNew":null,"sourceOld":"  /** This method may return the reader back, if the\n   *  incoming reader is already atomic. */\n  public static IndexReader wrap(IndexReader reader) throws IOException {\n    final List<IndexReader> subs = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subs, reader);\n    if (subs == null) {\n      // already an atomic reader\n      return reader;\n    } else if (subs.size() == 1) {\n      return subs.get(0);\n    } else {\n      return new SlowMultiReaderWrapper(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72eb67b05aa3b9d64968e9a9086135c2e969e681","date":1327844263,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** This method is sugar for getting an {@link AtomicIndexReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeIndexReader) {\n      return new SlowMultiReaderWrapper((CompositeIndexReader) reader);\n    } else {\n      assert reader instanceof AtomicIndexReader;\n      return (AtomicIndexReader) reader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7baf7e55943149df5bb636dc63bbe4cccc9a297","date":1327844821,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link AtomicIndexReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeIndexReader) {\n      return new SlowCompositeReaderWrapper((CompositeIndexReader) reader);\n    } else {\n      assert reader instanceof AtomicIndexReader;\n      return (AtomicIndexReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link AtomicIndexReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeIndexReader) {\n      return new SlowMultiReaderWrapper((CompositeIndexReader) reader);\n    } else {\n      assert reader instanceof AtomicIndexReader;\n      return (AtomicIndexReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51c34a3639838887e7997850b6be80f838a4d6f7":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"72eb67b05aa3b9d64968e9a9086135c2e969e681":["51c34a3639838887e7997850b6be80f838a4d6f7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["406e7055a3e99d3fa6ce49a555a51dd18b321806","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c34a3639838887e7997850b6be80f838a4d6f7"],"d7baf7e55943149df5bb636dc63bbe4cccc9a297":["72eb67b05aa3b9d64968e9a9086135c2e969e681"]},"commit2Childs":{"51c34a3639838887e7997850b6be80f838a4d6f7":["72eb67b05aa3b9d64968e9a9086135c2e969e681","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"72eb67b05aa3b9d64968e9a9086135c2e969e681":["d7baf7e55943149df5bb636dc63bbe4cccc9a297"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d7baf7e55943149df5bb636dc63bbe4cccc9a297":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817","d7baf7e55943149df5bb636dc63bbe4cccc9a297"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}