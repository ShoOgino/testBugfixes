{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","commits":[{"id":"e46ef1a2b9cf8410947a87a43aba2b400394e773","date":1517224576,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04482e079fab89e868ddb200292446d0bc10e86f","date":1522419133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12169\")\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"155b2aeb14a205060a557e1b67bdf30f8f48ec02","date":1522430818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12169\")\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSelectedCollections() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\",2, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 2));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 2));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e46ef1a2b9cf8410947a87a43aba2b400394e773":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04482e079fab89e868ddb200292446d0bc10e86f":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","155b2aeb14a205060a557e1b67bdf30f8f48ec02"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"155b2aeb14a205060a557e1b67bdf30f8f48ec02":["04482e079fab89e868ddb200292446d0bc10e86f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6b87d1f8719d7f05be003f3477450b74af13706a","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["6b87d1f8719d7f05be003f3477450b74af13706a"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6b87d1f8719d7f05be003f3477450b74af13706a","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"e46ef1a2b9cf8410947a87a43aba2b400394e773":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"04482e079fab89e868ddb200292446d0bc10e86f":["155b2aeb14a205060a557e1b67bdf30f8f48ec02"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["04482e079fab89e868ddb200292446d0bc10e86f","aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"155b2aeb14a205060a557e1b67bdf30f8f48ec02":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"6b87d1f8719d7f05be003f3477450b74af13706a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"89948af0461fead48f44ba8fb7866f107ce83f22":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}