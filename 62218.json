{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#optimize(HashMap[String,String[]],HashMap[String,String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#optimize(HashMap[String,String[]],HashMap[String,String]).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#optimize(HashMap[String,String[]],HashMap[String,String]).mjava","sourceNew":"  private HashMap<String,String[]> optimize(HashMap<String,String[]> word2Syns, HashMap<String,String> internedWords) {\n    if (DEBUG) {\n      System.err.println(\"before gc\");\n      for (int i=0; i < 10; i++) System.gc();\n      System.err.println(\"after gc\");\n    }\n    \n    // collect entries\n    int len = 0;\n    int size = word2Syns.size();\n    String[][] allSynonyms = new String[size][];\n    String[] words = new String[size];\n    Iterator<Map.Entry<String,String[]>> iter = word2Syns.entrySet().iterator();\n    for (int j=0; j < size; j++) {\n      Map.Entry<String,String[]> entry = iter.next();\n      allSynonyms[j] = entry.getValue(); \n      words[j] = entry.getKey();\n      len += words[j].length();\n    }\n    \n    // assemble large string containing all words\n    StringBuilder buf = new StringBuilder(len);\n    for (int j=0; j < size; j++) buf.append(words[j]);\n    String allWords = new String(buf.toString()); // ensure compact string across JDK versions\n    buf = null;\n    \n    // intern words at app level via memory-overlaid substrings\n    for (int p=0, j=0; j < size; j++) {\n      String word = words[j];\n      internedWords.put(word, allWords.substring(p, p + word.length()));\n      p += word.length();\n    }\n    \n    // replace words with interned words\n    for (int j=0; j < size; j++) {\n      String[] syns = allSynonyms[j];\n      for (int k=syns.length; --k >= 0; ) {\n        syns[k] = internedWords.get(syns[k]);\n      }\n      word2Syns.remove(words[j]);\n      word2Syns.put(internedWords.get(words[j]), syns);\n    }\n    \n    if (DEBUG) {\n      words = null;\n      allSynonyms = null;\n      internedWords = null;\n      allWords = null;\n      System.err.println(\"before gc\");\n      for (int i=0; i < 10; i++) System.gc();\n      System.err.println(\"after gc\");\n    }\n    return word2Syns;\n  }\n\n","sourceOld":"  private HashMap<String,String[]> optimize(HashMap<String,String[]> word2Syns, HashMap<String,String> internedWords) {\n    if (DEBUG) {\n      System.err.println(\"before gc\");\n      for (int i=0; i < 10; i++) System.gc();\n      System.err.println(\"after gc\");\n    }\n    \n    // collect entries\n    int len = 0;\n    int size = word2Syns.size();\n    String[][] allSynonyms = new String[size][];\n    String[] words = new String[size];\n    Iterator<Map.Entry<String,String[]>> iter = word2Syns.entrySet().iterator();\n    for (int j=0; j < size; j++) {\n      Map.Entry<String,String[]> entry = iter.next();\n      allSynonyms[j] = entry.getValue(); \n      words[j] = entry.getKey();\n      len += words[j].length();\n    }\n    \n    // assemble large string containing all words\n    StringBuilder buf = new StringBuilder(len);\n    for (int j=0; j < size; j++) buf.append(words[j]);\n    String allWords = new String(buf.toString()); // ensure compact string across JDK versions\n    buf = null;\n    \n    // intern words at app level via memory-overlaid substrings\n    for (int p=0, j=0; j < size; j++) {\n      String word = words[j];\n      internedWords.put(word, allWords.substring(p, p + word.length()));\n      p += word.length();\n    }\n    \n    // replace words with interned words\n    for (int j=0; j < size; j++) {\n      String[] syns = allSynonyms[j];\n      for (int k=syns.length; --k >= 0; ) {\n        syns[k] = internedWords.get(syns[k]);\n      }\n      word2Syns.remove(words[j]);\n      word2Syns.put(internedWords.get(words[j]), syns);\n    }\n    \n    if (DEBUG) {\n      words = null;\n      allSynonyms = null;\n      internedWords = null;\n      allWords = null;\n      System.err.println(\"before gc\");\n      for (int i=0; i < 10; i++) System.gc();\n      System.err.println(\"after gc\");\n    }\n    return word2Syns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#optimize(HashMap[String,String[]],HashMap[String,String]).mjava","sourceNew":null,"sourceOld":"  private HashMap<String,String[]> optimize(HashMap<String,String[]> word2Syns, HashMap<String,String> internedWords) {\n    if (DEBUG) {\n      System.err.println(\"before gc\");\n      for (int i=0; i < 10; i++) System.gc();\n      System.err.println(\"after gc\");\n    }\n    \n    // collect entries\n    int len = 0;\n    int size = word2Syns.size();\n    String[][] allSynonyms = new String[size][];\n    String[] words = new String[size];\n    Iterator<Map.Entry<String,String[]>> iter = word2Syns.entrySet().iterator();\n    for (int j=0; j < size; j++) {\n      Map.Entry<String,String[]> entry = iter.next();\n      allSynonyms[j] = entry.getValue(); \n      words[j] = entry.getKey();\n      len += words[j].length();\n    }\n    \n    // assemble large string containing all words\n    StringBuilder buf = new StringBuilder(len);\n    for (int j=0; j < size; j++) buf.append(words[j]);\n    String allWords = new String(buf.toString()); // ensure compact string across JDK versions\n    buf = null;\n    \n    // intern words at app level via memory-overlaid substrings\n    for (int p=0, j=0; j < size; j++) {\n      String word = words[j];\n      internedWords.put(word, allWords.substring(p, p + word.length()));\n      p += word.length();\n    }\n    \n    // replace words with interned words\n    for (int j=0; j < size; j++) {\n      String[] syns = allSynonyms[j];\n      for (int k=syns.length; --k >= 0; ) {\n        syns[k] = internedWords.get(syns[k]);\n      }\n      word2Syns.remove(words[j]);\n      word2Syns.put(internedWords.get(words[j]), syns);\n    }\n    \n    if (DEBUG) {\n      words = null;\n      allSynonyms = null;\n      internedWords = null;\n      allWords = null;\n      System.err.println(\"before gc\");\n      for (int i=0; i < 10; i++) System.gc();\n      System.err.println(\"after gc\");\n    }\n    return word2Syns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}